<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">

<sqlMap namespace="BO.Goods">

	<typeAlias  alias="commMap" type="com.devwork.common.map.CommonMap"/>
	<typeAlias  alias="comCodeListMap" type="com.devwork.bo.goods.util.vo.SelectBoxVO"/>

	<!-- 상품등록승인 TUNED /*+ no_merge  push_pred */ 20161026 -->
	<sql id="goodsAppr_list">
        SELECT /*+  no_merge  push_pred  use_hash(C T A E S) index_ffs(GD_MGT_GOODS_CTGRY_IX02) index_ffs(GD_CTGRY_PAVLN_MAPP_IX02) */
			  A.GOODS_CD
			, DECODE(E.GOODS_CD, NULL, '신규', '수정') AS REQ_TYPE
			, A.GOODS_NM || ' ' || A.UNIT AS GOODS_NM
			, A.SELL_TYP_CD    /*상품 판매유형 코드*/
			, A.GOODS_STUS_CD    /*상품 상태코드*/
			, A.APPR_PROC_CD    /*승인 절차 코드*/
			, A.GOODS_BASIC_FEE || '%'  AS GOODS_BASIC_FEE  /*상품 기본 수수료*/
			, A.STD_SELL_PRC /* 판매가 */
			, A.SUPP_COMP_ID
			, (SELECT BCNC_NM FROM CO_SUPP_COMP_MAST WHERE SUPP_COMP_ID = A.SUPP_COMP_ID) AS SUPP_COMP_NM
			, C.AREA_NM AS PRDCTN_AREA_NM
			, DECODE(EXTRA_GOODS_YN, 'Y', '예', '아니오') AS EXTRA_GOODS_YN /*덤 상품 여부 */
			, DECODE(GOODS_OPTN_APPLY_YN, 'Y', '예', '아니오') AS GOODS_OPTN_APPLY_YN /*사은품 여부*/
			, DECODE( A.RGR_GOODS_YN, 'Y', '예', '아니오') AS RGR_GOODS_YN /*단골상품 여부*/
			, DECODE( A.GIFT_PSSB_YN, 'Y', '예', '아니오') AS GIFT_PSSB_YN /*기프티콘 여부*/
			, DECODE( A.SMART_SHPBOX_PSSB_YN, 'Y', '예', '아니오') AS SMART_SHPBOX_PSSB_YN /*스마트 장바구니 주문 가능여부*/
			, TO_CHAR(TO_DATE(A.STRT_SUPP_YMD), 'YYYY-MM-DD') AS STRT_SUPP_YMD /*최초 공급 일자*/
			, A.MD_APPR_REJCT_REASN
			, A.MD_ID
			, A.GOODS_CHG_REASN_CD
			, A.GOODS_CHG_REASN_CONT
			, A.CHG_DATE
			, S.CTGRY_CD
			, A.OVSEA_SEND_PSSB_YN
			, F_GET_COMN_CD_NM('SELL_TYP_CD', A.SELL_TYP_CD) AS SELL_TYP_NM
			, F_GET_COMN_CD_NM('GOODS_STUS_CD', A.GOODS_STUS_CD) AS GOODS_STUS_NM
			, F_GET_COMN_CD_NM('APPR_PROC_CD', A.APPR_PROC_CD) AS APPR_PROC_NM
			, F_GET_COMN_CD_NM('ERNC_GOODS_PRDLST_CD', A.ERNC_GOODS_PRDLST_CD) AS ERNC_GOODS_PRDLST_NM
			, F_GET_COMN_CD_NM('TAXT_DIV_CD', A.TAXT_DIV_CD) AS TAXT_DIV_NM
			, F_GET_COMN_CD_NM('SUPP_DSCNTC_STUS_CD', A.SUPP_DSCNTC_STUS_CD) AS SUPP_DSCNTC_STUS_NM
			, F_GET_COMN_CD_NM('GOODS_CHG_REASN_CD', A.GOODS_CHG_REASN_CD) AS GOODS_CHG_REASN_NM
			, F_GET_COMN_CD_NM('PAVLN_DIV_CD', S.PAVLN_DIV_CD) AS PAVLN_DIV_NM
			, ( SELECT B.CTGRY_CD
				  FROM GD_CTGRY_MAST B
				 WHERE CONNECT_BY_ISLEAF = 1
				 START WITH B.CTGRY_CD = S.CTGRY_CD
			   CONNECT BY PRIOR B.HRNK_CTGRY_CD = B.CTGRY_CD ) TOP_CTGRY_CD
		 FROM GD_MGT_GOODS_MAST A
			, GD_MGT_GOODS_CTGRY S
			, GD_CTGRY_PAVLN_MAPP T
			, CM_AREA_CD C
			, (SELECT GOODS_CD FROM GD_GOODS_MAST) E
		WHERE A.PRDCTN_AREA_CD = C.AREA_CD(+)
		  AND A.GOODS_CD = E.GOODS_CD(+)
		  AND S.GOODS_CD = A.GOODS_CD
		  AND S.BASIC_CTGRY_YN = 'Y'
		  AND S.USE_YN = 'Y'
		  AND T.PAVLN_DIV_CD = S.PAVLN_DIV_CD
		  AND T.CTGRY_CD = S.CTGRY_CD
		<isNotEmpty property="str_div" prepend="AND">
			A.GOODS_CD IN ( SELECT /*+ no_merge  push_pred */ X.GOODS_CD
							  FROM GD_CTGRY_PAVLN_MAPP B, GD_MGT_GOODS_CTGRY X
							 WHERE X.USE_YN = 'Y'
							   AND X.PAVLN_DIV_CD = B.PAVLN_DIV_CD
							   AND X.CTGRY_CD = B.CTGRY_CD
							   AND B.PAVLN_DIV_CD = #str_div#
							   AND B.CTGRY_CD IN ( SELECT A.CTGRY_CD
													 FROM GD_CTGRY_MAST A
													WHERE A.USE_YN = 'Y'
											<isNotEmpty property="search_ctgry_cd" >
													START WITH A.CTGRY_CD = #search_ctgry_cd#
												  CONNECT BY PRIOR A.CTGRY_CD = A.HRNK_CTGRY_CD
											 </isNotEmpty>
												 )
						  )
	   </isNotEmpty>
	   <isNotEmpty property="search_text">
			<isNotEmpty property="search_type" prepend="AND">
				<isEqual property="search_type" compareValue="goods_cd">
					A.GOODS_CD LIKE #search_text#||'%'
				</isEqual>
				<isEqual property="search_type" compareValue="goods_nm">
					A.GOODS_NM LIKE '%'||#search_text#||'%'
				</isEqual>
			</isNotEmpty>
			<isEmpty property="search_type" prepend="AND">
				(A.GOODS_CD LIKE #search_text#||'%' OR A.GOODS_NM LIKE '%'||#search_text#||'%')
			</isEmpty>
	   </isNotEmpty>
	   <isNotEmpty property="search_supp_comp_id" prepend="AND">
			A.SUPP_COMP_ID = #search_supp_comp_id#
	   </isNotEmpty>
	   <isNotEmpty property="search_sell_typ_cd" prepend="AND">
			A.SELL_TYP_CD = #search_sell_typ_cd#
	   </isNotEmpty>
	   <isNotEmpty property="search_appr_proc_cd" prepend="AND">
			A.APPR_PROC_CD = #search_appr_proc_cd#
	   </isNotEmpty>
	   <isNotEmpty property="search_goods_stus_cd" prepend="AND">
			A.GOODS_STUS_CD = #search_goods_stus_cd#
	   </isNotEmpty>
	   <isNotEmpty property="search_ovsea_send_pssb_yn" prepend="AND">
	   		A.OVSEA_SEND_PSSB_YN = #search_ovsea_send_pssb_yn#
	   </isNotEmpty>
	   <isNotEmpty property="search_strt_ymd" prepend="AND">
	   		TO_CHAR(A.CHG_DATE, 'YYYY-MM-DD') BETWEEN #search_strt_ymd# AND #search_end_ymd#
	   </isNotEmpty>
	   <isNotEmpty property="search_req_type" prepend="AND">
			<isEqual property="search_req_type" compareValue="CHG">
				E.GOODS_CD IS NOT NULL
			</isEqual>
			<isEqual property="search_req_type" compareValue="NEW">
				E.GOODS_CD IS NULL
			</isEqual>
	   </isNotEmpty>
	   <isNotEmpty property="goods_cd" prepend="AND">
	   		A.GOODS_CD = #goods_cd#
	   </isNotEmpty>
	</sql>

	<select id="selectGoodsApprList" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
			SELECT *
				FROM ( SELECT /*+ no_merge  push_pred */
					<isEmpty property="sidx">
						/* SELECT COUNT(A.PAVLN_DIV_NM) OVER (ORDER BY 1) TOTAL_CNT, */
						ROW_NUMBER () OVER (ORDER BY CHG_DATE DESC) RNUM
					</isEmpty>
					, A.*
					FROM (
						SELECT /*+ no_merge  push_pred */ A.*
							 , A.PAVLN_DIV_NM ||
							   ( SELECT SYS_CONNECT_BY_PATH(B.CTGRY_NM, '▶')
							   	   FROM GD_CTGRY_MAST B
								  WHERE B.CTGRY_CD = A.CTGRY_CD
								  START WITH B.CTGRY_CD = A.TOP_CTGRY_CD
								CONNECT BY PRIOR B.CTGRY_CD = B.HRNK_CTGRY_CD) BASIC_CTGRY_NM /* 기본 카테고리*/
							FROM(
							<include refid="goodsAppr_list" />
							)A
						) A
					) A
		<isNotEmpty property="firstIndex">
			WHERE RNUM BETWEEN  #firstIndex# AND #lastIndex#
		</isNotEmpty>
	</select>

	<select id="selectGoodsApprCount" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		SELECT COUNT(*) AS CNT
		  FROM (<include refid="goodsAppr_list" />)
	</select>

	<update id="updateGoodsStatChg" parameterClass="java.util.HashMap">
		UPDATE GD_MGT_GOODS_MAST
		   SET APPR_PROC_CD = #appr_proc_cd#
		     , MD_APPR_REJCT_REASN = #md_appr_rejct_reasn#
			 , CHG_DATE = SYSDATE
		<isNotEmpty property="login_usr_id">
			 , CHGER_ID = #login_usr_id#
		</isNotEmpty>
		 WHERE 1=1
		 <isNotEmpty property="goods_arr" prepend="AND">
		 	GOODS_CD IN
			 <iterate property="goods_arr" open="("  close=")" conjunction=",">
				#goods_arr[]#
			</iterate>
		</isNotEmpty>
	</update>

	<select id="selectGoodsCdSeqPavln02" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT SEQ_GOODS_CD_PAVLN02.NEXTVAL FROM DUAL
	</select>

	<select id="selectGoodsCdSeqPavln03" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT SEQ_GOODS_CD_PAVLN03.NEXTVAL FROM DUAL
	</select>

	<select id="selectGoodsCdSeqPavln05" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT SEQ_GOODS_CD_PAVLN05.NEXTVAL FROM DUAL
	</select>

	<select id="selectGoodsCdVerif" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		SELECT COUNT(*) AS CNT
		  FROM GD_MGT_GOODS_MAST
		 WHERE GOODS_CD = #goods_cd#
	</select>

	<select id="selectCtgryList"  parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
        SELECT A.CTGRY_CD AS VALUE
             , A.CTGRY_NM AS NAME
             , A.SORT_ORDER
          FROM GD_CTGRY_MAST A, GD_CTGRY_PAVLN_MAPP B
         WHERE A.CTGRY_CD = B.CTGRY_CD
           AND A.USE_YN = 'Y'
           AND POSTNET_CTGRY_YN = 'N'
		<isNotEmpty property="hrnk_ctgry_cd" prepend="AND">
			A.HRNK_CTGRY_CD = #hrnk_ctgry_cd#
		</isNotEmpty>
		<isEmpty property="hrnk_ctgry_cd">
			<isNotEmpty property="ctgry_level" prepend="AND">
				A.CTGRY_LEVEL = #ctgry_level#
			</isNotEmpty>
		</isEmpty>
		<isNotEmpty property="pavln_div_cd" prepend="AND">
			B.PAVLN_DIV_CD = #pavln_div_cd#
		</isNotEmpty>
		<isNotEmpty property="ctgry_cd" prepend="AND">
			A.CTGRY_CD = #ctgry_cd#
		</isNotEmpty>
		<isEqual property="ctgry_grp_yn" compareValue="Y">
			GROUP BY A.CTGRY_CD, A.CTGRY_NM, A.SORT_ORDER
			ORDER BY A.SORT_ORDER
		</isEqual>
	</select>

	<select id="selectSuppPavlnCtgryList"  parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
        SELECT DISTINCT A.CTGRY_CD AS VALUE
             , A.CTGRY_NM AS NAME
             , A.SORT_ORDER
          FROM GD_CTGRY_MAST A, GD_CTGRY_PAVLN_MAPP B, CO_PAVLN_MGT C
         WHERE A.CTGRY_CD = B.CTGRY_CD
           AND B.PAVLN_DIV_CD = C.PAVLN_DIV_CD
           AND A.USE_YN = 'Y'
           AND A.POSTNET_CTGRY_YN = 'N'
           AND C.SUPP_COMP_ID = #supp_comp_id#
		<isNotEmpty property="hrnk_ctgry_cd" prepend="AND">
			A.HRNK_CTGRY_CD = #hrnk_ctgry_cd#
		</isNotEmpty>
		<isEmpty property="hrnk_ctgry_cd">
			<isNotEmpty property="ctgry_level" prepend="AND">
				A.CTGRY_LEVEL = #ctgry_level#
			</isNotEmpty>
		</isEmpty>
		<isNotEmpty property="pavln_div_cd" prepend="AND">
			B.PAVLN_DIV_CD = #pavln_div_cd#
		</isNotEmpty>
		<isNotEmpty property="ctgry_cd" prepend="AND">
			A.CTGRY_CD = #ctgry_cd#
		</isNotEmpty>
		<isEqual property="ctgry_grp_yn" compareValue="Y">
			GROUP BY A.CTGRY_CD, A.CTGRY_NM, A.SORT_ORDER
		</isEqual>
		ORDER BY A.SORT_ORDER
	</select>

	<select id="selectGoodsArtcList"  parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT A.FTC_PRDLST_GRP_CD	/*공정위 품목 그룹 코드*/
			 , A.FTC_PRDLST_STD_CD	/*공정위 품목 기준 코드*/
			 , A.ITEM_NM			/*항목명*/
			 , A.ITEM_DESC			/*항목설명*/
			 , A.BASIC_INPUT_CONT	/*기본 입력 내용*/
			 , A.INPUT_METH_CD		/*입력 방식 코드*/
			 , A.INPUT_METH_SUB_CD	/*입력 방식 서브 코드*/
			 , A.INPUT_VAL_CHECK_YN	/*입력 값 체크 여부*/
			 , A.SORT_ORDER
			 , B.GOODS_CD			/*상품 코드*/
			 , B.GOODS_ITEM_CONT	/*상품 항목 내용*/
			 , B.INPUT_METH_SUB_CD AS ITEM_SUB_YN
			 , B.INPUT_METH_SUB_CD
		  FROM GD_MGT_FTC_STD_CD A
			 , GD_MGT_FTC_PRDLST B
		 WHERE A.FTC_PRDLST_STD_CD = B.FTC_PRDLST_STD_CD(+)
		   AND A.FTC_PRDLST_GRP_CD = B.FTC_PRDLST_GRP_CD(+)
		   AND A.USE_YN = 'Y'
		   AND A.FTC_PRDLST_GRP_CD = #ernc_goods_prdlst_cd#
		   AND B.GOODS_CD(+) = #goods_cd#
		 ORDER BY A.SORT_ORDER
	</select>

	<select id="selectCrtfcList"  parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT A.CRTFCT_ID AS VALUE
			 , A.CRTFCT_NM || ' / ' || A.CRTFC_OR_NM AS NAME
	 	  FROM SC_GOODS_CRTFC_MAST A
		WHERE A.USE_YN = 'Y'
		<isNotEmpty property="crtfc_prdlst_cd" prepend="AND">
			CRTFC_PRDLST_CD = #crtfc_prdlst_cd#
		</isNotEmpty>
		ORDER BY A.SORT_ORDER
	</select>

	<select id="selectCrtfcKCList"  parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT A.CRTFCT_ID AS VALUE
			 , A.CRTFCT_NM || ' / ' || A.CRTFC_OR_NM AS NAME
	 	  FROM SC_GOODS_CRTFC_MAST A
		WHERE A.USE_YN = 'Y'
		  AND A.CRTFCT_NM LIKE '%KC%'
		ORDER BY A.SORT_ORDER
	</select>

	<select id="selectHsCdList" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
			SELECT *
				FROM ( SELECT
					<isEmpty property="sidx">
						ROW_NUMBER () OVER (ORDER BY HCDNUM1 DESC) RNUM
					</isEmpty>
					, A.*
					FROM (
						SELECT A.*
							FROM(
								SELECT HCDNUM1||'-'||HCDNUM2||'-'||HCDNUM3||'-'||HCDNUM4 AS VALUE
									 , RTRIM(HCONTENTS) AS HCONTENTS
									 , HCDNUM1
									 , HCDNUM2
									 , HCDNUM3
									 , HCDNUM4
									 , RTRIM(replace(replace(ECONTENTS,chr(10),''),chr(13),'')) AS ECONTENTS
								  FROM EMS_HSCODE
								 WHERE LENGTH(HCDNUM1 || HCDNUM2 || HCDNUM3 || HCDNUM4) = 10
								<isNotEmpty property="hs_cd" prepend="AND">
									HCDNUM1 LIKE #hs_cd#||'%'
								</isNotEmpty>
								<isNotEmpty property="search_text" prepend="AND">
									HCONTENTS LIKE #search_text#||'%'
								</isNotEmpty>
							)A
						) A
					) A
		<isNotEmpty property="firstIndex">
			WHERE RNUM BETWEEN  #firstIndex# AND #lastIndex#
		</isNotEmpty>
	</select>

	<select id="selectHsCdCount" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		SELECT COUNT(*) AS CNT
		  FROM EMS_HSCODE
		 WHERE LENGTH(HCDNUM1 || HCDNUM2 || HCDNUM3 || HCDNUM4) = 10
		<isNotEmpty property="hs_cd" prepend="AND">
			HCDNUM1 LIKE #hs_cd#||'%'
		</isNotEmpty>
	</select>

	<select id="selectGoodsCrtfcList"  parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT A.CRTFCT_ID
			 , A.CRTFCT_NM
			 , A.CRTFC_OR_NM
			 , TO_CHAR(B.CRTFCT_SEQ) AS CRTFCT_SEQ
			 , B.CRTFCT_NO
			 , B.VLD_TERM_STRT_YMD
			 , B.VLD_TERM_END_YMD
			 , IMAGE.FILE_STRE_PATH||IMAGE.STRE_FILE_NM AS IMAGE_PATH
	 	  FROM SC_GOODS_CRTFC_MAST A
			 , GD_MGT_GOODS_CRTFC B
			 , CM_FILE_MGT IMAGE
		WHERE A.CRTFCT_ID = B.CRTFCT_ID(+)
		  AND A.ATTCHFILE_ID = IMAGE.ATTCHFILE_ID(+)
		  AND B.USE_YN = 'Y'
		  AND B.GOODS_CD(+) = #goods_cd#
	</select>

	<select id="selectMgtGoodsBaseInfo"  parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
        SELECT A.GOODS_CD
			 , A.GOODS_STUS_CD
			 , A.GOODS_CHG_REASN_CD
			 , A.GOODS_CHG_REASN_CONT
			 , A.APPR_PROC_CD
			 , A.MD_APPR_REJCT_REASN
			 , A.MD_ID
			 , A.SELL_TYP_CD
			 , A.SUPP_COMP_ID
			 , A.GOODS_NM
			 , A.SRCH_GOODS_NM
			 , A.EXTN_GOODS_NM
			 , A.GOODS_DESC
			 , A.ERNC_GOODS_PRDLST_CD
			 , A.SUPPO_RGIST_POCD
			 , A.MATRL_NM_CNAMT
			 , A.FUNC_INFO
			 , A.NTR_INFO
			 , A.INTK_INFO
			 , A.SDEFCT_INFO
			 , A.ETC_INFO
			 , A.UNIT
			 , A.UNIT_WGHT
			 , A.UNIT_VOLM
			 , A.STD_DIV_CD
			 , A.STD_DIV_YN
			 , A.STD
			 , A.KIND_DIV_CD
			 , A.MAKR
			 , A.ORGPLCE_DIV_CD
			 , A.ORGPLCE_DTAIL_DIV_CD
			 , A.ORGPLCE_DTAIL_AREA_CHOICE_YN
			 , A.ORGPLCE_DTAIL_AREA_CD
			 , A.ORGPLCE
			 , A.PRDCTN_TIM
			 , A.KEEP_METH_ATPN
			 , A.PRDT_VLD_TERM
			 , A.PRDCTN_AREA_CD
			 , A.EVRFRND_CRTFC_TALLY
			 , A.POSTNET_CTGRY_CD
			 , A.HS_CD
			 , A.EDPS_CD
			 , A.PRC_COMPAR_EXPSR_YN
			 , A.IDTC_YN
			 , A.EXCHG_RETRNGD_PSSB_YN
			 , A.BUY_CNT_LIMIT_YN
			 , A.MAX_BUY_CNT_LIMIT_YN
			 , A.MIN_BUY_CNT
			 , A.MAX_BUY_CNT
			 , A.CRRGR_CARD_USE_YN
			 , A.SEND_MSG_TYP_CD
			 , A.GOODS_GUDE_DIV
			 , A.TRDACL_GOODS_YN
			 , A.TRDACL_CNT
			 , A.BUYER_AGELIMIT_CD
			 , A.COLAB_BUY_GOODS_YN
			 , A.BUND_SEND_USE_YN
			 , A.BUND_SEND_TYP_CD
			 , A.WICKET_GOODS_DC_YN
			 , A.WICKET_GOODS_DC_AMT
			 , A.FIX_RESRV_GOODS_YN
			 , A.EXTRA_GOODS_YN
			 , A.EVENT_DC_YN
			 , A.RGR_GOODS_YN
			 , A.SHORT_MGT_YN
			 , A.OVSEA_SEND_PSSB_YN
			 , A.OVERSEA_WGHT
			 , A.OVERSEA_VOLM
			 , A.SMART_SHPBOX_PSSB_YN
			 , A.GIFT_PSSB_YN
			 , A.GOODS_OPTN_APPLY_YN
			 , A.GOODS_PRSNT_APPLY_YN
			 , A.CNSMR_PRC
			 , A.STD_SELL_PRC
			 , A.PUCHAS_PRC
			 , A.DC_APPLY_PRC
			 , A.DC_APPLY_STRT_YMD
			 , A.DC_APPLY_END_YMD
			 , A.VAT_RATE
			 , A.GOODS_BASIC_FEE
			 , A.PO_FEE_RATE
			 , A.VAT_YN
			 , A.TAXT_DIV_CD
			 , A.NINTR_INSTLMT_YN
			 , A.NINTR_STRT_AMT
			 , A.NINTR_MNTH
			 , A.ACCML_PNT_APPLY_YN
			 , A.ACCML_PNT_DIV_CD
			 , A.ACCML_PNT_FIXAMT
			 , A.ACCML_PNT_FIXRATE
			 , A.BASIC_DC_SET_YN
			 , A.BASIC_DC_DIV_CD
			 , A.BASIC_DC_RATE
			 , A.BASIC_DC_AMT
			 , A.OKCASH_SUPP_YN
			 , A.OKCASH_SUPP_DIV_CD
			 , A.OKCASH_SUPP_RATE
			 , A.OKCASH_SUPP_AMT
			 , A.STRT_SUPP_YMD
			 , A.SUPP_BGIN_YMD
			 , A.SUPP_END_YMD
			 , A.SUPP_DSCNTC_STRT_YMD
			 , A.SUPP_DSCNTC_END_YMD
			 , A.SUPP_DSCNTC_STUS_CD
			 , A.SUPP_DSCNTC_REASN
			 , A.STOCK_VOLM
			 , A.TOT_ACCUM_STOCK_VOLM
			 , A.DD_SUPP_PSSB_VOLM
			 , A.SUPP_PSSB_CNT
			 , A.SAFE_STOCK_VOLM
			 , A.ADD_STOCK_VOLM
			 , A.STOCK_MGT_USE_YN
			 , A.STOCK_MGT_STRT_YMD
			 , A.STOCK_MGT_END_YMD
			 , A.SEND_PRC
			 , A.SEND_AREA_CD
			 , A.SEND_MSG
			 , A.SEND_TYP_CD
			 , A.SEND_PSSB_AREA
			 , A.TDAY_EXP_YN
			 , A.DOM_EXP_YN
			 , A.HDRYCO_CD
			 , A.OTHER_SEND_COMP_REASN
			 , A.PRCL_INMATL_CD
			 , A.SET_GOODS_YN
			 , A.SET_GOODS_CNT
			 , TO_CHAR(A.REG_DATE, 'YYYY-MM-DD HH24:MI') AS REG_DATE
			 , TO_CHAR(A.CHG_DATE, 'YYYY-MM-DD HH24:MI') AS CHG_DATE
			 , A.REGER_ID
			 , A.CHGER_ID
             , (SELECT BCNC_NM FROM CO_SUPP_COMP_MAST WHERE SUPP_COMP_ID = A.SUPP_COMP_ID) AS SUPP_COMP_NM
             , (SELECT AREA_NM FROM CM_AREA_CD WHERE AREA_CD = A.PRDCTN_AREA_CD) AS PRDCTN_AREA_NM
             , (SELECT CTGRY_NM FROM GD_CTGRY_MAST WHERE CTGRY_CD = A.POSTNET_CTGRY_CD) AS POSTNET_CTGRY_NM
             , PONM.PONM AS PONM
             , (SELECT ADMIN_NM FROM CM_ADMIN_MAST WHERE ADMIN_ID = A.MD_ID) AS MD_NM
             , (SELECT ADMIN_NM FROM CM_ADMIN_MAST WHERE ADMIN_ID = A.REGER_ID) AS REGER_NM
             , (SELECT ADMIN_NM FROM CM_ADMIN_MAST WHERE ADMIN_ID = A.CHGER_ID) AS CHGER_NM
          	 , (SELECT SB.PAVLN_DIV_CD
          	 	  FROM GD_MGT_GOODS_CTGRY SA, GD_CTGRY_PAVLN_MAPP SB
          	 	 WHERE SA.CTGRY_CD = SB.CTGRY_CD
          	 	   AND SA.PAVLN_DIV_CD = SB.PAVLN_DIV_CD
          	 	   AND SA.BASIC_CTGRY_YN = 'Y' AND USE_YN = 'Y' AND SA.GOODS_CD = A.GOODS_CD) PAVLN_DIV_CD
          FROM GD_MGT_GOODS_MAST A
          	 , (SELECT EDPSCD, PONM, REGIPOCD FROM PICMT0060 WHERE USEYN = 'Y' AND DSCDPOYN = 'N') PONM
         WHERE A.SUPPO_RGIST_POCD = PONM.REGIPOCD(+)
		   AND A.GOODS_CD = #goods_cd#
		   AND ROWNUM = 1 /* 이행 데이터 오류로 임시조치 */
	</select>

	<insert id="insertMgtGoodsBaseInfo" parameterClass="java.util.HashMap">
		INSERT INTO GD_MGT_GOODS_MAST
				   ( GOODS_CD
				   , GOODS_STUS_CD
				   , GOODS_CHG_REASN_CD
				   , GOODS_CHG_REASN_CONT
				   , APPR_PROC_CD
				   , MD_APPR_REJCT_REASN
				   , MD_ID
				   , SELL_TYP_CD
				   , SUPP_COMP_ID
				   , GOODS_NM
				   , SRCH_GOODS_NM
				   , EXTN_GOODS_NM
				   , GOODS_DESC
				   , ERNC_GOODS_PRDLST_CD
				   , SUPPO_RGIST_POCD
				   , MATRL_NM_CNAMT
				   , FUNC_INFO
				   , NTR_INFO
				   , INTK_INFO
				   , SDEFCT_INFO
				   , ETC_INFO
				   , UNIT
				   , UNIT_WGHT
				   , UNIT_VOLM
				   , STD_DIV_CD
				   , STD_DIV_YN
				   , STD
				   , KIND_DIV_CD
				   , MAKR
				   , ORGPLCE_DIV_CD
				   , ORGPLCE_DTAIL_DIV_CD
				   , ORGPLCE_DTAIL_AREA_CHOICE_YN
				   , ORGPLCE_DTAIL_AREA_CD
				   , ORGPLCE
				   , PRDCTN_TIM
				   , KEEP_METH_ATPN
				   , PRDT_VLD_TERM
				   , PRDCTN_AREA_CD
				   , EVRFRND_CRTFC_TALLY
				   , POSTNET_CTGRY_CD
				   , HS_CD
				   , EDPS_CD
				   , PRC_COMPAR_EXPSR_YN
				   , IDTC_YN
				   , EXCHG_RETRNGD_PSSB_YN
				<isNotEmpty property="buy_cnt_limit_yn">
				   , BUY_CNT_LIMIT_YN
				</isNotEmpty>
				<isNotEmpty property="max_buy_cnt_limit_yn">
				   , MAX_BUY_CNT_LIMIT_YN
				</isNotEmpty>
				<isNotEmpty property="min_buy_cnt">
				   , MIN_BUY_CNT
				</isNotEmpty>
				<isNotEmpty property="max_buy_cnt">
				   , MAX_BUY_CNT
				</isNotEmpty>
				   , CRRGR_CARD_USE_YN
				   , SEND_MSG_TYP_CD
				   , GOODS_GUDE_DIV
				<isNotEmpty property="trdacl_goods_yn">
				   , TRDACL_GOODS_YN
				</isNotEmpty>
				<isNotEmpty property="trdacl_cnt">
				   , TRDACL_CNT
				</isNotEmpty>
				   , BUYER_AGELIMIT_CD
				<isNotEmpty property="colab_buy_goods_yn">
				   , COLAB_BUY_GOODS_YN
				</isNotEmpty>
				   , BUND_SEND_USE_YN
				   , BUND_SEND_TYP_CD
				   , WICKET_GOODS_DC_YN
				   , WICKET_GOODS_DC_AMT
				<isNotEmpty property="fix_resrv_goods_yn">
				   , FIX_RESRV_GOODS_YN
				</isNotEmpty>
				<isNotEmpty property="extra_goods_yn">
				   , EXTRA_GOODS_YN
				</isNotEmpty>
				<isNotEmpty property="event_dc_yn">
				   , EVENT_DC_YN
				</isNotEmpty>
				<isNotEmpty property="rgr_goods_yn">
				   , RGR_GOODS_YN
				</isNotEmpty>
				<isNotEmpty property="short_mgt_yn">
				   , SHORT_MGT_YN
				</isNotEmpty>
				<isNotEmpty property="ovsea_send_pssb_yn">
				   , OVSEA_SEND_PSSB_YN
				</isNotEmpty>
				<isNotEmpty property="smart_shpbox_pssb_yn">
				   , SMART_SHPBOX_PSSB_YN
				</isNotEmpty>
				<isNotEmpty property="gift_pssb_yn">
				   , GIFT_PSSB_YN
				</isNotEmpty>
				<isNotEmpty property="goods_optn_apply_yn">
				   , GOODS_OPTN_APPLY_YN
				</isNotEmpty>
				<isNotEmpty property="goods_prsnt_apply_yn">
				   , GOODS_PRSNT_APPLY_YN
				</isNotEmpty>
				<isNotEmpty property="cnsmr_prc">
				   , CNSMR_PRC
				</isNotEmpty>
				<isNotEmpty property="std_sell_prc">
				   , STD_SELL_PRC
				</isNotEmpty>
				<isNotEmpty property="puchas_prc">
				   , PUCHAS_PRC
				</isNotEmpty>
				<isNotEmpty property="dc_apply_prc">
				   , DC_APPLY_PRC
				</isNotEmpty>
				<isNotEmpty property="dc_apply_strt_ymd">
				   , DC_APPLY_STRT_YMD
				</isNotEmpty>
				<isNotEmpty property="dc_apply_end_ymd">
				   , DC_APPLY_END_YMD
				</isNotEmpty>
				<isNotEmpty property="vat_rate">
				   , VAT_RATE
				</isNotEmpty>
				<isNotEmpty property="goods_basic_fee">
				   , GOODS_BASIC_FEE
				</isNotEmpty>
				<isNotEmpty property="po_fee_rate">
				   , PO_FEE_RATE
				</isNotEmpty>
				<isNotEmpty property="vat_yn">
				   , VAT_YN
				</isNotEmpty>
				   , TAXT_DIV_CD
				<isNotEmpty property="nintr_instlmt_yn">
				   , NINTR_INSTLMT_YN
				</isNotEmpty>
				<isNotEmpty property="nintr_strt_amt">
				   , NINTR_STRT_AMT
				</isNotEmpty>
				<isNotEmpty property="nintr_mnth">
				   , NINTR_MNTH
				</isNotEmpty>
				<isNotEmpty property="accml_pnt_apply_yn">
				   , ACCML_PNT_APPLY_YN
				</isNotEmpty>
				   , ACCML_PNT_DIV_CD
				<isNotEmpty property="accml_pnt_fixamt">
				   , ACCML_PNT_FIXAMT
				</isNotEmpty>
				<isNotEmpty property="accml_pnt_fixrate">
				   , ACCML_PNT_FIXRATE
				</isNotEmpty>
				<isNotEmpty property="basic_dc_set_yn">
				   , BASIC_DC_SET_YN
				</isNotEmpty>
				   , BASIC_DC_DIV_CD
				<isNotEmpty property="basic_dc_rate">
				   , BASIC_DC_RATE
				</isNotEmpty>
				<isNotEmpty property="basic_dc_amt">
				   , BASIC_DC_AMT
				</isNotEmpty>
				<isNotEmpty property="okcash_supp_yn">
				   , OKCASH_SUPP_YN
				</isNotEmpty>
				   , OKCASH_SUPP_DIV_CD
				<isNotEmpty property="okcash_supp_rate">
				   , OKCASH_SUPP_RATE
				</isNotEmpty>
				<isNotEmpty property="okcash_supp_amt">
				   , OKCASH_SUPP_AMT
				</isNotEmpty>
				   , STRT_SUPP_YMD
				   , SUPP_BGIN_YMD
				   , SUPP_END_YMD
				   , SUPP_DSCNTC_STRT_YMD
				   , SUPP_DSCNTC_END_YMD
				   , SUPP_DSCNTC_STUS_CD
				   , SUPP_DSCNTC_REASN
				<isNotEmpty property="stock_volm">
				   , STOCK_VOLM
				</isNotEmpty>
				<isNotEmpty property="tot_accum_stock_volm">
				   , TOT_ACCUM_STOCK_VOLM
				</isNotEmpty>
				<isNotEmpty property="dd_supp_pssb_volm">
				   , DD_SUPP_PSSB_VOLM
				</isNotEmpty>
				<isNotEmpty property="supp_pssb_cnt">
				   , SUPP_PSSB_CNT
				</isNotEmpty>
				<isNotEmpty property="safe_stock_volm">
				   , SAFE_STOCK_VOLM
				</isNotEmpty>
				<isNotEmpty property="add_stock_volm">
				   , ADD_STOCK_VOLM
				</isNotEmpty>
				<isNotEmpty property="stock_mgt_use_yn">
				   , STOCK_MGT_USE_YN
				</isNotEmpty>
				   , STOCK_MGT_STRT_YMD
				   , STOCK_MGT_END_YMD
				<isNotEmpty property="send_prc">
				   , SEND_PRC
				</isNotEmpty>
				   , SEND_AREA_CD
				   , SEND_MSG
				   , SEND_TYP_CD
				   , SEND_PSSB_AREA
				<isNotEmpty property="tday_exp_yn">
				   , TDAY_EXP_YN
				</isNotEmpty>
				<isNotEmpty property="dom_exp_yn">
				   , DOM_EXP_YN
				</isNotEmpty>
				   , HDRYCO_CD
				   , OTHER_SEND_COMP_REASN
				   , PRCL_INMATL_CD
				<isNotEmpty property="os_wght">
				   , OVERSEA_WGHT
			    </isNotEmpty>
				<isNotEmpty property="os_volm">
				   , OVERSEA_VOLM
				</isNotEmpty>
				   , SET_GOODS_YN
				   , SET_GOODS_CNT
				   , REG_DATE
				   , CHG_DATE
				<isNotEmpty property="login_usr_id">
				   , REGER_ID
				</isNotEmpty>
				<isNotEmpty property="login_usr_id">
				   , CHGER_ID
				</isNotEmpty>
				   )
			VALUES
				   ( #goods_cd#
				   , #goods_stus_cd#
				   , #goods_chg_reasn_cd#
				   , #goods_chg_reasn_cont#
				   , '01'
				   , #md_appr_rejct_reasn#
				   , #md_id#
				   , #sell_typ_cd#
				   , #supp_comp_id#
				   , #goods_nm#
				   , REPLACE(#goods_nm#, ' ')
				   , #extn_goods_nm#
				   , #goods_desc#
				   , #ernc_goods_prdlst_cd#
				   , #suppo_rgist_pocd#
				   , #matrl_nm_cnamt#
				   , #func_info#
				   , #ntr_info#
				   , #intk_info#
				   , #sdefct_info#
				   , #etc_info#
				   , #unit#
				   , #wght#
				   , #volm#
				   , #std_div_cd#
				   , #std_div_yn#
				   , #std#
				   , #kind_div_cd#
				   , #makr#
				   , #orgplce_div_cd#
				   , #orgplce_dtail_div_cd#
				   , #orgplce_dtail_area_choice_yn#
				   , #orgplce_dtail_area_cd#
				   , #orgplce#
				   , #prdctn_tim#
				   , #keep_meth_atpn#
				   , #prdt_vld_term#
				   , #prdctn_area_cd#
				   , #evrfrnd_crtfc_tally#
				   , #postnet_ctgry_cd#
				   , #hs_cd#
				   , #edps_cd#
				   , #prc_compar_expsr_yn#
				   , #idtc_yn#
				   , #exchg_retrngd_pssb_yn#
				<isNotEmpty property="buy_cnt_limit_yn">
				   , #buy_cnt_limit_yn#
				</isNotEmpty>
				<isNotEmpty property="max_buy_cnt_limit_yn">
				   , #max_buy_cnt_limit_yn#
				</isNotEmpty>
				<isNotEmpty property="min_buy_cnt">
				   , #min_buy_cnt#
				</isNotEmpty>
				<isNotEmpty property="max_buy_cnt">
				   , #max_buy_cnt#
				</isNotEmpty>
				   , #crrgr_card_use_yn#
				   , #send_msg_typ_cd#
				   , #goods_gude_div#
				<isNotEmpty property="trdacl_goods_yn">
				   , #trdacl_goods_yn#
				</isNotEmpty>
				<isNotEmpty property="trdacl_cnt">
				   , #trdacl_cnt#
				</isNotEmpty>
				   , #buyer_agelimit_cd#
				<isNotEmpty property="colab_buy_goods_yn">
				   , #colab_buy_goods_yn#
				</isNotEmpty>
				   , #bund_send_use_yn#
				   , #bund_send_typ_cd#
				   , #wicket_goods_dc_yn#
				   , #wicket_goods_dc_amt#
				<isNotEmpty property="fix_resrv_goods_yn">
				   , #fix_resrv_goods_yn#
				</isNotEmpty>
				<isNotEmpty property="extra_goods_yn">
				   , #extra_goods_yn#
				</isNotEmpty>
				<isNotEmpty property="event_dc_yn">
				   , #event_dc_yn#
				</isNotEmpty>
				<isNotEmpty property="rgr_goods_yn">
				   , #rgr_goods_yn#
				</isNotEmpty>
				<isNotEmpty property="short_mgt_yn">
				   , #short_mgt_yn#
				</isNotEmpty>
				<isNotEmpty property="ovsea_send_pssb_yn">
				   , #ovsea_send_pssb_yn#
				</isNotEmpty>
				<isNotEmpty property="smart_shpbox_pssb_yn">
				   , #smart_shpbox_pssb_yn#
				</isNotEmpty>
				<isNotEmpty property="gift_pssb_yn">
				   , #gift_pssb_yn#
				</isNotEmpty>
				<isNotEmpty property="goods_optn_apply_yn">
				   , #goods_optn_apply_yn#
				</isNotEmpty>
				<isNotEmpty property="goods_prsnt_apply_yn">
				   , #goods_prsnt_apply_yn#
				</isNotEmpty>
				<isNotEmpty property="cnsmr_prc">
				   , #cnsmr_prc#
				</isNotEmpty>
				<isNotEmpty property="std_sell_prc">
				   , #std_sell_prc#
				</isNotEmpty>
				<isNotEmpty property="puchas_prc">
				   , #puchas_prc#
				</isNotEmpty>
				<isNotEmpty property="dc_apply_prc">
				   , #dc_apply_prc#
				</isNotEmpty>
				<isNotEmpty property="dc_apply_strt_ymd">
				   , REPLACE(#dc_apply_strt_ymd#, '-')
				</isNotEmpty>
				<isNotEmpty property="dc_apply_end_ymd">
				   , REPLACE(#dc_apply_end_ymd#, '-')
				</isNotEmpty>
				<isNotEmpty property="vat_rate">
				   , #vat_rate#
				</isNotEmpty>
				<isNotEmpty property="goods_basic_fee">
				   , #goods_basic_fee#
				</isNotEmpty>
				<isNotEmpty property="po_fee_rate">
				   , #po_fee_rate#
				</isNotEmpty>
				<isNotEmpty property="vat_yn">
				   , #vat_yn#
				</isNotEmpty>
				   , #taxt_div_cd#
				<isNotEmpty property="nintr_instlmt_yn">
				   , #nintr_instlmt_yn#
				</isNotEmpty>
				<isNotEmpty property="nintr_strt_amt">
				   , #nintr_strt_amt#
				</isNotEmpty>
				<isNotEmpty property="nintr_mnth">
				   , #nintr_mnth#
				</isNotEmpty>
				<isNotEmpty property="accml_pnt_apply_yn">
				   , #accml_pnt_apply_yn#
				</isNotEmpty>
				   , #accml_pnt_div_cd#
				<isNotEmpty property="accml_pnt_fixamt">
				   , #accml_pnt_fixamt#
				</isNotEmpty>
				<isNotEmpty property="accml_pnt_fixrate">
				   , #accml_pnt_fixrate#
				</isNotEmpty>
				<isNotEmpty property="basic_dc_set_yn">
				   , basic_dc_set_yn
				</isNotEmpty>
				   , #basic_dc_div_cd#
				<isNotEmpty property="basic_dc_rate">
				   , #basic_dc_rate#
				</isNotEmpty>
				<isNotEmpty property="basic_dc_amt">
				   , #basic_dc_amt#
				</isNotEmpty>
				<isNotEmpty property="okcash_supp_yn">
				   , #okcash_supp_yn#
				</isNotEmpty>
				   , #okcash_supp_div_cd#
				<isNotEmpty property="okcash_supp_rate">
				   , #okcash_supp_rate#
				</isNotEmpty>
				<isNotEmpty property="okcash_supp_amt">
				   , #okcash_supp_amt#
				</isNotEmpty>
				   , REPLACE(#strt_supp_ymd#, '-')
				   , REPLACE(#supp_bgin_ymd#, '-')
				   , REPLACE(#supp_end_ymd#, '-')
				   , REPLACE(#supp_dscntc_strt_ymd#, '-')
				   , REPLACE(#supp_dscntc_end_ymd#, '-')
				   , #supp_dscntc_stus_cd#
				   , #supp_dscntc_reasn#
				<isNotEmpty property="stock_volm">
				   , #stock_volm#
				</isNotEmpty>
				<isNotEmpty property="tot_accum_stock_volm">
				   , #tot_accum_stock_volm#
				</isNotEmpty>
				<isNotEmpty property="dd_supp_pssb_volm">
				   , #dd_supp_pssb_volm#
				</isNotEmpty>
				<isNotEmpty property="supp_pssb_cnt">
				   , #supp_pssb_cnt#
				</isNotEmpty>
				<isNotEmpty property="safe_stock_volm">
				   , #safe_stock_volm#
				</isNotEmpty>
				<isNotEmpty property="add_stock_volm">
				   , #add_stock_volm#
				</isNotEmpty>
				<isNotEmpty property="stock_mgt_use_yn">
				   , #stock_mgt_use_yn#
				</isNotEmpty>
				   , #stock_mgt_strt_ymd#
				   , #stock_mgt_end_ymd#
				<isNotEmpty property="send_prc">
				   , #send_prc#
				</isNotEmpty>
				   , #send_area_cd#
				   , #send_msg#
				   , #send_typ_cd#
				   , #send_pssb_area#
				<isNotEmpty property="tday_exp_yn">
				   , #tday_exp_yn#
				</isNotEmpty>
				<isNotEmpty property="dom_exp_yn">
				   , #dom_exp_yn#
				</isNotEmpty>
				   , #hdryco_cd#
				   , #other_send_comp_reasn#
				   , #prcl_inmatl_cd#
				<isNotEmpty property="os_wght">
				   , #os_wght#
				</isNotEmpty>
				<isNotEmpty property="os_volm">
				   , #os_volm#
				</isNotEmpty>
				   , NVL(#set_goods_yn#, 'N')
				   , NVL(#set_goods_cnt#, 1)
				   , SYSDATE
				   , SYSDATE
			   <isNotEmpty property="login_usr_id">
				   , #login_usr_id#
			   </isNotEmpty>
			   <isNotEmpty property="login_usr_id">
				   , #login_usr_id#
			   </isNotEmpty>
				   )
	</insert>

	<update id="updateMgtGoodsBaseInfo" parameterClass="java.util.HashMap">
		UPDATE GD_MGT_GOODS_MAST
		   SET GOODS_STUS_CD			= #goods_stus_cd#
			 , GOODS_CHG_REASN_CD		= #goods_chg_reasn_cd#
			 , GOODS_CHG_REASN_CONT		= #goods_chg_reasn_cont#
			 , APPR_PROC_CD			 	= '01'
			 , SELL_TYP_CD			 	= #sell_typ_cd#
			 , SUPP_COMP_ID			 	= #supp_comp_id#
			 , GOODS_NM			 		= #goods_nm#
			 , SRCH_GOODS_NM			= REPLACE(#goods_nm#, ' ')
			 , EXTN_GOODS_NM			= #extn_goods_nm#
			 , GOODS_DESC			 	= #goods_desc#
			 , ERNC_GOODS_PRDLST_CD		= #ernc_goods_prdlst_cd#
			 , SUPPO_RGIST_POCD			= #suppo_rgist_pocd#
		<isNotEmpty property="matrl_nm_cnamt">
			 , MATRL_NM_CNAMT			 = #matrl_nm_cnamt#
		</isNotEmpty>
			 , FUNC_INFO				= #func_info#
			 , NTR_INFO			 		= #ntr_info#
			 , INTK_INFO			 	= #intk_info#
			 , SDEFCT_INFO			 	= #sdefct_info#
			 , ETC_INFO			 		= #etc_info#
		<isNotEmpty property="unit">
			 , UNIT			= #unit#
		</isNotEmpty>
		<isNotEmpty property="wght">
			 , UNIT_WGHT	= #wght#
		</isNotEmpty>
		<isNotEmpty property="volm">
			 , UNIT_VOLM	= #volm#
		</isNotEmpty>
			 , STD_DIV_CD			 	= #std_div_cd#
		<isNotEmpty property="std_div_yn">
			 , STD_DIV_YN			 	= #std_div_yn#
		</isNotEmpty>
			 , STD			 			= #std#
			 , KIND_DIV_CD			 	= #kind_div_cd#
			 , MAKR			 			= #makr#
			 , ORGPLCE_DIV_CD			= #orgplce_div_cd#
			 , ORGPLCE_DTAIL_DIV_CD		= #orgplce_dtail_div_cd#
		<isNotEmpty property="orgplce_dtail_area_choice_yn">
			 , ORGPLCE_DTAIL_AREA_CHOICE_YN	= #orgplce_dtail_area_choice_yn#
		</isNotEmpty>
			 , ORGPLCE_DTAIL_AREA_CD		= #orgplce_dtail_area_cd#
			 , ORGPLCE			 		= #orgplce#
			 , PRDCTN_TIM			 	= #prdctn_tim#
			 , KEEP_METH_ATPN			= #keep_meth_atpn#
			 , PRDT_VLD_TERM			= #prdt_vld_term#
			 , PRDCTN_AREA_CD			= #prdctn_area_cd#
			 , EVRFRND_CRTFC_TALLY		= #evrfrnd_crtfc_tally#
			 , POSTNET_CTGRY_CD			= #postnet_ctgry_cd#
			 , HS_CD			 		= #hs_cd#
			 , EDPS_CD			 		= #edps_cd#
		<isNotEmpty property="prc_compar_expsr_yn">
			 , PRC_COMPAR_EXPSR_YN = #prc_compar_expsr_yn#
		</isNotEmpty>
		<isNotEmpty property="exchg_retrngd_pssb_yn">
			 , EXCHG_RETRNGD_PSSB_YN = #exchg_retrngd_pssb_yn#
		</isNotEmpty>
		<isNotEmpty property="buy_cnt_limit_yn">
			 , BUY_CNT_LIMIT_YN = #buy_cnt_limit_yn#
		</isNotEmpty>
		<isNotEmpty property="max_buy_cnt_limit_yn">
			 , MAX_BUY_CNT_LIMIT_YN = #max_buy_cnt_limit_yn#
		</isNotEmpty>
		<isNotEmpty property="min_buy_cnt">
			 , MIN_BUY_CNT = #min_buy_cnt#
		</isNotEmpty>
		<isNotEmpty property="max_buy_cnt">
			 , MAX_BUY_CNT = #max_buy_cnt#
		</isNotEmpty>
		<isNotEmpty property="crrgr_card_use_yn">
			 , CRRGR_CARD_USE_YN = #crrgr_card_use_yn#
		</isNotEmpty>
		<isNotEmpty property="idtc_yn">
			 , IDTC_YN = #idtc_yn#
		</isNotEmpty>
			 , GOODS_GUDE_DIV			= #goods_gude_div#
		<isNotEmpty property="trdacl_goods_yn">
			 , TRDACL_GOODS_YN = #trdacl_goods_yn#
		</isNotEmpty>
		<isNotEmpty property="trdacl_cnt">
			 , TRDACL_CNT = #trdacl_cnt#
		</isNotEmpty>
			 , BUYER_AGELIMIT_CD		= #buyer_agelimit_cd#
		<isNotEmpty property="colab_buy_goods_yn">
			 , COLAB_BUY_GOODS_YN = #colab_buy_goods_yn#
		</isNotEmpty>
		<isNotEmpty property="bund_send_use_yn">
			 , BUND_SEND_USE_YN = #bund_send_use_yn#
		</isNotEmpty>
			 , BUND_SEND_TYP_CD			= #bund_send_typ_cd#
		<isNotEmpty property="wicket_goods_dc_yn">
			 , WICKET_GOODS_DC_YN = #wicket_goods_dc_yn#
		</isNotEmpty>
		<isNotEmpty property="wicket_goods_dc_amt">
			 , WICKET_GOODS_DC_AMT = #wicket_goods_dc_amt#
		</isNotEmpty>
		<isNotEmpty property="fix_resrv_goods_yn">
			 , FIX_RESRV_GOODS_YN = #fix_resrv_goods_yn#
		</isNotEmpty>
		<isNotEmpty property="extra_goods_yn">
			 , EXTRA_GOODS_YN = #extra_goods_yn#
		</isNotEmpty>
		<isNotEmpty property="event_dc_yn">
			 , EVENT_DC_YN = #event_dc_yn#
		</isNotEmpty>
		<isNotEmpty property="rgr_goods_yn">
			 , RGR_GOODS_YN = #rgr_goods_yn#
		</isNotEmpty>
		<isNotEmpty property="short_mgt_yn">
			 , SHORT_MGT_YN = #short_mgt_yn#
		</isNotEmpty>
		<isNotEmpty property="ovsea_send_pssb_yn">
			 , OVSEA_SEND_PSSB_YN = #ovsea_send_pssb_yn#
		</isNotEmpty>
		<isNotEmpty property="smart_shpbox_pssb_yn">
			 , SMART_SHPBOX_PSSB_YN = #smart_shpbox_pssb_yn#
		</isNotEmpty>
		<isNotEmpty property="gift_pssb_yn">
			 , GIFT_PSSB_YN = #gift_pssb_yn#
		</isNotEmpty>
		<isNotEmpty property="goods_optn_apply_yn">
			 , GOODS_OPTN_APPLY_YN = #goods_optn_apply_yn#
		</isNotEmpty>
		<isNotEmpty property="goods_prsnt_apply_yn">
			 , GOODS_PRSNT_APPLY_YN = #goods_prsnt_apply_yn#
		</isNotEmpty>
		<isNotEmpty property="cnsmr_prc">
			 , CNSMR_PRC = #cnsmr_prc#
		</isNotEmpty>
		<isNotEmpty property="std_sell_prc">
			 , STD_SELL_PRC = #std_sell_prc#
		</isNotEmpty>
		<isNotEmpty property="puchas_prc">
			 , PUCHAS_PRC = #puchas_prc#
		</isNotEmpty>
		<isNotEmpty property="dc_apply_prc">
			 , DC_APPLY_PRC = #dc_apply_prc#
		</isNotEmpty>
		<isNotEmpty property="dc_apply_strt_ymd">
			, DC_APPLY_STRT_YMD = REPLACE(#dc_apply_strt_ymd#, '-')
		</isNotEmpty>
		<isNotEmpty property="dc_apply_end_ymd">
			, DC_APPLY_END_YMD = REPLACE(#dc_apply_end_ymd#, '-')
		</isNotEmpty>
		<isEmpty property="dc_apply_strt_ymd">
			, DC_APPLY_STRT_YMD = ''
		</isEmpty>
		<isEmpty property="dc_apply_end_ymd">
			, DC_APPLY_END_YMD = ''
		</isEmpty>
		<isNotEmpty property="vat_rate">
			 , VAT_RATE = #vat_rate#
		</isNotEmpty>
		<isNotEmpty property="goods_basic_fee">
			 , GOODS_BASIC_FEE = #goods_basic_fee#
		</isNotEmpty>
		<isNotEmpty property="po_fee_rate">
			 , PO_FEE_RATE = #po_fee_rate#
		</isNotEmpty>
		<isNotEmpty property="vat_yn">
			 , VAT_YN = #vat_yn#
		</isNotEmpty>
			 , TAXT_DIV_CD				= #taxt_div_cd#
		<isNotEmpty property="nintr_instlmt_yn">
			 , NINTR_INSTLMT_YN = #nintr_instlmt_yn#
		</isNotEmpty>
		<isNotEmpty property="nintr_strt_amt">
			 , NINTR_STRT_AMT = #nintr_strt_amt#
		</isNotEmpty>
		<isNotEmpty property="nintr_mnth">
			 , NINTR_MNTH = #nintr_mnth#
		</isNotEmpty>
		<isNotEmpty property="accml_pnt_apply_yn">
			 , ACCML_PNT_APPLY_YN = #accml_pnt_apply_yn#
		</isNotEmpty>
			 , ACCML_PNT_DIV_CD			= #accml_pnt_div_cd#
		<isNotEmpty property="accml_pnt_fixamt">
			 , ACCML_PNT_FIXAMT = #accml_pnt_fixamt#
		</isNotEmpty>
		<isNotEmpty property="accml_pnt_fixrate">
			 , ACCML_PNT_FIXRATE = #accml_pnt_fixrate#
		</isNotEmpty>
		<isNotEmpty property="basic_dc_set_yn">
			 , BASIC_DC_SET_YN = #basic_dc_set_yn#
		</isNotEmpty>
		<isNotEmpty property="basic_dc_rate">
			 , BASIC_DC_RATE = #basic_dc_rate#
		</isNotEmpty>
		<isNotEmpty property="basic_dc_amt">
			 , BASIC_DC_AMT = #basic_dc_amt#
		</isNotEmpty>
			 , BASIC_DC_DIV_CD			= #basic_dc_div_cd#
		<isNotEmpty property="okcash_supp_yn">
			 , OKCASH_SUPP_YN = #okcash_supp_yn#
		</isNotEmpty>
			 , OKCASH_SUPP_DIV_CD		= #okcash_supp_div_cd#
		<isNotEmpty property="okcash_supp_rate">
			 , OKCASH_SUPP_RATE = #okcash_supp_rate#
		</isNotEmpty>
		<isNotEmpty property="okcash_supp_amt">
			 , OKCASH_SUPP_AMT = #okcash_supp_amt#
		</isNotEmpty>
			 , STRT_SUPP_YMD			= REPLACE(#strt_supp_ymd#, '-')
			 , SUPP_BGIN_YMD			= REPLACE(#supp_bgin_ymd#, '-')
			 , SUPP_END_YMD			 	= REPLACE(#supp_end_ymd#, '-')
			 , SUPP_DSCNTC_STRT_YMD		= REPLACE(#supp_dscntc_strt_ymd#, '-')
			 , SUPP_DSCNTC_END_YMD		= REPLACE(#supp_dscntc_end_ymd#, '-')
			 , SUPP_DSCNTC_STUS_CD		= #supp_dscntc_stus_cd#
			 , SUPP_DSCNTC_REASN		= #supp_dscntc_reasn#
		<isNotEmpty property="stock_volm">
			 , STOCK_VOLM = #stock_volm#
		</isNotEmpty>
		<isNotEmpty property="tot_accum_stock_volm">
			 , TOT_ACCUM_STOCK_VOLM = #tot_accum_stock_volm#
		</isNotEmpty>
		<isNotEmpty property="dd_supp_pssb_volm">
			 , DD_SUPP_PSSB_VOLM = #dd_supp_pssb_volm#
		</isNotEmpty>
		<isNotEmpty property="supp_pssb_cnt">
			 , SUPP_PSSB_CNT = #supp_pssb_cnt#
		</isNotEmpty>
		<isNotEmpty property="safe_stock_volm">
			 , SAFE_STOCK_VOLM = #safe_stock_volm#
		</isNotEmpty>
		<isNotEmpty property="add_stock_volm">
			 , ADD_STOCK_VOLM = #add_stock_volm#
		</isNotEmpty>
		<isNotEmpty property="stock_mgt_use_yn">
			 , STOCK_MGT_USE_YN = #stock_mgt_use_yn#
		</isNotEmpty>
			 , STOCK_MGT_STRT_YMD		= #stock_mgt_strt_ymd#
			 , STOCK_MGT_END_YMD		= #stock_mgt_end_ymd#
		<isNotEmpty property="send_prc">
			 , SEND_PRC = #send_prc#
		</isNotEmpty>
			 , SEND_AREA_CD				= #send_area_cd#
			 , SEND_MSG			 		= #send_msg#
			 , SEND_TYP_CD			 	= #send_typ_cd#
			 , SEND_PSSB_AREA			= #send_pssb_area#
		<isNotEmpty property="tday_exp_yn">
			 , TDAY_EXP_YN = #tday_exp_yn#
		</isNotEmpty>
		<isNotEmpty property="dom_exp_yn">
			 , DOM_EXP_YN = #dom_exp_yn#
		</isNotEmpty>
			 , HDRYCO_CD			 	= #hdryco_cd#
			 , OTHER_SEND_COMP_REASN	= #other_send_comp_reasn#
			 , PRCL_INMATL_CD			= #prcl_inmatl_cd#
		<isNotEmpty property="os_wght">
			 , OVERSEA_WGHT				= #os_wght#
		</isNotEmpty>
		<isNotEmpty property="os_volm">
			 , OVERSEA_VOLM				= #os_volm#
		</isNotEmpty>
			 , SET_GOODS_YN				= NVL(#set_goods_yn#, 'N')
			 , SET_GOODS_CNT			= NVL(#set_goods_cnt#, 1)
			 , CHG_DATE					= SYSDATE
		<isNotEmpty property="login_usr_id">
			 , CHGER_ID = #login_usr_id#
		</isNotEmpty>
			 , MD_APPR_REJCT_REASN		= NULL
			 , MD_ID					= #md_id#
		 WHERE GOODS_CD = #goods_cd#
	</update>

	<insert id="insertMgtGoodsCtgryInfo" parameterClass="java.util.HashMap">
		MERGE INTO GD_MGT_GOODS_CTGRY
			 USING DUAL
				ON (CTGRY_CD = #ctgry_cd# AND GOODS_CD = #goods_cd# AND PAVLN_DIV_CD = #pavln_div_cd#)
		WHEN MATCHED THEN
			UPDATE SET
				   USE_YN		  = 'Y'
				 , BASIC_CTGRY_YN = #basic_ctgry_yn#
		         , CHG_DATE		  = SYSDATE
			<isNotEmpty property="login_usr_id">
		         , CHGER_ID		  = #login_usr_id#
			</isNotEmpty>
		WHEN NOT MATCHED THEN
			INSERT
		         ( CTGRY_CD
		         , PAVLN_DIV_CD
		         , GOODS_CD
		         , BASIC_CTGRY_YN
		         , USE_YN
		         , REG_DATE
		         , CHG_DATE
			<isNotEmpty property="login_usr_id">
				 , REGER_ID
		         , CHGER_ID
			</isNotEmpty>
		         )
		  VALUES ( #ctgry_cd#
		  		 , #pavln_div_cd#
                 , #goods_cd#
                 , #basic_ctgry_yn#
                 , 'Y'
                 , SYSDATE
                 , SYSDATE
			<isNotEmpty property="login_usr_id">
				 , #login_usr_id#
		         , #login_usr_id#
			</isNotEmpty>
                 )
	</insert>
	
	<insert id="insertGoodsCtgryInfo" parameterClass="java.util.HashMap">
		MERGE INTO GD_GOODS_CTGRY
			 USING DUAL
				ON (CTGRY_CD = #ctgry_cd# AND GOODS_CD = #goods_cd# AND PAVLN_DIV_CD = #pavln_div_cd#)
		WHEN MATCHED THEN
			UPDATE SET
				   USE_YN		  = 'Y'
				 , BASIC_CTGRY_YN = #basic_ctgry_yn#
		         , CHG_DATE		  = SYSDATE
			<isNotEmpty property="login_usr_id">
		         , CHGER_ID		  = #login_usr_id#
			</isNotEmpty>
		WHEN NOT MATCHED THEN
			INSERT
		         ( CTGRY_CD
		         , PAVLN_DIV_CD
		         , GOODS_CD
		         , BASIC_CTGRY_YN
		         , USE_YN
		         , REG_DATE
		         , CHG_DATE
			<isNotEmpty property="login_usr_id">
				 , REGER_ID
		         , CHGER_ID
			</isNotEmpty>
		         )
		  VALUES ( #ctgry_cd#
		  		 , #pavln_div_cd#
                 , #goods_cd#
                 , #basic_ctgry_yn#
                 , 'Y'
                 , SYSDATE
                 , SYSDATE
			<isNotEmpty property="login_usr_id">
				 , #login_usr_id#
		         , #login_usr_id#
			</isNotEmpty>
                 )
	</insert>

	<update id="updateMgtGoodsCtgryInfo" parameterClass="java.util.HashMap">
		UPDATE GD_MGT_GOODS_CTGRY
		   SET USE_YN = 'N'
		     , BASIC_CTGRY_YN = 'N'
		 WHERE GOODS_CD = #goods_cd#
	</update>
	<update id="updateGoodsCtgryInfo" parameterClass="java.util.HashMap">
		UPDATE GD_GOODS_CTGRY
		   SET USE_YN = 'N'
		     , BASIC_CTGRY_YN = 'N'
		 WHERE GOODS_CD = #goods_cd#
	</update>

	<delete id="deleteMgtGoodsFtcPrdlstInfo" parameterClass="java.util.HashMap">
		DELETE FROM GD_MGT_FTC_PRDLST
		 WHERE GOODS_CD = #goods_cd#
	</delete>

	<insert id="insertMgtGoodsFtcPrdlstInfo" parameterClass="java.util.HashMap">
		MERGE INTO GD_MGT_FTC_PRDLST
			 USING DUAL
				ON (GOODS_CD = #goods_cd# AND FTC_PRDLST_GRP_CD = #ftc_prdlst_grp_cd# AND FTC_PRDLST_STD_CD = #ftc_prdlst_std_cd#)
		WHEN MATCHED THEN
			UPDATE SET
				   GOODS_ITEM_CONT	 = #goods_item_cont#
				 , GOODS_ITEM_DESC	 = #goods_item_desc#
				 , INPUT_METH_SUB_CD = #input_meth_sub_cd#
				 , CHG_DATE			 = SYSDATE
			<isNotEmpty property="login_usr_id">
		         , CHGER_ID		  = #login_usr_id#
			</isNotEmpty>
		WHEN NOT MATCHED THEN
		INSERT
				 ( GOODS_CD
				 , FTC_PRDLST_GRP_CD
				 , FTC_PRDLST_STD_CD
				 , GOODS_ITEM_CONT
				 , GOODS_ITEM_DESC
				 , INPUT_METH_SUB_CD
				 , REG_DATE
				 , CHG_DATE
			<isNotEmpty property="login_usr_id">
				 , REGER_ID
		         , CHGER_ID
			</isNotEmpty>
				 )
		  VALUES ( #goods_cd#
				 , #ftc_prdlst_grp_cd#
				 , #ftc_prdlst_std_cd#
				 , #goods_item_cont#
				 , #goods_item_desc#
				 , #input_meth_sub_cd#
				 , SYSDATE
				 , SYSDATE
			<isNotEmpty property="login_usr_id">
				 , #login_usr_id#
		         , #login_usr_id#
			</isNotEmpty>
				 )
	</insert>

	<update id="updateCrtfcGoodsInfo" parameterClass="java.util.HashMap">
		UPDATE GD_MGT_GOODS_CRTFC
		   SET CRTFCT_NO = #crtfct_no#
		 	 , VLD_TERM_STRT_YMD = REPLACE(#vld_term_strt_ymd#, '-')
			 , VLD_TERM_END_YMD = REPLACE(#vld_term_end_ymd#, '-')
			<isNotEmpty property="crtfct_file_nm" prepend=",">
			 	CRTFCT_FILE_NM = #crtfct_file_nm#
			</isNotEmpty>
		 WHERE GOODS_CD = #goods_cd#
		   AND CRTFCT_ID = #crtfct_id#
		   AND CRTFCT_SEQ = #crtfct_seq#
	</update>

	<delete id="deleteCrtfcGoodsInfo" parameterClass="java.util.HashMap">
		DELETE FROM GD_MGT_GOODS_CRTFC
		 WHERE GOODS_CD = #goods_cd#
		   AND CRTFCT_ID = #crtfct_id#
		   AND CRTFCT_SEQ = #crtfct_seq#
	</delete>	
	<update id="updateMgtGoodsCrtfcInfo" parameterClass="java.util.HashMap">
		UPDATE GD_MGT_GOODS_CRTFC
		   SET USE_YN = 'N'
		     , CHG_DATE = SYSDATE
		<isNotEmpty property="login_usr_id">
	         , CHGER_ID = #login_usr_id#
		</isNotEmpty>
		 WHERE GOODS_CD = #goods_cd#
		   AND USE_YN = 'Y'
	</update>

	<insert id="insertMgtGoodsCrtfcInfo" parameterClass="java.util.HashMap">
		MERGE INTO GD_MGT_GOODS_CRTFC
			 USING DUAL
				ON (CRTFCT_ID = #crtfct_id# AND CRTFCT_SEQ = #crtfct_seq# AND GOODS_CD = #goods_cd# )
		WHEN MATCHED THEN
			UPDATE SET
				   USE_YN		= 'Y'
				 , CRTFCT_NO	= #crtfct_no#
				 , VLD_TERM_STRT_YMD = REPLACE(#vld_term_strt_ymd#, '-')
				 , VLD_TERM_END_YMD	= REPLACE(#vld_term_end_ymd#, '-')
		         , CHG_DATE		= SYSDATE
			<isNotEmpty property="login_usr_id">
		         , CHGER_ID		  = #login_usr_id#
			</isNotEmpty>
		WHEN NOT MATCHED THEN
			INSERT
				 ( GOODS_CD
				 , CRTFCT_ID
				 , CRTFCT_SEQ
				 , CRTFCT_NO
				 , VLD_TERM_STRT_YMD
				 , VLD_TERM_END_YMD
				 , USE_YN
				 , REG_DATE
				 , CHG_DATE
			<isNotEmpty property="login_usr_id">
				 , REGER_ID
		         , CHGER_ID
			</isNotEmpty>
				 )
		  VALUES ( #goods_cd#
				 , #crtfct_id#
				 , (SELECT NVL(MAX(TO_NUMBER(CRTFCT_SEQ))+1, 1) FROM GD_MGT_GOODS_CRTFC WHERE GOODS_CD = #goods_cd# AND CRTFCT_ID = #crtfct_id#)
				 , #crtfct_no#
				 , REPLACE(#vld_term_strt_ymd#, '-')
				 , REPLACE(#vld_term_end_ymd#, '-')
				 , 'Y'
				 , SYSDATE
				 , SYSDATE
			<isNotEmpty property="login_usr_id">
				 , #login_usr_id#
		         , #login_usr_id#
			</isNotEmpty>
				 )
	</insert>

	<update id="updateMgtGoodsOptnGrpInfo" parameterClass="java.util.HashMap">
		UPDATE GD_MGT_GOODS_OPTN_GRP
		   SET USE_YN = 'N'
		     , CHG_DATE = SYSDATE
		<isNotEmpty property="login_usr_id">
			 , CHGER_ID = #login_usr_id#
		</isNotEmpty>
		 WHERE GOODS_CD = #goods_cd#
		   AND USE_YN = 'Y'
	</update>

	<update id="updateMgtGoodsOptnDtailInfo" parameterClass="java.util.HashMap">
		UPDATE GD_MGT_GOODS_OPTN_DTAIL
		   SET USE_YN = 'N'
		     , CHG_DATE = SYSDATE
		<isNotEmpty property="login_usr_id">
			 , CHGER_ID = #login_usr_id#
		</isNotEmpty>
		 WHERE GOODS_CD = #goods_cd#
		   AND USE_YN = 'Y'
	</update>

	<insert id="insertMgtGoodsOptnGrpInfo" parameterClass="java.util.HashMap">
		MERGE INTO GD_MGT_GOODS_OPTN_GRP
			 USING DUAL
				ON (GOODS_CD = #goods_cd# AND GOODS_OPTN_GRP_SEQ = #goods_optn_grp_seq#)
		WHEN MATCHED THEN
			UPDATE SET
				   GOODS_OPTN_GRP_NM = #goods_optn_grp_nm#
				 , ESSN_CHOICE_YN	 = #essn_choice_yn#
				 , HRNK_OPTN_GRP_SEQ = #hrnk_optn_grp_seq#
				 , USE_YN			 = 'Y'
				 , CHG_DATE			 = SYSDATE
			<isNotEmpty property="login_usr_id">
				 , CHGER_ID			 = #login_usr_id#
			</isNotEmpty>
	 	WHEN NOT MATCHED THEN
			INSERT
				 ( GOODS_CD
				 , GOODS_OPTN_GRP_SEQ
				 , GOODS_OPTN_GRP_NM
				 , ESSN_CHOICE_YN
				 , HRNK_OPTN_GRP_SEQ
				 , USE_YN
				 , REG_DATE
				 , CHG_DATE
			<isNotEmpty property="login_usr_id">
				 , REGER_ID
				 , CHGER_ID
			</isNotEmpty>
				 )
		  VALUES ( #goods_cd#
				 , #goods_optn_grp_seq#
				 , #goods_optn_grp_nm#
				 , #essn_choice_yn#
				 , #hrnk_optn_grp_seq#
				 , 'Y'
				 , SYSDATE
				 , SYSDATE
			<isNotEmpty property="login_usr_id">
				 , #login_usr_id#
				 , #login_usr_id#
			</isNotEmpty>
				 )
	</insert>

	<insert id="insertMgtGoodsOptnDtailInfo" parameterClass="java.util.HashMap">
		MERGE INTO GD_MGT_GOODS_OPTN_DTAIL
			 USING DUAL
				ON (GOODS_CD = #goods_cd# AND GOODS_OPTN_GRP_SEQ = #goods_optn_grp_seq# AND GOODS_OPTN_SEQ = #goods_optn_seq#)
		WHEN MATCHED THEN
			UPDATE SET
				   GOODS_OPTN_NM 		= #goods_optn_nm#
				 , OPTN_GOODS_APPLY_PRC = #optn_goods_apply_prc#
				 , STOCK_VOLM			= NVL(#stock_volm#, 0)
				 , HRNK_GOODS_OPTN_SEQ	= #hrnk_goods_optn_seq#
				 , RGB_COLOR			= #rgb_color#
				 , USE_YN				= 'Y'
				 , SORT_ORDER			= #sort_order#
				 , CHG_DATE			 	= SYSDATE
			<isNotEmpty property="login_usr_id">
				 , CHGER_ID			 	= #login_usr_id#
			</isNotEmpty>
		WHEN NOT MATCHED THEN
			INSERT
				 ( GOODS_CD
				 , GOODS_OPTN_GRP_SEQ
				 , GOODS_OPTN_SEQ
				 , GOODS_OPTN_NM
			<isNotEmpty property="optn_goods_apply_prc">
				 , OPTN_GOODS_APPLY_PRC
			</isNotEmpty>
			<isNotEmpty property="stock_volm">
				 , STOCK_VOLM
			</isNotEmpty>
				 , HRNK_GOODS_OPTN_SEQ
				 , RGB_COLOR
				 , USE_YN
				 , SORT_ORDER
				 , REG_DATE
				 , CHG_DATE
			<isNotEmpty property="login_usr_id">
				 , REGER_ID
				 , CHGER_ID
			</isNotEmpty>
				 )
		  VALUES ( #goods_cd#
				 , #goods_optn_grp_seq#
				 , #goods_optn_seq#
				 , #goods_optn_nm#
			<isNotEmpty property="optn_goods_apply_prc">
				 , #optn_goods_apply_prc#
			</isNotEmpty>
			<isNotEmpty property="stock_volm">
				 , #stock_volm#
			</isNotEmpty>
				 , #hrnk_goods_optn_seq#
				 , #rgb_color#
				 , 'Y'
				 , #sort_order#
				 , SYSDATE
				 , SYSDATE
			<isNotEmpty property="login_usr_id">
				 , #login_usr_id#
				 , #login_usr_id#
			</isNotEmpty>
				 )
	</insert>

	<select id="selectMgtGoodsCtgryInfo" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT A.GOODS_CD
			 , A.CTGRY_CD
			 , F_GET_COMN_CD_NM('PAVLN_DIV_CD', A.PAVLN_DIV_CD)||B.CTGRY_NM AS CTGRY_NM
			 , B.PAVLN_DIV_CD
			 , A.BASIC_CTGRY_YN
		  FROM GD_MGT_GOODS_CTGRY A
		  	 , (SELECT A.CTGRY_CD
		  	 		 , A.PAVLN_DIV_CD
		  	 		 , SYS_CONNECT_BY_PATH(B.CTGRY_NM, '▶') AS CTGRY_NM
		  	 	  FROM GD_CTGRY_PAVLN_MAPP A, GD_CTGRY_MAST B
				 WHERE A.CTGRY_CD = B.CTGRY_CD
				 START WITH B.HRNK_CTGRY_CD IS NULL
			   CONNECT BY PRIOR B.CTGRY_CD = B.HRNK_CTGRY_CD) B
		 WHERE A.CTGRY_CD = B.CTGRY_CD
		   AND A.PAVLN_DIV_CD = B.PAVLN_DIV_CD
		   AND A.USE_YN = 'Y'
		   AND A.GOODS_CD = #goods_cd#
         GROUP BY A.GOODS_CD, A.CTGRY_CD, F_GET_COMN_CD_NM('PAVLN_DIV_CD', A.PAVLN_DIV_CD) || B.CTGRY_NM, B.PAVLN_DIV_CD, A.BASIC_CTGRY_YN
	</select>

	<select id="selectMgtGoodsSearchInfo" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT MAX(SUBSTR(SYS_CONNECT_BY_PATH(SEARCH_NAME, ','),2)) AS SEARCH_NAME
		  FROM ( SELECT ROWNUM RNUM
		  			  , GOODS_CD
					  , REPLACE(SEARCH_NAME, ',') AS SEARCH_NAME
					  , SEARCH_TYPE
					  , DISP_STRT_DT
					  , DISP_END_DT
					  , DISP_YN
				   FROM GD_GOODS_SEARCH
				  WHERE GOODS_CD = #goods_cd#)
		 START WITH RNUM = 1
	   CONNECT BY PRIOR RNUM = RNUM -1
	</select>

	<select id="selectMgtGoodsOptnGrpInfo" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT DISTINCT A.GOODS_OPTN_GRP_SEQ
		        , A.GOODS_OPTN_GRP_NM
		        , A.HRNK_OPTN_GRP_SEQ
		        , C.GOODS_OPTN_GRP_NM AS HRNK_OPTN_GRP_NM
		        , A.ESSN_CHOICE_YN
		        , A.USE_YN
		        , B.SUB_CNT
		     FROM GD_MGT_GOODS_OPTN_GRP A
		         ,(SELECT GOODS_CD, GOODS_OPTN_GRP_SEQ, COUNT(*) AS SUB_CNT
		             FROM GD_MGT_GOODS_OPTN_DTAIL
			        WHERE USE_YN = 'Y'
			        GROUP BY GOODS_CD, GOODS_OPTN_GRP_SEQ) B
				 ,(SELECT GOODS_CD, GOODS_OPTN_GRP_SEQ, GOODS_OPTN_GRP_NM
					 FROM GD_MGT_GOODS_OPTN_GRP WHERE USE_YN = 'Y' AND HRNK_OPTN_GRP_SEQ IS NULL) C
		    WHERE A.GOODS_CD = B.GOODS_CD(+)
		      AND A.GOODS_CD = C.GOODS_CD(+)
		      AND A.GOODS_OPTN_GRP_SEQ = B.GOODS_OPTN_GRP_SEQ(+)
		      AND A.HRNK_OPTN_GRP_SEQ = C.GOODS_OPTN_GRP_SEQ(+)
		      AND A.GOODS_CD = #goods_cd#
		      AND A.USE_YN = 'Y'
		    ORDER BY A.GOODS_OPTN_GRP_SEQ
	</select>

	<select id="selectMgtGoodsOptnDtailInfo" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
        SELECT A.GOODS_CD
             , A.GOODS_OPTN_GRP_SEQ
             , B.GOODS_OPTN_SEQ
             , B.GOODS_OPTN_NM
             , B.OPTN_GOODS_APPLY_PRC
             , B.USE_YN
             , B.STOCK_VOLM
             , B.RGB_COLOR
             , B.HRNK_GOODS_OPTN_SEQ
             , B.GOODS_OPTN_GRP_SEQ||'-'||B.GOODS_OPTN_SEQ AS SEQ_KEY
             , NVL(C.SUB_CNT, 0) AS SUB_CNT
          FROM GD_MGT_GOODS_OPTN_GRP A
             , GD_MGT_GOODS_OPTN_DTAIL B
             , ( SELECT GOODS_CD, GOODS_OPTN_GRP_SEQ, HRNK_GOODS_OPTN_SEQ, COUNT(*) AS SUB_CNT
				   FROM GD_MGT_GOODS_OPTN_DTAIL
				  WHERE GOODS_CD = #goods_cd#
					AND HRNK_GOODS_OPTN_SEQ IS NOT NULL
					AND USE_YN = 'Y'
				  GROUP BY GOODS_CD, GOODS_OPTN_GRP_SEQ, HRNK_GOODS_OPTN_SEQ ) C
         WHERE A.GOODS_CD = B.GOODS_CD
           AND A.GOODS_OPTN_GRP_SEQ = B.GOODS_OPTN_GRP_SEQ
           AND B.GOODS_CD = C.GOODS_CD(+)
           AND B.GOODS_OPTN_GRP_SEQ = C.GOODS_OPTN_GRP_SEQ(+)
           AND B.GOODS_OPTN_SEQ = C.HRNK_GOODS_OPTN_SEQ(+)
           AND A.GOODS_CD = #goods_cd#
           AND A.USE_YN = 'Y'
           AND B.USE_YN = 'Y'
           AND B.HRNK_GOODS_OPTN_SEQ IS NULL
         ORDER BY A.GOODS_OPTN_GRP_SEQ, B.SORT_ORDER
	</select>

	<select id="selectMgtGoodsSubOptnDtailInfo" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
        SELECT A.GOODS_CD
             , A.GOODS_OPTN_GRP_SEQ
             , B.GOODS_OPTN_SEQ
             , B.GOODS_OPTN_NM
             , B.OPTN_GOODS_APPLY_PRC
             , B.USE_YN
             , B.STOCK_VOLM
             , B.RGB_COLOR
             , B.HRNK_GOODS_OPTN_SEQ
             , B.GOODS_OPTN_GRP_SEQ||'-'||B.HRNK_GOODS_OPTN_SEQ AS SEQ_KEY
          FROM GD_MGT_GOODS_OPTN_GRP A
             , GD_MGT_GOODS_OPTN_DTAIL B
         WHERE A.GOODS_CD = B.GOODS_CD
           AND A.GOODS_OPTN_GRP_SEQ = B.GOODS_OPTN_GRP_SEQ
           AND A.GOODS_CD = #goods_cd#
           AND A.USE_YN = 'Y'
           AND B.USE_YN = 'Y'
           AND B.HRNK_GOODS_OPTN_SEQ IS NOT NULL
         ORDER BY A.GOODS_OPTN_GRP_SEQ, B.SORT_ORDER
	</select>

	<select id="selectGoodsLangInfoList" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT A.GOODS_CD				/*상품 코드*/
			 , LANG_CD.COMN_CD_ID AS LANG_CD	/*언어 코드*/
			 , LANG_CD.COMN_CD_NM AS LANG_NM /*언어 명*/
		  FROM GD_MGT_GOODS_MLANG_SPRT A
		  	 , ( SELECT COMN_CD_ID, COMN_CD_NM FROM CM_COMN_CD WHERE CD_GRP_ID = 'LANG_CD' ) LANG_CD
		 WHERE A.LANG_CD(+) = LANG_CD.COMN_CD_ID
		   AND A.GOODS_CD(+) = #goods_cd#
		 ORDER BY LANG_CD.COMN_CD_ID
	</select>

	<select id="selectMgtGoodsLangsDetail" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT A.GOODS_CD
			 , US.GOODS_NM AS GOODS_NM_US
			 , US.GOODS_DESC AS GOODS_DESC_US
			 , US.STD AS STD_US
			 , JP.GOODS_NM AS GOODS_NM_JP
			 , JP.GOODS_DESC AS GOODS_DESC_JP
			 , JP.STD AS STD_JP
			 , CN.GOODS_NM AS GOODS_NM_CN
			 , CN.GOODS_DESC AS GOODS_DESC_CN
			 , CN.STD AS STD_CN
		  FROM GD_MGT_GOODS_MAST A
		  	 , (SELECT *  FROM GD_MGT_GOODS_MLANG_SPRT WHERE GOODS_CD = #goods_cd# AND LANG_CD = 'US') US
		  	 , (SELECT *  FROM GD_MGT_GOODS_MLANG_SPRT WHERE GOODS_CD = #goods_cd# AND LANG_CD = 'JP' ) JP
		  	 , (SELECT *  FROM GD_MGT_GOODS_MLANG_SPRT WHERE GOODS_CD = #goods_cd# AND LANG_CD = 'CN' ) CN
		 WHERE A.GOODS_CD = #goods_cd#
		   AND A.GOODS_CD = US.GOODS_CD(+)
		   AND A.GOODS_CD = JP.GOODS_CD(+)
		   AND A.GOODS_CD = CN.GOODS_CD(+)
	</select>

<!-- 	<insert id="insertGoodsLangInfo" parameterClass="java.util.HashMap"> -->
<!-- 		MERGE INTO GD_MGT_GOODS_MLANG_SPRT -->
<!-- 			 USING DUAL -->
<!-- 				ON (LANG_CD = #lang_cd# AND GOODS_CD = #goods_cd#) -->
<!-- 		WHEN MATCHED THEN -->
<!-- 			UPDATE -->
<!-- 			   SET GOODS_NM		= #goods_nm# -->
<!-- 				 , GOODS_DESC	= #goods_desc# -->
<!-- 				 , SRCH_GOODS_NM = REPLACE(#goods_nm#, ' ') -->
<!-- 				 , STD			= #std# -->
<!-- 				 , HS_CD		= #hs_cd# -->
<!-- 				 , CHG_DATE		= SYSDATE -->
<!-- 			<isNotEmpty property="login_usr_id"> -->
<!-- 				 , CHGER_ID		= #login_usr_id# -->
<!-- 			</isNotEmpty> -->
<!-- 		WHEN NOT MATCHED THEN -->
<!-- 			INSERT -->
<!-- 				 ( GOODS_CD -->
<!-- 				 , LANG_CD -->
<!-- 				 , GOODS_NM -->
<!-- 				 , SRCH_GOODS_NM -->
<!-- 				 , GOODS_DESC -->
<!-- 				 , STD -->
<!-- 				 , HS_CD -->
<!-- 				 , REG_DATE -->
<!-- 				 , CHG_DATE -->
<!-- 			<isNotEmpty property="login_usr_id"> -->
<!-- 				 , REGER_ID -->
<!-- 				 , CHGER_ID -->
<!-- 			</isNotEmpty> -->
<!-- 				 ) -->
<!-- 		  VALUES ( #goods_cd# -->
<!-- 				 , #lang_cd# -->
<!-- 				 , #goods_nm# -->
<!-- 				 , REPLACE(#goods_nm#, ' ') -->
<!-- 				 , #goods_desc# -->
<!-- 				 , #std# -->
<!-- 				 , #hs_cd# -->
<!-- 				 , SYSDATE -->
<!-- 				 , SYSDATE -->
<!-- 			<isNotEmpty property="login_usr_id"> -->
<!-- 				 , #login_usr_id# -->
<!-- 				 , #login_usr_id# -->
<!-- 			</isNotEmpty> -->
<!-- 				 ) -->
<!-- 	</insert> -->

	<select id="selectGoodsLangInfoCnt" parameterClass="java.util.HashMap" resultClass="int">
		SELECT COUNT(*) AS CNT
		FROM   GD_MGT_GOODS_MLANG_SPRT
		WHERE  LANG_CD = #lang_cd#
		AND    GOODS_CD = #goods_cd#
	</select>

	<insert id="insertGoodsLangInfo" parameterClass="java.util.HashMap">
		INSERT INTO GD_MGT_GOODS_MLANG_SPRT
			     ( GOODS_CD
				 , LANG_CD
				 , GOODS_NM
				 , SRCH_GOODS_NM
				 , GOODS_DESC
				 , STD
				 , HS_CD
				 , REG_DATE
				 , CHG_DATE
			<isNotEmpty property="login_usr_id">
				 , REGER_ID
				 , CHGER_ID
			</isNotEmpty>
				 )
		  VALUES ( #goods_cd#
				 , #lang_cd#
				 , #goods_nm#
				 , REPLACE(#goods_nm#, ' ')
				 , #goods_desc#
				 , #std#
				 , #hs_cd#
				 , SYSDATE
				 , SYSDATE
			<isNotEmpty property="login_usr_id">
				 , #login_usr_id#
				 , #login_usr_id#
			</isNotEmpty>
				 )
	</insert>

	<update id="updateGoodsLangInfo" parameterClass="java.util.HashMap">
		UPDATE GD_MGT_GOODS_MLANG_SPRT
			   SET GOODS_NM		= #goods_nm#
				 , GOODS_DESC	= #goods_desc#
				 , SRCH_GOODS_NM = REPLACE(#goods_nm#, ' ')
				 , STD			= #std#
				 , HS_CD		= #hs_cd#
				 , CHG_DATE		= SYSDATE
			<isNotEmpty property="login_usr_id">
				 , CHGER_ID		= #login_usr_id#
			</isNotEmpty>
		WHERE  LANG_CD = #lang_cd#
		AND    GOODS_CD = #goods_cd#
	</update>

	<delete id="deleteGoodsLangInfo" parameterClass="java.util.HashMap">
		DELETE FROM GD_MGT_GOODS_MLANG_SPRT
		 WHERE GOODS_CD = #goods_cd#
		   AND LANG_CD  = #lang_cd#
	</delete>

	<select id="selectGoodsExtraInfo" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT GOODS_CD
			 , EXTRA_GOODS_SEQ
			 , EXTRA_GOODS_TERM_SET_YN
			 , STRT_YMD
			 , END_YMD
			 , STD_CNT
			 , OFR_CNT
			 , USEYN
		  FROM GD_EXTRA_GOODS_INFO
		 WHERE GOODS_CD = #goods_cd#
		 <isEmpty property="extra_mgt">
		   AND USEYN = 'Y'
		 </isEmpty>
		   AND EXTRA_GOODS_SEQ = (SELECT MAX(EXTRA_GOODS_SEQ)
		   							FROM GD_EXTRA_GOODS_INFO
		   						   WHERE GOODS_CD = #goods_cd#)
	</select>

	<select id="selectGoodsExtraMgtInfo" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT GOODS_CD
			 , EXTRA_GOODS_SEQ
			 , EXTRA_GOODS_TERM_SET_YN
			 , STRT_YMD
			 , END_YMD
			 , STD_CNT
			 , OFR_CNT
			 , USEYN
		  FROM GD_EXTRA_GOODS_INFO
		 WHERE GOODS_CD = #goods_cd#
		   AND EXTRA_GOODS_SEQ = #extra_goods_seq#
	</select>

	<update id="updateMgtGoodsExtraInfo" parameterClass="java.util.HashMap">
		UPDATE GD_EXTRA_GOODS_INFO
		   SET USEYN = 'N'
		     , CHG_DATE = SYSDATE
		     , CHGER_ID = #login_usr_id#
		 WHERE GOODS_CD = #goods_cd#
		   AND USEYN = 'Y'
	</update>

	<insert id="insertMgtGoodsExtraInfo" parameterClass="java.util.HashMap">
		INSERT INTO GD_EXTRA_GOODS_INFO
			 ( GOODS_CD
			 , EXTRA_GOODS_SEQ
			 , EXTRA_GOODS_TERM_SET_YN
			 , STRT_YMD
			 , END_YMD
			 , STD_CNT
			 , OFR_CNT
			 , NOTIC_SORT_ORDER
			 , TREAT_STUS_CD
			 , BIZ_DIV
			 , USEYN
			 , REG_DATE
			 , CHG_DATE
		<isNotEmpty property="login_usr_id">
			 , REGER_ID
			 , CHGER_ID
		</isNotEmpty>
			 )
	  VALUES ( #goods_cd#
			 , (SELECT NVL(MAX(TO_NUMBER(EXTRA_GOODS_SEQ))+1, 1) FROM GD_EXTRA_GOODS_INFO WHERE GOODS_CD = #goods_cd#)
			 , #extra_goods_term_set_yn#
			 , REPLACE(#strt_ymd#, '-')
			 , REPLACE(#end_ymd#, '-')
			 , #std_cnt#
			 , #ofr_cnt#
			 , '1'
			 , 'N'
			 , '1'
			 , 'Y'
			 , SYSDATE
			 , SYSDATE
		<isNotEmpty property="login_usr_id">
			 , #login_usr_id#
			 , #login_usr_id#
		</isNotEmpty>
			 )
	</insert>

	<update id="updateGoodsExtra" parameterClass="java.util.HashMap">
		UPDATE GD_EXTRA_GOODS_INFO
		   SET STRT_YMD = REPLACE(#strt_ymd#, '-')
			 , END_YMD = REPLACE(#end_ymd#, '-')
			 , STD_CNT = #std_cnt#
			 , OFR_CNT = #ofr_cnt#
			 , USEYN = #useyn#
			 , CHG_DATE = SYSDATE
		<isNotEmpty property="login_usr_id">
			 , CHGER_ID = #login_usr_id#
		</isNotEmpty>
		 WHERE GOODS_CD = #goods_cd#
		   AND EXTRA_GOODS_SEQ = #extra_goods_seq#
	</update>

	<select id="selectMgtGoodsPrsntInfo" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT A.GOODS_CD
			 , A.PRSNT_SEQ
			 , A.PRSNT_NM
			 , A.PRSNT_DESC
			 , A.PRSNT_IMAGE_PATH
			 , A.EVENT_STRT_YMD
			 , A.EVENT_END_YMD
			 , A.USE_YN
			 , B.FILE_STRE_PATH AS IMAGE_PATH
			 , B.STRE_FILE_NM AS IMAGE_NM
			 , B.ORIG_FILE_NM AS IMAGE_ORIG_NM
			 , B.FILE_EXTNER AS IMAGE_EXTNER
			 , B.FILE_SIZE AS IMAGE_SIZE
          FROM GD_MGT_GOODS_PRSNT A, CM_FILE_MGT B
		 WHERE A.PRSNT_IMAGE_PATH = B.ATTCHFILE_ID(+)
		   AND A.GOODS_CD = #goods_cd#
		   AND A.USE_YN = 'Y'
	</select>

	<update id="updateMgtGoodsPrsntInfo" parameterClass="java.util.HashMap">
		UPDATE GD_MGT_GOODS_PRSNT
		   SET USE_YN = 'N'
		     , CHG_DATE = SYSDATE
		<isNotEmpty property="login_usr_id">
			 , CHGER_ID = #login_usr_id#
		</isNotEmpty>
		 WHERE GOODS_CD = #goods_cd#
		   AND USE_YN = 'Y'
	</update>
	
	<update id="updateGoodsPrsntInfo" parameterClass="java.util.HashMap">
		UPDATE GD_GOODS_PRSNT
		   SET USE_YN = 'N'
		     , CHG_DATE = SYSDATE
		<isNotEmpty property="login_usr_id">
			 , CHGER_ID = #login_usr_id#
		</isNotEmpty>
		 WHERE GOODS_CD = #goods_cd#
		   AND USE_YN = 'Y'
	</update>

	<insert id="insertMgtGoodsPrsntInfo" parameterClass="java.util.HashMap">
		INSERT INTO GD_MGT_GOODS_PRSNT
			 ( GOODS_CD
			 , PRSNT_SEQ
			 , PRSNT_NM
			 , PRSNT_DESC
			 , PRSNT_IMAGE_PATH
			 , EVENT_STRT_YMD
			 , EVENT_END_YMD
			 , USE_YN
			 , REG_DATE
			 , CHG_DATE
		<isNotEmpty property="login_usr_id">
			 , REGER_ID
			 , CHGER_ID
		</isNotEmpty>
			 )
	  VALUES ( #goods_cd#
			 , (SELECT NVL(MAX(TO_NUMBER(PRSNT_SEQ))+1, 1) FROM GD_MGT_GOODS_PRSNT WHERE GOODS_CD = #goods_cd#)
			 , #prsnt_nm#
			 , #prsnt_desc#
			 <isNotEmpty property="prsnt_image_path" prepend=",">
			 	#prsnt_image_path#
			 </isNotEmpty>
			 <isEmpty property="prsnt_image_path" prepend=",">
			 	<isEqual property="prsnt_delyn" compareValue="Y">
			 		NULL
			 	</isEqual>
			 	<isNotEqual property="prsnt_delyn" compareValue="Y">
				 	( SELECT PRSNT_IMAGE_PATH FROM GD_MGT_GOODS_PRSNT WHERE GOODS_CD = #goods_cd#
				 		 AND PRSNT_SEQ = (SELECT MAX(TO_NUMBER(PRSNT_SEQ)) FROM GD_MGT_GOODS_PRSNT WHERE GOODS_CD = #goods_cd#)
				 	)
			 	</isNotEqual>
			 </isEmpty>
			 , REPLACE(#event_strt_ymd#, '-')
			 , REPLACE(#event_end_ymd#, '-')
			 , 'Y'
			 , SYSDATE
			 , SYSDATE
		<isNotEmpty property="login_usr_id">
			 , #login_usr_id#
			 , #login_usr_id#
		</isNotEmpty>
			 )
	</insert>
	
	<insert id="insertGoodsPrsntInfo" parameterClass="java.util.HashMap">
		INSERT INTO GD_GOODS_PRSNT
			 ( GOODS_CD
			 , PRSNT_SEQ
			 , PRSNT_NM
			 , PRSNT_DESC
			 , PRSNT_IMAGE_PATH
			 , EVENT_STRT_YMD
			 , EVENT_END_YMD
			 , USE_YN
			 , REG_DATE
			 , CHG_DATE
		<isNotEmpty property="login_usr_id">
			 , REGER_ID
			 , CHGER_ID
		</isNotEmpty>
			 )
	  VALUES ( #goods_cd#
			 , (SELECT NVL(MAX(TO_NUMBER(PRSNT_SEQ))+1, 1) FROM GD_GOODS_PRSNT WHERE GOODS_CD = #goods_cd#)
			 , #prsnt_nm#
			 , #prsnt_desc#
			 <isNotEmpty property="prsnt_image_path" prepend=",">
			 	#prsnt_image_path#
			 </isNotEmpty>
			 <isEmpty property="prsnt_image_path" prepend=",">
			 	<isEqual property="prsnt_delyn" compareValue="Y">
			 		NULL
			 	</isEqual>
			 	<isNotEqual property="prsnt_delyn" compareValue="Y">
				 	( SELECT PRSNT_IMAGE_PATH FROM GD_GOODS_PRSNT WHERE GOODS_CD = #goods_cd#
				 		 AND PRSNT_SEQ = (SELECT MAX(TO_NUMBER(PRSNT_SEQ)) FROM GD_GOODS_PRSNT WHERE GOODS_CD = #goods_cd#)
				 	)
			 	</isNotEqual>
			 </isEmpty>
			 , REPLACE(#event_strt_ymd#, '-')
			 , REPLACE(#event_end_ymd#, '-')
			 , 'Y'
			 , SYSDATE
			 , SYSDATE
		<isNotEmpty property="login_usr_id">
			 , #login_usr_id#
			 , #login_usr_id#
		</isNotEmpty>
			 )
	</insert>

	<select id="selectMgtGoodsImageInfo" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT A.REPRSNT_IMAGE
			 , REPRSNT.FILE_STRE_PATH AS REPRSNT_PATH
			 , REPRSNT.STRE_FILE_NM AS REPRSNT_NM
			 , REPRSNT.ORIG_FILE_NM AS REPRSNT_ORIG_NM
			 , REPRSNT.FILE_EXTNER AS REPRSNT_EXTNER
			 , REPRSNT.FILE_SIZE AS REPRSNT_SIZE
			 , A.ADD_IMAGE1
			 , IMAGE1.FILE_STRE_PATH AS IMAGE1_PATH
			 , IMAGE1.STRE_FILE_NM AS IMAGE1_NM
			 , IMAGE1.ORIG_FILE_NM AS IMAGE1_ORIG_NM
			 , IMAGE1.FILE_EXTNER AS IMAGE1_EXTNER
			 , IMAGE1.FILE_SIZE AS IMAGE1_SIZE
			 , A.ADD_IMAGE2
			 , IMAGE2.FILE_STRE_PATH AS IMAGE2_PATH
			 , IMAGE2.STRE_FILE_NM AS IMAGE2_NM
			 , IMAGE2.ORIG_FILE_NM AS IMAGE2_ORIG_NM
			 , IMAGE2.FILE_EXTNER AS IMAGE2_EXTNER
			 , IMAGE2.FILE_SIZE AS IMAGE2_SIZE
			 , A.ADD_IMAGE3
			 , IMAGE3.FILE_STRE_PATH AS IMAGE3_PATH
			 , IMAGE3.STRE_FILE_NM AS IMAGE3_NM
			 , IMAGE3.ORIG_FILE_NM AS IMAGE3_ORIG_NM
			 , IMAGE3.FILE_EXTNER AS IMAGE3_EXTNER
			 , IMAGE3.FILE_SIZE AS IMAGE3_SIZE
			 , A.ADD_IMAGE4
			 , IMAGE4.FILE_STRE_PATH AS IMAGE4_PATH
			 , IMAGE4.STRE_FILE_NM AS IMAGE4_NM
			 , IMAGE4.ORIG_FILE_NM AS IMAGE4_ORIG_NM
			 , IMAGE4.FILE_EXTNER AS IMAGE4_EXTNER
			 , IMAGE4.FILE_SIZE AS IMAGE4_SIZE
		  FROM GD_MGT_GOODS_IMAGE A, CM_FILE_MGT REPRSNT, CM_FILE_MGT IMAGE1, CM_FILE_MGT IMAGE2, CM_FILE_MGT IMAGE3, CM_FILE_MGT IMAGE4
		 WHERE A.REPRSNT_IMAGE = REPRSNT.ATTCHFILE_ID(+)
		   AND A.ADD_IMAGE1 = IMAGE1.ATTCHFILE_ID(+)
		   AND A.ADD_IMAGE2 = IMAGE2.ATTCHFILE_ID(+)
		   AND A.ADD_IMAGE3 = IMAGE3.ATTCHFILE_ID(+)
		   AND A.ADD_IMAGE4 = IMAGE4.ATTCHFILE_ID(+)
		   AND A.GOODS_CD = #goods_cd#
		   AND ROWNUM = 1
	</select>

	<select id="selectGoodsAreaTreeRootList" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT AREA_CD AS ID
			 , AREA_NM AS NAME
			 , HRNK_AREA_CD AS UP_ID
			 , AREA_LEVEL AS LV
		  FROM CM_AREA_CD
		 WHERE USE_YN = 'Y'
		   AND AREA_LEVEL = 1
		<isNotEmpty property="areatype">
			<isNotEqual property="areatype" compareValue="99" prepend="AND">
				AREA_CD = #areatype#
			</isNotEqual>
		</isNotEmpty>

	</select>

	<select id="selectGoodsAreaTreeList" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT AREA_CD AS ID
			 , AREA_NM AS NAME
			 , HRNK_AREA_CD AS UP_ID
			 , AREA_LEVEL AS LV
		  FROM CM_AREA_CD
		 WHERE USE_YN = 'Y'
		   AND HRNK_AREA_CD = #id#
	</select>

	<select id="selectPostnetTreeRootList" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT CTGRY_CD AS ID
			 , CTGRY_NM AS NAME
			 , NULL AS UP_ID
			 , CTGRY_LEVEL AS LV
		  FROM GD_CTGRY_MAST
		 WHERE USE_YN = 'Y'
		   AND POSTNET_CTGRY_YN = 'Y'
		   AND CTGRY_LEVEL = 1
	</select>

	<select id="selectPostnetTreeList" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT CTGRY_CD AS ID
			 , CTGRY_NM AS NAME
			 , HRNK_CTGRY_CD AS UP_ID
			 , CTGRY_LEVEL AS LV
		  FROM GD_CTGRY_MAST
		 WHERE USE_YN = 'Y'
		   AND POSTNET_CTGRY_YN = 'Y'
		   AND HRNK_CTGRY_CD = #id#
	</select>

	<insert id="insertMgtGoodsImageInfo" parameterClass="java.util.HashMap">
		MERGE INTO GD_MGT_GOODS_IMAGE
					 USING DUAL
						ON (GOODS_CD = #goods_cd#)
				WHEN MATCHED THEN
					UPDATE SET
						   USE_YN			= 'Y'
					<isNotEmpty property="reprsnt_image" prepend=",">
						REPRSNT_IMAGE = #reprsnt_image#
					</isNotEmpty>
					<isNotEmpty property="add_image1" prepend=",">
						ADD_IMAGE1 = #add_image1#
					</isNotEmpty>
					<isNotEmpty property="add_image2" prepend=",">
						ADD_IMAGE2 = #add_image2#
					</isNotEmpty>
					<isNotEmpty property="add_image3" prepend=",">
				    	ADD_IMAGE3 = #add_image3#
				    </isNotEmpty>
					<isNotEmpty property="add_image4" prepend=",">
				    	ADD_IMAGE4 = #add_image4#
				    </isNotEmpty>
				         , CHG_DATE = SYSDATE
					<isNotEmpty property="login_usr_id">
						 , CHGER_ID = #login_usr_id#
					</isNotEmpty>
				WHEN NOT MATCHED THEN
					INSERT
						  ( GOODS_CD
						  , REPRSNT_IMAGE
						  , ADD_IMAGE1
						  , ADD_IMAGE2
						  , ADD_IMAGE3
						  , ADD_IMAGE4
						  , USE_YN
						  , REG_DATE
						  , CHG_DATE
					<isNotEmpty property="login_usr_id">
						  , REGER_ID
						  , CHGER_ID
					</isNotEmpty>
						   )
					 VALUES
						  ( #goods_cd#
						  , #reprsnt_image#
						  , #add_image1#
						  , #add_image2#
						  , #add_image3#
						  , #add_image4#
						  , 'Y'
						  , SYSDATE
						  , SYSDATE
					<isNotEmpty property="login_usr_id">
						  , #login_usr_id#
						  , #login_usr_id#
					</isNotEmpty>
						  )
	</insert>

	<update id="updateMgtGoodsImageInfo" parameterClass="java.util.HashMap">
		UPDATE GD_MGT_GOODS_IMAGE
		   SET USE_YN = 'Y'
		    <isEqual property="reprsnt_delyn" compareValue="Y" prepend=",">
		    	REPRSNT_IMAGE = NULL
		    </isEqual>
		    <isEqual property="image1_delyn" compareValue="Y" prepend=",">
		    	ADD_IMAGE1 = NULL
		    </isEqual>
		    <isEqual property="image2_delyn" compareValue="Y" prepend=",">
		    	ADD_IMAGE2 = NULL
		    </isEqual>
		    <isEqual property="image3_delyn" compareValue="Y" prepend=",">
		    	ADD_IMAGE3 = NULL
		    </isEqual>
		    <isEqual property="image4_delyn" compareValue="Y" prepend=",">
		    	ADD_IMAGE4 = NULL
		    </isEqual>
		 WHERE GOODS_CD = #goods_cd#
	</update>

	<sql id="goodsCrtfc_list">
		SELECT A.GOODS_CD	/* 상품코드 */
			 , C.GOODS_NM	/* 상품 명 */
			 , A.CRTFCT_SEQ /*인증서 SEQ*/
			 , A.CRTFCT_ID	/* 인증서ID */
			 , B.CRTFCT_NM	/* 인증서 명*/
			 , B.CRTFC_OR_NM	/* 인증기관 명 */
			 , B.ISSUE_OR_NM	/* 발행기관 명 */
			 , A.CRTFCT_NO	/* 인증서번호 */
			 , A.CRTFC_RANG	/* 인증범위 */
			 , TO_CHAR(TO_DATE(A.VLD_TERM_STRT_YMD), 'YYYY-MM-DD')||'~'||TO_CHAR(TO_DATE(A.VLD_TERM_END_YMD), 'YYYY-MM-DD') AS VLD_TERM /*유효 기간*/
			 , TO_CHAR(TO_DATE(A.VLD_TERM_STRT_YMD), 'YYYY-MM-DD') AS VLD_TERM_STRT_YMD
			 , TO_CHAR(TO_DATE(A.VLD_TERM_END_YMD), 'YYYY-MM-DD') AS VLD_TERM_END_YMD
			 , A.CRTFCT_FILE_NM	AS /* 인증서 파일명 */
			 , C.GOODS_STUS_CD    /*상품 상태코드*/
			 , F_GET_COMN_CD_NM('GOODS_STUS_CD', C.GOODS_STUS_CD) AS GOODS_STUS_NM
		  FROM GD_MGT_GOODS_CRTFC A, SC_GOODS_CRTFC_MAST B, GD_MGT_GOODS_MAST C
		  	 , (SELECT DISTINCT ATTCHFILE_ID FROM CM_FILE_MGT WHERE DEL_YN = 'N') D
		 WHERE A.CRTFCT_ID = B.CRTFCT_ID
		   AND A.GOODS_CD = C.GOODS_CD
		   AND A.CRTFCT_FILE_NM = D.ATTCHFILE_ID(+)
		   AND A.USE_YN = 'Y'
		<isNotEmpty property="goods_cd" prepend="AND">
			A.GOODS_CD = #goods_cd#
		</isNotEmpty>
		<isNotEmpty property="crtfct_seq" prepend="AND">
			A.CRTFCT_SEQ = #crtfct_seq#
		</isNotEmpty>
		<isNotEmpty property="crtfct_id" prepend="AND">
			A.CRTFCT_ID = #crtfct_id#
		</isNotEmpty>
		<isNotEmpty property="search_supp_comp_id" prepend="AND">
			C.SUPP_COMP_ID = #search_supp_comp_id#
		</isNotEmpty>
		<isNotEmpty property="search_text">
			<isNotEmpty property="search_type" prepend="AND">
				<isEqual property="search_type" compareValue="goods_cd">
					A.GOODS_CD LIKE #search_text#||'%'
				</isEqual>
				<isEqual property="search_type" compareValue="goods_nm">
					C.GOODS_NM LIKE '%'||#search_text#||'%'
				</isEqual>
			</isNotEmpty>
			<isEmpty property="search_type" prepend="AND">
				(A.GOODS_CD LIKE #search_text#||'%' OR C.GOODS_NM LIKE '%'||#search_text#||'%')
			</isEmpty>
		</isNotEmpty>
	</sql>

	<select id="selectCrtfcGoodsInfoList" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
			SELECT *
				FROM ( SELECT
					<isEmpty property="sidx">
						ROW_NUMBER () OVER (ORDER BY GOODS_CD DESC) RNUM
					</isEmpty>
					, A.*
					FROM (
						SELECT *
							FROM(
							<include refid="goodsCrtfc_list" />
							)
						) A
					) A
		<isNotEmpty property="firstIndex">
			WHERE RNUM BETWEEN  #firstIndex# AND #lastIndex#
		</isNotEmpty>
	</select>

	<select id="selectCrtfcGoodsInfoCount" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		SELECT COUNT(*) AS CNT
		  FROM (<include refid="goodsCrtfc_list" />)
	</select>

	<select id="selectMgtGoodsDcSeq" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT NVL(MAX(TO_NUMBER(GOODS_DC_SEQ)), 0) FROM GD_MGT_GOODS_DC WHERE GOODS_CD = #goods_cd#
	</select>

	<select id="selectMgtGoodsDcMaxSeq" parameterClass="java.lang.String" resultClass="java.lang.String">
		SELECT NVL(MAX(TO_NUMBER(GOODS_DC_SEQ))+1, 0) FROM GD_MGT_GOODS_DC WHERE GOODS_CD = #goods_cd#
	</select>

	<insert id="insertMgtGoodsDcInfo" parameterClass="java.util.HashMap">
		INSERT INTO GD_MGT_GOODS_DC
			 ( GOODS_CD
			 , GOODS_DC_SEQ
			 , DC_TYP_CD
			 , DC_APPLY_YN
			 , DC_DIV_CD
			 , DC_TERM_SET_YN
		<isNotEmpty property="fixamt_dc">
			 , FIXAMT_DC
		</isNotEmpty>
		<isNotEmpty property="fixrate_dc">
			 , FIXRATE_DC
		</isNotEmpty>
			 , DC_STRT_YMD
			 , DC_END_YMD
		<isNotEmpty property="dc_std_cnt">
			 , DC_STD_CNT
		</isNotEmpty>
			 , REG_DATE
			 , CHG_DATE
		<isNotEmpty property="login_usr_id">
			 , REGER_ID
			 , CHGER_ID
		</isNotEmpty>
			 )
	  VALUES
			 ( #goods_cd#
			 , #goods_dc_seq#
			 , #dc_typ_cd#
			 , #dc_apply_yn#
			 , #dc_div_cd#
			 , #dc_term_set_yn#
		<isNotEmpty property="fixamt_dc">
			 , #fixamt_dc#
		</isNotEmpty>
		<isNotEmpty property="fixrate_dc">
			 , #fixrate_dc#
		</isNotEmpty>
			 , REPLACE(#dc_strt_ymd#, '-')
			 , REPLACE(#dc_end_ymd#, '-')
		<isNotEmpty property="dc_std_cnt">
			 , #dc_std_cnt#
		</isNotEmpty>
			 , SYSDATE
			 , SYSDATE
		<isNotEmpty property="login_usr_id">
			 , #login_usr_id#
			 , #login_usr_id#
		</isNotEmpty>
			 )
	</insert>

	<insert id="insertGoodsDcInfo" parameterClass="java.util.HashMap">
		INSERT INTO GD_GOODS_DC
			 ( GOODS_CD
			 , GOODS_DC_SEQ
			 , DC_TYP_CD
			 , DC_APPLY_YN
			 , DC_DIV_CD
			 , DC_TERM_SET_YN
		<isNotEmpty property="fixamt_dc">
			 , FIXAMT_DC
		</isNotEmpty>
		<isNotEmpty property="fixrate_dc">
			 , FIXRATE_DC
		</isNotEmpty>
			 , DC_STRT_YMD
			 , DC_END_YMD
		<isNotEmpty property="dc_std_cnt">
			 , DC_STD_CNT
		</isNotEmpty>
			 , REG_DATE
			 , CHG_DATE
		<isNotEmpty property="login_usr_id">
			 , REGER_ID
			 , CHGER_ID
		</isNotEmpty>
			 )
	  VALUES
			 ( #goods_cd#
			 , #goods_dc_seq#
			 , #dc_typ_cd#
			 , #dc_apply_yn#
			 , #dc_div_cd#
			 , #dc_term_set_yn#
		<isNotEmpty property="fixamt_dc">
			 , #fixamt_dc#
		</isNotEmpty>
		<isNotEmpty property="fixrate_dc">
			 , #fixrate_dc#
		</isNotEmpty>
			 , REPLACE(#dc_strt_ymd#, '-')
			 , REPLACE(#dc_end_ymd#, '-')
		<isNotEmpty property="dc_std_cnt">
			 , #dc_std_cnt#
		</isNotEmpty>
			 , SYSDATE
			 , SYSDATE
		<isNotEmpty property="login_usr_id">
			 , #login_usr_id#
			 , #login_usr_id#
		</isNotEmpty>
			 )
	</insert>

	<insert id="insertMgtGoodsSendInfo" parameterClass="java.util.HashMap">
		MERGE INTO GD_MGT_GOODS_SEND
			 USING DUAL
				ON ( GOODS_CD = #goods_cd# )
		WHEN MATCHED THEN
			UPDATE
			   SET SEND_PSSB_AREA_CD			= #send_pssb_area_cd#
				 , SEND_PSSB_AREA_DTAIL_CD		= #send_pssb_area_dtail_cd#
				 , SEND_METH_DIV_CD				= #send_meth_div_cd#
				 , SEND_METH_DTAIL_CD			= #send_meth_dtail_cd#
				 , VISIT_RECPT_YN				= #visit_recpt_yn#
				 , OUTWARE_ADDR					= #outware_addr#
				 , RETRNGD_EXCHG_ADDR			= #retrngd_exchg_addr#
				 , SENDNON_DIV_CD				= #sendnon_div_cd#
			<isNotEmpty property="sendnon">
				 , SENDNON = #sendnon#
			</isNotEmpty>
			<isNotEmpty property="sendnon_lwest_buy_prc">
				 , SENDNON_LWEST_BUY_PRC = #sendnon_lwest_buy_prc#
			</isNotEmpty>
			<isNotEmpty property="sendnon_max_buy_prc">
				 , SENDNON_MAX_BUY_PRC = #sendnon_max_buy_prc#
			</isNotEmpty>
				 , BUNDSEND_DIV_YN				= #bundsend_div_yn#
				 , SENDNON_ADD_DIV_CD			= #sendnon_add_div_cd#
				 , SETL_METH_DIV_CD				= #setl_meth_div_cd#
				 , IDSRTS_ADD_SENDNON_SET_YN	= #idsrts_add_sendnon_set_yn#
			<isNotEmpty property="jeju_sendnon">
				 , JEJU_SENDNON = #jeju_sendnon#
			</isNotEmpty>
			<isNotEmpty property="idsrts_sendnon">
				 , IDSRTS_SENDNON = #idsrts_sendnon#
			</isNotEmpty>
				 , SEND_ADD_SET_YN				= #send_add_set_yn#
				 , EMS_YN						= #ems_yn#
				 , SMALL_PACKET_YN				= #small_packet_yn#
			<isNotEmpty property="os_wght">
				 , WGHT = #os_wght#
			</isNotEmpty>
			<isNotEmpty property="os_volm">
				 , VOLM = #os_volm#
			</isNotEmpty>
				 , OVSEA_KIND_DIV_CD			= #ovsea_kind_div_cd#
				 , OVSEA_EXP_DIV_CD				= #ovsea_exp_div_cd#
				 , PRCL_INMATL_NM				= #prcl_inmatl_nm#
				 , SENDLIMIT_ATPN				= #sendlimit_atpn#
				 , TEMPL_STRE_YN				= #templ_stre_yn#
				 , TEMPL_NM						= #templ_nm#
				 , CHG_DATE						= SYSDATE
			<isNotEmpty property="login_usr_id">
				 , CHGER_ID = #login_usr_id#
			</isNotEmpty>
		WHEN NOT MATCHED THEN
			INSERT
				 ( GOODS_CD
				 , SEND_PSSB_AREA_CD
				 , SEND_PSSB_AREA_DTAIL_CD
				 , SEND_METH_DIV_CD
				 , SEND_METH_DTAIL_CD
				 , VISIT_RECPT_YN
				 , OUTWARE_ADDR
				 , RETRNGD_EXCHG_ADDR
				 , SENDNON_DIV_CD
			<isNotEmpty property="sendnon">
				 , SENDNON
			</isNotEmpty>
			<isNotEmpty property="sendnon_lwest_buy_prc">
				 , SENDNON_LWEST_BUY_PRC
			</isNotEmpty>
			<isNotEmpty property="sendnon_max_buy_prc">
				 , SENDNON_MAX_BUY_PRC
			</isNotEmpty>
				 , BUNDSEND_DIV_YN
				 , SENDNON_ADD_DIV_CD
				 , SETL_METH_DIV_CD
				 , IDSRTS_ADD_SENDNON_SET_YN
			<isNotEmpty property="jeju_sendnon">
				 , JEJU_SENDNON
			</isNotEmpty>
			<isNotEmpty property="idsrts_sendnon">
				 , IDSRTS_SENDNON
			</isNotEmpty>
			<isNotEmpty property="send_add_set_yn">
				 , SEND_ADD_SET_YN
			</isNotEmpty>
				 , EMS_YN
				 , SMALL_PACKET_YN
			<isNotEmpty property="os_wght">
				 , WGHT
			</isNotEmpty>
			<isNotEmpty property="os_volm">
				 , VOLM
			</isNotEmpty>
				 , OVSEA_KIND_DIV_CD
				 , OVSEA_EXP_DIV_CD
				 , PRCL_INMATL_NM
				 , SENDLIMIT_ATPN
				 , TEMPL_STRE_YN
				 , TEMPL_NM
				 , REG_DATE
				 , CHG_DATE
			<isNotEmpty property="login_usr_id">
				 , REGER_ID
				 , CHGER_ID
			</isNotEmpty>
				 )
		  VALUES
				 ( #goods_cd#
				 , #send_pssb_area_cd#
				 , #send_pssb_area_dtail_cd#
				 , #send_meth_div_cd#
				 , #send_meth_dtail_cd#
				 , #visit_recpt_yn#
				 , #outware_addr#
				 , #retrngd_exchg_addr#
				 , #sendnon_div_cd#
			<isNotEmpty property="sendnon">
				 , #sendnon#
			</isNotEmpty>
			<isNotEmpty property="sendnon_lwest_buy_prc">
				 , #sendnon_lwest_buy_prc#
			</isNotEmpty>
			<isNotEmpty property="sendnon_max_buy_prc">
				 , #sendnon_max_buy_prc#
			</isNotEmpty>
				 , #bundsend_div_yn#
				 , #sendnon_add_div_cd#
				 , #setl_meth_div_cd#
				 , #idsrts_add_sendnon_set_yn#
			<isNotEmpty property="jeju_sendnon">
				 , #jeju_sendnon#
			</isNotEmpty>
			<isNotEmpty property="idsrts_sendnon">
				 , #idsrts_sendnon#
			</isNotEmpty>
			<isNotEmpty property="send_add_set_yn">
				 , #send_add_set_yn#
			</isNotEmpty>
				 , #ems_yn#
				 , #small_packet_yn#
			<isNotEmpty property="os_wght">
				 , #os_wght#
			</isNotEmpty>
			<isNotEmpty property="os_volm">
				 , #os_volm#
			</isNotEmpty>
				 , #ovsea_kind_div_cd#
				 , #ovsea_exp_div_cd#
				 , #prcl_inmatl_nm#
				 , #sendlimit_atpn#
				 , #templ_stre_yn#
				 , #templ_nm#
				 , SYSDATE
				 , SYSDATE
			<isNotEmpty property="login_usr_id">
				 , #login_usr_id#
				 , #login_usr_id#
			</isNotEmpty>
				 )
	</insert>

	<select id="selectMgtGoodsPoDcInfo" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT DC_TYP_CD      AS DC_TYP_CD_09
			 , DC_APPLY_YN    AS DC_APPLY_YN_09
			 , DC_DIV_CD      AS DC_DIV_CD_09
			 , FIXAMT_DC      AS FIXAMT_DC_09
	 		 , DC_TERM_SET_YN AS DC_TERM_SET_YN_09
	 		 , DC_STRT_YMD    AS DC_STRT_YMD_09
	 		 , DC_END_YMD     AS DC_END_YMD_09
		  FROM GD_MGT_GOODS_DC
		 WHERE DC_TYP_CD = '09'
		   AND GOODS_CD = #goods_cd#
		   AND GOODS_DC_SEQ = #goods_dc_seq#
	</select>

	<select id="selectMgtGoodsDcInfo" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT DC_01.GOODS_CD
			 , DC_01.DC_TYP_CD AS DC_TYP_CD_01
			 , DC_01.DC_APPLY_YN AS DC_APPLY_YN_01
			 , DC_01.DC_DIV_CD AS DC_DIV_CD_01
			 , DC_01.FIXAMT_DC AS FIXAMT_DC_01
			 , DC_01.FIXRATE_DC AS FIXRATE_DC_01
			 , DC_01.DC_TERM_SET_YN AS DC_TERM_SET_YN_01
			 , DC_01.DC_STRT_YMD AS DC_STRT_YMD_01
			 , DC_01.DC_END_YMD AS DC_END_YMD_01
			 , DC_02.DC_TYP_CD AS DC_TYP_CD_02
			 , DC_02.DC_APPLY_YN AS DC_APPLY_YN_02
			 , DC_02.DC_DIV_CD AS DC_DIV_CD_02
			 , DC_02.FIXAMT_DC AS FIXAMT_DC_02
			 , DC_02.FIXRATE_DC AS FIXRATE_DC_02
			 , DC_02.DC_TERM_SET_YN AS DC_TERM_SET_YN_02
			 , DC_02.DC_STRT_YMD AS DC_STRT_YMD_02
			 , DC_02.DC_END_YMD AS DC_END_YMD_02
			 , DC_03.DC_TYP_CD AS DC_TYP_CD_03
			 , DC_03.DC_APPLY_YN AS DC_APPLY_YN_03
			 , DC_03.DC_DIV_CD AS DC_DIV_CD_03
			 , DC_03.FIXAMT_DC AS FIXAMT_DC_03
			 , DC_03.FIXRATE_DC AS FIXRATE_DC_03
			 , DC_03.DC_TERM_SET_YN AS DC_TERM_SET_YN_03
			 , DC_03.DC_STRT_YMD AS DC_STRT_YMD_03
			 , DC_03.DC_END_YMD AS DC_END_YMD_03
			 , DC_04.DC_TYP_CD AS DC_TYP_CD_04
			 , DC_04.DC_APPLY_YN AS DC_APPLY_YN_04
			 , DC_04.DC_DIV_CD AS DC_DIV_CD_04
			 , DC_04.FIXAMT_DC AS FIXAMT_DC_04
			 , DC_04.FIXRATE_DC AS FIXRATE_DC_04
			 , DC_04.DC_TERM_SET_YN AS DC_TERM_SET_YN_04
			 , DC_04.DC_STRT_YMD AS DC_STRT_YMD_04
			 , DC_04.DC_END_YMD AS DC_END_YMD_04
			 , DC_05.DC_TYP_CD AS DC_TYP_CD_05
			 , DC_05.DC_APPLY_YN AS DC_APPLY_YN_05
			 , DC_05.DC_DIV_CD AS DC_DIV_CD_05
			 , DC_05.FIXAMT_DC AS FIXAMT_DC_05
			 , DC_05.FIXRATE_DC AS FIXRATE_DC_05
			 , DC_05.DC_TERM_SET_YN AS DC_TERM_SET_YN_05
			 , DC_05.DC_STRT_YMD AS DC_STRT_YMD_05
			 , DC_05.DC_END_YMD AS DC_END_YMD_05
			 , DC_06.DC_TYP_CD AS DC_TYP_CD_06
			 , DC_06.DC_APPLY_YN AS DC_APPLY_YN_06
			 , DC_06.DC_DIV_CD AS DC_DIV_CD_06
			 , DC_06.FIXAMT_DC AS FIXAMT_DC_06
			 , DC_06.FIXRATE_DC AS FIXRATE_DC_06
			 , DC_06.DC_TERM_SET_YN AS DC_TERM_SET_YN_06
			 , DC_06.DC_STRT_YMD AS DC_STRT_YMD_06
			 , DC_06.DC_END_YMD AS DC_END_YMD_06
			 , DC_07.DC_TYP_CD AS DC_TYP_CD_07
			 , DC_07.DC_APPLY_YN AS DC_APPLY_YN_07
			 , DC_07.DC_DIV_CD AS DC_DIV_CD_07
			 , DC_07.FIXAMT_DC AS FIXAMT_DC_07
			 , DC_07.FIXRATE_DC AS FIXRATE_DC_07
			 , DC_07.DC_TERM_SET_YN AS DC_TERM_SET_YN_07
			 , DC_07.DC_STRT_YMD AS DC_STRT_YMD_07
			 , DC_07.DC_END_YMD AS DC_END_YMD_07
			 , DC_08.DC_TYP_CD AS DC_TYP_CD_08
			 , DC_08.DC_STD_CNT AS DC_STD_CNT_08
			 , DC_08.FIXAMT_DC AS FIXAMT_DC_08
			 , DC_08.DC_APPLY_YN AS DC_APPLY_YN_08
			 , DC_08.DC_TERM_SET_YN AS DC_TERM_SET_YN_08
			 , DC_08.DC_STRT_YMD AS DC_STRT_YMD_08
			 , DC_08.DC_END_YMD AS DC_END_YMD_08
			 , DC_09.DC_TYP_CD AS DC_TYP_CD_09
			 , DC_09.DC_APPLY_YN AS DC_APPLY_YN_09
			 , DC_09.DC_DIV_CD AS DC_DIV_CD_09
			 , DC_09.FIXAMT_DC AS FIXAMT_DC_09
			 , DC_09.DC_TERM_SET_YN AS DC_TERM_SET_YN_09
			 , DC_09.DC_STRT_YMD AS DC_STRT_YMD_09
			 , DC_09.DC_END_YMD AS DC_END_YMD_09
			 , DC_99.DC_TYP_CD AS DC_TYP_CD_99
			 , DC_99.DC_APPLY_YN AS DC_APPLY_YN_99
			 , DC_99.DC_DIV_CD AS DC_DIV_CD_99
			 , DC_99.FIXAMT_DC AS FIXAMT_DC_99
			 , DC_99.FIXRATE_DC AS FIXRATE_DC_99
		  FROM (SELECT #goods_cd# AS GOODS_CD, #goods_dc_seq# AS GOODS_DC_SEQ FROM DUAL) A
		     , (SELECT GOODS_DC_SEQ, GOODS_CD, DC_TYP_CD, DC_APPLY_YN, DC_DIV_CD, FIXAMT_DC, FIXRATE_DC
                     , DC_TERM_SET_YN, DC_STRT_YMD, DC_END_YMD
				  FROM GD_MGT_GOODS_DC WHERE DC_TYP_CD = '01' ) DC_01
			 , (SELECT GOODS_DC_SEQ, GOODS_CD, DC_TYP_CD, DC_APPLY_YN, DC_DIV_CD, FIXAMT_DC, FIXRATE_DC
                     , DC_TERM_SET_YN, DC_STRT_YMD, DC_END_YMD
				  FROM GD_MGT_GOODS_DC WHERE DC_TYP_CD = '02' ) DC_02
			 , (SELECT GOODS_DC_SEQ, GOODS_CD, DC_TYP_CD, DC_APPLY_YN, DC_DIV_CD, FIXAMT_DC, FIXRATE_DC
                     , DC_TERM_SET_YN, DC_STRT_YMD, DC_END_YMD
				  FROM GD_MGT_GOODS_DC WHERE DC_TYP_CD = '03' ) DC_03
			 , (SELECT GOODS_DC_SEQ, GOODS_CD, DC_TYP_CD, DC_APPLY_YN, DC_DIV_CD, FIXAMT_DC, FIXRATE_DC
                     , DC_TERM_SET_YN, DC_STRT_YMD, DC_END_YMD
				  FROM GD_MGT_GOODS_DC WHERE DC_TYP_CD = '04' ) DC_04
			 , (SELECT GOODS_DC_SEQ, GOODS_CD, DC_TYP_CD, DC_APPLY_YN, DC_DIV_CD, FIXAMT_DC, FIXRATE_DC
                     , DC_TERM_SET_YN, DC_STRT_YMD, DC_END_YMD
				  FROM GD_MGT_GOODS_DC WHERE DC_TYP_CD = '05' ) DC_05
			 , (SELECT GOODS_DC_SEQ, GOODS_CD, DC_TYP_CD, DC_APPLY_YN, DC_DIV_CD, FIXAMT_DC, FIXRATE_DC
                     , DC_TERM_SET_YN, DC_STRT_YMD, DC_END_YMD
				  FROM GD_MGT_GOODS_DC WHERE DC_TYP_CD = '06' ) DC_06
			 , (SELECT GOODS_DC_SEQ, GOODS_CD, DC_TYP_CD, DC_APPLY_YN, DC_DIV_CD, FIXAMT_DC, FIXRATE_DC
                     , DC_TERM_SET_YN, DC_STRT_YMD, DC_END_YMD
				  FROM GD_MGT_GOODS_DC WHERE DC_TYP_CD = '07' ) DC_07
			 , (SELECT GOODS_DC_SEQ, GOODS_CD, DC_TYP_CD, DC_STD_CNT, DC_APPLY_YN, DC_TERM_SET_YN, DC_STRT_YMD, DC_END_YMD, FIXAMT_DC
				  FROM GD_MGT_GOODS_DC WHERE DC_TYP_CD = '08' ) DC_08
			 , (SELECT GOODS_DC_SEQ, GOODS_CD, DC_TYP_CD, DC_APPLY_YN, DC_DIV_CD, FIXAMT_DC
			 		 , DC_TERM_SET_YN, DC_STRT_YMD, DC_END_YMD
				  FROM GD_MGT_GOODS_DC WHERE DC_TYP_CD = '09' ) DC_09
			 , (SELECT GOODS_DC_SEQ, GOODS_CD, DC_TYP_CD, DC_APPLY_YN, DC_DIV_CD, FIXAMT_DC, FIXRATE_DC
				  FROM GD_MGT_GOODS_DC WHERE DC_TYP_CD = '99' ) DC_99
		 WHERE A.GOODS_CD = DC_01.GOODS_CD(+)
		   AND A.GOODS_CD = DC_02.GOODS_CD(+)
		   AND A.GOODS_CD = DC_03.GOODS_CD(+)
		   AND A.GOODS_CD = DC_04.GOODS_CD(+)
		   AND A.GOODS_CD = DC_05.GOODS_CD(+)
		   AND A.GOODS_CD = DC_06.GOODS_CD(+)
		   AND A.GOODS_CD = DC_07.GOODS_CD(+)
		   AND A.GOODS_CD = DC_08.GOODS_CD(+)
		   AND A.GOODS_CD = DC_09.GOODS_CD(+)
		   AND A.GOODS_CD = DC_99.GOODS_CD(+)
		   AND A.GOODS_DC_SEQ = DC_02.GOODS_DC_SEQ(+)
		   AND A.GOODS_DC_SEQ = DC_03.GOODS_DC_SEQ(+)
		   AND A.GOODS_DC_SEQ = DC_04.GOODS_DC_SEQ(+)
		   AND A.GOODS_DC_SEQ = DC_05.GOODS_DC_SEQ(+)
		   AND A.GOODS_DC_SEQ = DC_06.GOODS_DC_SEQ(+)
		   AND A.GOODS_DC_SEQ = DC_07.GOODS_DC_SEQ(+)
		   AND A.GOODS_DC_SEQ = DC_08.GOODS_DC_SEQ(+)
		   AND A.GOODS_DC_SEQ = DC_09.GOODS_DC_SEQ(+)
		   AND A.GOODS_DC_SEQ = DC_99.GOODS_DC_SEQ(+)
		<isNotEmpty property="goods_cd" prepend="AND">
			DC_01.GOODS_CD = #goods_cd#
		</isNotEmpty>
	</select>

	<select id="selectMgtGoodsSendInfo" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT GOODS_CD
			 , SEND_PSSB_AREA_CD
			 , SEND_PSSB_AREA_DTAIL_CD
			 , SEND_METH_DIV_CD
			 , SEND_METH_DTAIL_CD
			 , VISIT_RECPT_YN
			 , OUTWARE_ADDR
			 , RETRNGD_EXCHG_ADDR
			 , SENDNON_DIV_CD
			 , SENDNON
			 , SENDNON_LWEST_BUY_PRC
			 , SENDNON_MAX_BUY_PRC
			 , BUNDSEND_DIV_YN
			 , SENDNON_ADD_DIV_CD
			 , SETL_METH_DIV_CD
			 , IDSRTS_ADD_SENDNON_SET_YN
			 , JEJU_SENDNON
			 , IDSRTS_SENDNON
			 , SEND_ADD_SET_YN
			 , EMS_YN
			 , SMALL_PACKET_YN
			 , WGHT
			 , VOLM
			 , OVSEA_KIND_DIV_CD
			 , OVSEA_EXP_DIV_CD
			 , PRCL_INMATL_NM
			 , SENDLIMIT_ATPN
			 , TEMPL_STRE_YN
			 , TEMPL_NM
			 , REG_DATE
			 , CHG_DATE
			 , REGER_ID
			 , CHGER_ID
		 FROM GD_MGT_GOODS_SEND
		WHERE GOODS_CD = #goods_cd#
	</select>

	<select id="selectGoodsSendTemplInfo" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT SUPP_COMP_ID
			 , SEND_PSSB_AREA_CD
			 , SEND_PSSB_AREA_DTAIL_CD
			 , SEND_METH_DIV_CD
			 , SEND_METH_DTAIL_CD
			 , VISIT_RECPT_YN
			 , OUTWARE_ADDR
			 , RETRNGD_EXCHG_ADDR
			 , SENDNON_DIV_CD
			 , SENDNON
			 , SENDNON_LWEST_BUY_PRC
			 , SENDNON_MAX_BUY_PRC
			 , BUNDSEND_DIV_YN
			 , SENDNON_ADD_DIV_CD
			 , SETL_METH_DIV_CD
			 , IDSRTS_ADD_SENDNON_SET_YN
			 , JEJU_SENDNON
			 , IDSRTS_SENDNON
			 , SEND_ADD_SET_YN
			 , EMS_YN
			 , SMALL_PACKET_YN
			 , WGHT
			 , VOLM
			 , OVSEA_KIND_DIV_CD
			 , OVSEA_EXP_DIV_CD
			 , PRCL_INMATL_NM
			 , SENDLIMIT_ATPN
			 , TEMPL_STRE_YN
			 , TEMPL_NM
			 , REG_DATE
			 , CHG_DATE
			 , REGER_ID
			 , CHGER_ID
		 FROM CO_SUPP_COMP_SEND
		WHERE SUPP_COMP_ID = #supp_comp_id#
		  AND SEND_SEQ = #send_seq#
	</select>

	<select id="selectMgtSendTemplate" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT SEND_SEQ AS VALUE
			 , TEMPL_NM AS NAME
		  FROM CO_SUPP_COMP_SEND
		 WHERE TEMPL_STRE_YN = 'Y'
		<isNotEmpty property="supp_comp_id" prepend="AND">
			SUPP_COMP_ID = #supp_comp_id#
		</isNotEmpty>
	</select>

	<sql id="goodsMgtChg_list">
		SELECT A.GOODS_CD
			 , A.GOODS_NM
			 , A.SUPP_COMP_ID
			 , A.SUPPO_RGIST_POCD
			 , A.EDPS_CD
			 , (SELECT BCNC_NM FROM CO_SUPP_COMP_MAST WHERE SUPP_COMP_ID = A.SUPP_COMP_ID) AS SUPP_COMP_NM
			 , TO_CHAR(TO_DATE(SUBSTR(A.GOODS_CHG_DATE, 0, 14), 'YYYY-MM-DD HH24:MI:SS'), 'YYYY-MM-DD HH24:MI:SS') AS GOODS_CHG_DATE
			 , A.GOODS_CHG_REASN_CD
			 , A.GOODS_CHG_REASN_CONT
			 , A.CHGER_ID
			 , (SELECT ADMIN_NM FROM CM_ADMIN_MAST WHERE ADMIN_ID = A.CHGER_ID) AS CHGER_NM
			 , (SELECT PONM FROM PICMT0060 WHERE USEYN = 'Y' AND DSCDPOYN = 'N' AND REGIPOCD = A.SUPPO_RGIST_POCD) AS PONM
			 , F_GET_COMN_CD_NM('GOODS_STUS_CD', A.GOODS_STUS_CD) AS GOODS_STUS_NM
			 , F_GET_COMN_CD_NM('GOODS_CHG_REASN_CD', A.GOODS_CHG_REASN_CD) AS GOODS_CHG_REASN_NM
		  FROM GD_GOODS_HISTOR A
		<dynamic prepend="WHERE">
			<isNotEmpty property="goods_cd" prepend="AND">
				A.GOODS_CD = #goods_cd#
			</isNotEmpty>
			<isNotEmpty property="search_strt_ymd" prepend="AND">
				A.GOODS_CHG_DATE BETWEEN REPLACE(#search_strt_ymd#,'-')||'000000000000' AND REPLACE(#search_end_ymd#,'-')||'999999999999'
			</isNotEmpty>
			<isNotEmpty property="search_supp_comp_id" prepend="AND">
				A.SUPP_COMP_ID = #search_supp_comp_id#
			</isNotEmpty>
			<isNotEmpty property="search_suppo_rgist_pocd" prepend="AND">
				A.SUPPO_RGIST_POCD = #search_suppo_rgist_pocd#
			</isNotEmpty>
			<isNotEmpty property="search_text">
				<isNotEmpty property="search_type" prepend="AND">
					<isEqual property="search_type" compareValue="01">
						(SELECT F_GET_COMN_CD_NM('GOODS_CHG_REASN_CD', A.GOODS_CHG_REASN_CD) FROM DUAL) LIKE '%'||#search_text#||'%'
					</isEqual>
					<isEqual property="search_type" compareValue="02">
						A.GOODS_CHG_REASN_CONT LIKE '%'||#search_text#||'%'
					</isEqual>
					<isEqual property="search_type" compareValue="03">
						(SELECT ADMIN_NM FROM CM_ADMIN_MAST WHERE ADMIN_ID = A.CHGER_ID) LIKE '%'||#search_text#||'%'
					</isEqual>
					<isEqual property="search_type" compareValue="04">
						A.GOODS_CD LIKE #search_text#||'%'
					</isEqual>
					<isEqual property="search_type" compareValue="05">
						A.GOODS_NM LIKE '%'||#search_text#||'%'
					</isEqual>
				</isNotEmpty>
				<isEmpty property="search_type" prepend="AND">
					(  F_GET_COMN_CD_NM('GOODS_CHG_REASN_CD', A.GOODS_CHG_REASN_CD) LIKE '%'||#search_text#||'%'
						OR A.GOODS_CHG_REASN_CONT LIKE '%'||#search_text#||'%'
						OR (SELECT ADMIN_NM FROM CM_ADMIN_MAST WHERE ADMIN_ID = A.CHGER_ID) LIKE '%'||#search_text#||'%'
						OR A.GOODS_CD LIKE #search_text#||'%'
						OR A.GOODS_NM LIKE '%'||#search_text#||'%'
					 )
				</isEmpty>
			</isNotEmpty>
		</dynamic>
	</sql>

	<!-- 상품변경이력조회 튜닝전 -->
	<select id="selectMgtGoodsHistList_old" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
			SELECT *
				FROM ( SELECT
					<isEmpty property="sidx">
						ROW_NUMBER () OVER (ORDER BY GOODS_CHG_DATE DESC) RNUM
					</isEmpty>
					, A.*
					FROM (
						SELECT *
							FROM(
							<include refid="goodsMgtChg_list" />
							)
						) A
					) A
		<isNotEmpty property="firstIndex">
			WHERE RNUM BETWEEN  #firstIndex# AND #lastIndex#
		</isNotEmpty>
	</select>

	<!-- 상품변경이력조회 튜닝 -->
	<select id="selectMgtGoodsHistList" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT A.*
		FROM   (
		              SELECT A.*,
		                          ( SELECT BCNC_NM
		                            FROM    CO_SUPP_COMP_MAST
		                            WHERE SUPP_COMP_ID = A.SUPP_COMP_ID) AS SUPP_COMP_NM ,
		                           ( SELECT ADMIN_NM
		                              FROM   CM_ADMIN_MAST
		                               WHERE ADMIN_ID = A.CHGER_ID) AS CHGER_NM ,
		                           ( SELECT PONM
		                             FROM   PICMT0060
		                             WHERE USEYN = 'Y'
		                             AND     DSCDPOYN = 'N'
		                             AND     REGIPOCD = A.SUPPO_RGIST_POCD) AS PONM ,
		                             F_GET_COMN_CD_NM('GOODS_STUS_CD', A.GOODS_STUS_CD) AS GOODS_STUS_NM ,
		                             F_GET_COMN_CD_NM('GOODS_CHG_REASN_CD', A.GOODS_CHG_REASN_CD) AS GOODS_CHG_REASN_NM,
		                          ROWNUM AS RNUM
		               FROM   (
		                              SELECT A.GOODS_CD ,
		                                           A.GOODS_NM ,
		                                           A.SUPP_COMP_ID ,
		                                           A.SUPPO_RGIST_POCD ,
		                                           A.EDPS_CD ,
		                                           TO_CHAR(TO_DATE(SUBSTR(A.GOODS_CHG_DATE, 0, 14), 'YYYY-MM-DD HH24:MI:SS'), 'YYYY-MM-DD HH24:MI:SS') AS GOODS_CHG_DATE ,
		                                            A.GOODS_CHG_REASN_CD ,
		                                            A.GOODS_CHG_REASN_CONT ,
		                                            A.GOODS_STUS_CD,
		                                            A.CHGER_ID
		                                FROM   GD_GOODS_HISTOR A
										<dynamic prepend="WHERE">
											<isNotEmpty property="goods_cd" prepend="AND">
												A.GOODS_CD = #goods_cd#
											</isNotEmpty>
											<isNotEmpty property="search_strt_ymd" prepend="AND">
												A.GOODS_CHG_DATE BETWEEN REPLACE(#search_strt_ymd#,'-')||'000000000000' AND REPLACE(#search_end_ymd#,'-')||'999999999999'
											</isNotEmpty>
											<isNotEmpty property="search_supp_comp_id" prepend="AND">
												A.SUPP_COMP_ID = #search_supp_comp_id#
											</isNotEmpty>
											<isNotEmpty property="search_suppo_rgist_pocd" prepend="AND">
												A.SUPPO_RGIST_POCD = #search_suppo_rgist_pocd#
											</isNotEmpty>
											<isNotEmpty property="search_text">
												<isNotEmpty property="search_type" prepend="AND">
													<isEqual property="search_type" compareValue="01">
														F_GET_COMN_CD_NM('GOODS_CHG_REASN_CD', A.GOODS_CHG_REASN_CD) LIKE '%'||#search_text#||'%'
													</isEqual>
													<isEqual property="search_type" compareValue="02">
														A.GOODS_CHG_REASN_CONT LIKE '%'||#search_text#||'%'
													</isEqual>
													<isEqual property="search_type" compareValue="03">
														(SELECT ADMIN_NM FROM CM_ADMIN_MAST WHERE ADMIN_ID = A.CHGER_ID) LIKE '%'||#search_text#||'%'
													</isEqual>
													<isEqual property="search_type" compareValue="04">
														A.GOODS_CD LIKE #search_text#||'%'
													</isEqual>
													<isEqual property="search_type" compareValue="05">
														A.GOODS_NM LIKE '%'||#search_text#||'%'
													</isEqual>
												</isNotEmpty>
												<isEmpty property="search_type" prepend="AND">
													(  F_GET_COMN_CD_NM('GOODS_CHG_REASN_CD', A.GOODS_CHG_REASN_CD) LIKE '%'||#search_text#||'%'
														OR A.GOODS_CHG_REASN_CONT LIKE '%'||#search_text#||'%'
														OR (SELECT ADMIN_NM FROM CM_ADMIN_MAST WHERE ADMIN_ID = A.CHGER_ID) LIKE '%'||#search_text#||'%'
														OR A.GOODS_CD LIKE #search_text#||'%'
														OR A.GOODS_NM LIKE '%'||#search_text#||'%'
													 )
												</isEmpty>
											</isNotEmpty>
										</dynamic>
		                                ORDER BY A.GOODS_CHG_DATE DESC
		                               ) A
		                 WHERE 1=1
						<isNotEmpty property="lastIndex">
							AND ROWNUM <![CDATA[<=]]> #lastIndex#
						</isNotEmpty>
		             ) A
		WHERE 1=1
		<isNotEmpty property="firstIndex">
			AND RNUM BETWEEN #firstIndex# AND #lastIndex#
		</isNotEmpty>
	</select>

	<select id="selectMgtGoodsHistCount" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		SELECT COUNT(*) AS CNT
		  FROM (<include refid="goodsMgtChg_list" />)
	</select>

	<select id="selectMgtGoodsHistTop5List" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	     SELECT * FROM(
			<include refid="goodsMgtChg_list" />
			 ORDER BY A.GOODS_CHG_DATE DESC
		)
		WHERE ROWNUM &lt;= 5
	</select>

	<sql id="goodsFlowerSendArea_list">
		SELECT P.RCOCD RCOCD
		     , (SELECT COMN_CD_NM FROM CM_COMN_CD S WHERE S.COMN_CD_ID = P.RCOCD AND S.CD_GRP_ID ='RCO_CD') RCO_NAME
		     , A.SUPP_COMP_STUS_CD
		     , (SELECT COMN_CD_NM FROM CM_COMN_CD S WHERE S.COMN_CD_ID = A.SUPP_COMP_STUS_CD AND S.CD_GRP_ID ='SUPP_COMP_STUS_CD') CONT_STATUS_NAME
		     , A.SUPPO_RGIST_POCD
		     , P.PONM PONM
		     , A.BCNC_NM
		     , A.SUPP_COMP_ID
		     , F.USE_YN
		  FROM CO_SUPP_COMP_MAST A,
		  	   CO_PAVLN_MGT B,
		       CM_FLW_GOODS_BIZINFO F,
		       PICMT0060 P
		 WHERE A.SUPP_COMP_ID = F.SUPP_COMP_ID
		   AND A.SUPP_COMP_ID = B.SUPP_COMP_ID
		   AND A.SUPPO_RGIST_POCD = P.REGIPOCD
		   AND B.PAVLN_DIV_CD = '04'
		   AND P.USEYN = 'Y'
		   AND F.USE_YN = 'Y'
		   AND F.GOODS_CD = #goods_cd#
		 ORDER BY RCO_NAME, P.PONM, A.BCNC_NM
	</sql>

	<select id="selectGoodsFlowerSendAreaList" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
			SELECT *
				FROM ( SELECT
					<isEmpty property="sidx">
						ROW_NUMBER () OVER (ORDER BY RCO_NAME DESC) RNUM
					</isEmpty>
					, A.*
					FROM (
						SELECT *
							FROM(
							<include refid="goodsFlowerSendArea_list" />
							)
						) A
					) A
		<isNotEmpty property="firstIndex">
			WHERE RNUM BETWEEN  #firstIndex# AND #lastIndex#
		</isNotEmpty>
	</select>

	<select id="selectGoodsFlowerSendAreaCount" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		SELECT COUNT(*) AS CNT
		  FROM (<include refid="goodsFlowerSendArea_list" />)
	</select>

	<sql id="md_list">
		SELECT A.ADMIN_ID
			 , A.ADMIN_NM
			 , A.ADMIN_DIV_CD
			 , A.PO_CD
			 , A.TELNO
			 , A.MOBILENO
			 , A.EMAIL_ADDR
		  FROM CM_ADMIN_MAST A, CM_ADMIN_PERM_GRP B
		 WHERE A.ADMIN_ID = B.ADMIN_ID(+)
		   AND B.PERM_ID = 'MD'
	   <isNotEmpty property="search_text">
			<isNotEmpty property="search_type" prepend="AND">
				<isEqual property="search_type" compareValue="admin_id">
					A.ADMIN_ID LIKE '%'||#search_text#||'%'
				</isEqual>
				<isEqual property="search_type" compareValue="admin_nm">
					A.ADMIN_NM LIKE '%'||#search_text#||'%'
				</isEqual>
			</isNotEmpty>
			<isEmpty property="search_type" prepend="AND">
				(A.ADMIN_ID LIKE '%'||#search_text#||'%' OR A.ADMIN_NM LIKE '%'||#search_text#||'%')
			</isEmpty>
	   </isNotEmpty>
	</sql>

	<select id="selectGoodsMdList" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
			SELECT *
				FROM ( SELECT
					<isEmpty property="sidx">
						ROW_NUMBER () OVER (ORDER BY ADMIN_ID DESC) RNUM
					</isEmpty>
					, A.*
					FROM (
						SELECT *
							FROM(
							<include refid="md_list" />
							)
						) A
					) A
		<isNotEmpty property="firstIndex">
			WHERE RNUM BETWEEN  #firstIndex# AND #lastIndex#
		</isNotEmpty>
	</select>

	<select id="selectGoodsMdCount" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		SELECT COUNT(*) AS CNT
		  FROM (<include refid="md_list" />)
	</select>

	<sql id="flowerPossiSend_list">
        SELECT P.RCOCD RCOCD
             , (SELECT COMN_CD_NM FROM CM_COMN_CD S WHERE S.COMN_CD_ID = P.RCOCD AND S.CD_GRP_ID ='RCO_CD') RCO_NAME
             , A.SUPP_COMP_STUS_CD
             , (SELECT COMN_CD_NM FROM CM_COMN_CD S WHERE S.COMN_CD_ID = A.SUPP_COMP_STUS_CD AND S.CD_GRP_ID ='SUPP_COMP_STUS_CD') CONT_STATUS_NAME
             , A.SUPPO_RGIST_POCD
             , P.PONM PONM
             , A.BCNC_NM
             , A.SUPP_COMP_ID
          FROM CO_SUPP_COMP_MAST A, CO_PAVLN_MGT B, PICMT0060 P
         WHERE A.SUPP_COMP_ID = B.SUPP_COMP_ID
           AND A.SUPPO_RGIST_POCD = P.REGIPOCD
           AND B.PAVLN_DIV_CD = '04'
           AND P.USEYN = 'Y'
		<isNotEmpty property="search_rcocd" prepend="AND">
			P.RCOCD = #search_rcocd#
		</isNotEmpty>
		<isNotEmpty property="search_supp_comp_stus_cd" prepend="AND">
			A.SUPP_COMP_STUS_CD = #search_supp_comp_stus_cd#
		</isNotEmpty>
		<isNotEmpty property="search_ponm" prepend="AND">
			P.PONM LIKE #search_ponm#||'%'
		</isNotEmpty>
		<isNotEmpty property="search_bcnc_nm" prepend="AND">
			A.BCNC_NM LIKE #search_bcnc_nm#||'%'
		</isNotEmpty>
		<isNotEmpty property="search_supp_comp_id" prepend="AND">
			A.SUPP_COMP_ID LIKE #search_supp_comp_id#||'%'
		</isNotEmpty>
	</sql>

	<select id="selectFlowerSendPossibleAreaList" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
			SELECT *
				FROM ( SELECT
					<isEmpty property="sidx">
						ROW_NUMBER () OVER (ORDER BY RCO_NAME DESC) RNUM
					</isEmpty>
					, A.*
					FROM (
						SELECT *
							FROM(
							<include refid="flowerPossiSend_list" />
							)
						) A
					) A
		<isNotEmpty property="firstIndex">
			WHERE RNUM BETWEEN  #firstIndex# AND #lastIndex#
		</isNotEmpty>
	</select>

	<select id="selectFlowerSendPossibleAreaCount" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		SELECT COUNT(*) AS CNT
		  FROM (<include refid="flowerPossiSend_list" />)
	</select>

	<select id="selectCtgryPavlnCode" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT PAVLN_DIV_CD
		  FROM GD_CTGRY_PAVLN_MAPP
		 WHERE CTGRY_CD = #ctgry_cd#
	</select>

	<select id="selectPavlnDivCd" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
 		SELECT T2.CD_GRP_ID
		     , T2.COMN_CD_ID AS value
		     , T2.COMN_CD_NM AS name
		  FROM CM_COMN_CD_GRP T1
		     , CM_COMN_CD T2
		 WHERE T1.CD_GRP_ID = T2.CD_GRP_ID
		   AND T1.CD_GRP_ID = 'PAVLN_DIV_CD'
		   AND COMN_CD_ID &lt; 10
		   <isNotEmpty property="suppCompId">
		   AND T2.COMN_CD_ID IN (SELECT DISTINCT PAVLN_DIV_CD FROM CO_PAVLN_MGT WHERE SUPP_COMP_ID = #suppCompId#)
		   </isNotEmpty>
		 ORDER BY T2.SORT_ORDER ASC
	</select>

	<select id="selectSuppPavlnDivCd" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
        SELECT A.PAVLN_DIV_CD AS VALUE
        	 , B.COMN_CD_NM   AS NAME
          FROM CO_PAVLN_MGT A, CM_COMN_CD B, GD_CTGRY_PAVLN_MAPP C
         WHERE A.PAVLN_DIV_CD = B.COMN_CD_ID
           AND A.PAVLN_DIV_CD = C.PAVLN_DIV_CD
           AND B.CD_GRP_ID = 'PAVLN_DIV_CD'
           AND B.USE_YN ='Y'
           AND C.CTGRY_CD = #ctgry_cd#
           AND A.SUPP_COMP_ID = #supp_comp_id#
         ORDER BY B.SORT_ORDER
	</select>

	<!-- 계약/인증기간 만료 대상 조회 old -->
	<sql id="expire_list_old">
		SELECT /*+ LEADING(C B A D) USE_NL(C B A D) INDEX(C GD_MGT_GOODS_CRTFC_IX01) */  A.SUPP_COMP_ID
			 , A.SUPP_COMP_STUS_CD /*공급 업체 상태 코드*/
			 , CASE WHEN A.CNTRAC_CANCEL_YMD > REPLACE(#search_end_ymd#, '-')
		  				THEN '인증만료'
					ELSE '계약만료'
				END AS CNTRAC
			 , A.CNTRAC_CANCEL_YMD /*계약취소일자*/
			 , B.GOODS_CD
			 , B.GOODS_NM
			 , B.GOODS_STUS_CD
			 , C.VLD_TERM_STRT_YMD||'~'||C.VLD_TERM_END_YMD AS VLD_TERM
			 , C.CRTFCT_NO
			 , C.CRTFCT_ID
			 , D.CRTFCT_NM
			 , A.SUPPO_RGIST_POCD
			 , PONM.PONM AS PONM
			 , A.BCNC_NM AS SUPP_COMP_NM
			 , A.ZIPCD
			 , A.ADDR1||' '||A.ADDR2 AS ADDR
			 , A.EMAIL
			 , A.TELNO
			 , A.PRSDT_NM
		FROM CO_SUPP_COMP_MAST A, GD_MGT_GOODS_MAST B, GD_MGT_GOODS_CRTFC C, SC_GOODS_CRTFC_MAST D
		   , (SELECT EDPSCD, PONM, COUNT(*) FROM PICMT0060 WHERE USEYN = 'Y' AND DSCDPOYN = 'N' GROUP BY EDPSCD, PONM HAVING COUNT(*) = 1 ) PONM
	   WHERE A.SUPP_COMP_ID = B.SUPP_COMP_ID
		 AND B.GOODS_CD = C.GOODS_CD
		 AND C.CRTFCT_ID = D.CRTFCT_ID(+)
		 AND B.EDPS_CD = PONM.EDPSCD(+)
		 AND C.USE_YN = 'Y'
		 AND ( ( (A.CNTRAC_CANCEL_YMD IS NOT NULL OR TRIM(A.CNTRAC_CANCEL_YMD) != '')
			 		AND LENGTH(A.CNTRAC_CANCEL_YMD) = '8'
					AND A.SUPP_COMP_STUS_CD = '01'
					AND A.CNTRAC_CANCEL_YMD &gt; REPLACE(#search_end_ymd#,'-') )
			 OR
		          ( (C.VLD_TERM_END_YMD IS NOT NULL OR TRIM(C.VLD_TERM_END_YMD) != '')
		          	AND B.GOODS_STUS_CD = '01'
					AND SUBSTR(C.VLD_TERM_END_YMD,0, 2) != '99')
			  )
		<isNotEmpty property="search_crtfct_id" prepend="AND">
			C.CRTFCT_ID = #search_crtfct_id#
		</isNotEmpty>
		<isNotEmpty property="search_end_ymd" prepend="AND">
			C.VLD_TERM_END_YMD BETWEEN REPLACE(#search_strt_ymd#,'-') AND REPLACE(#search_end_ymd#,'-')
		</isNotEmpty>
		<isNotEmpty property="search_supp_comp_id" prepend="AND">
			A.SUPP_COMP_ID = #search_supp_comp_id#
		</isNotEmpty>
		<isNotEmpty property="search_suppo_rgist_pocd" prepend="AND">
			A.SUPPO_RGIST_POCD = #search_suppo_rgist_pocd#
		</isNotEmpty>
		<isNotEmpty property="search_text">
			<isNotEmpty property="search_type" prepend="AND">
				<isEqual property="search_type" compareValue="01">
					B.GOODS_CD LIKE #search_text#||'%'
				</isEqual>
				<isEqual property="search_type" compareValue="02">
					B.GOODS_NM LIKE '%'||#search_text#||'%'
				</isEqual>
				<isEqual property="search_type" compareValue="03">
					C.CRTFCT_NO LIKE '%'||#search_text#||'%'
				</isEqual>
			</isNotEmpty>
			<isEmpty property="search_type" prepend="AND">
				( B.GOODS_CD LIKE #search_text#||'%' OR B.GOODS_NM LIKE '%'||#search_text#||'%'
				 OR C.CRTFCT_NO LIKE '%'||#search_text#||'%' )
			</isEmpty>
		</isNotEmpty>
	</sql>

	<!-- 계약/인증기간 만료 대상 조회 튜닝 -->
	<sql id="expire_list">
		SELECT /*+ LEADING(A B C D) USE_CONCAT INDEX(B GD_MGT_GOODS_MAST_IX01) */  A.SUPP_COMP_ID
			 , A.SUPP_COMP_STUS_CD /*공급 업체 상태 코드*/
			 , CASE WHEN A.CNTRAC_CANCEL_YMD > REPLACE(#search_end_ymd#, '-')
		  				THEN '인증만료'
					ELSE '계약만료'
				END AS CNTRAC
			 , A.CNTRAC_CANCEL_YMD /*계약취소일자*/
			 , B.GOODS_CD
			 , B.GOODS_NM
			 , B.GOODS_STUS_CD
			 , C.VLD_TERM_STRT_YMD||'~'||C.VLD_TERM_END_YMD AS VLD_TERM
			 , C.CRTFCT_NO
			 , C.CRTFCT_ID
			 , D.CRTFCT_NM
			 , A.SUPPO_RGIST_POCD
			 , PONM.PONM AS PONM
			 , A.BCNC_NM AS SUPP_COMP_NM
			 , A.ZIPCD
			 , A.ADDR1||' '||A.ADDR2 AS ADDR
			 , A.EMAIL
			 , A.TELNO
			 , A.PRSDT_NM
		FROM CO_SUPP_COMP_MAST A
			, GD_MGT_GOODS_MAST B
			, GD_MGT_GOODS_CRTFC C, SC_GOODS_CRTFC_MAST D
		   , (
		   		SELECT /*+ INDEX(IX_PICMT0060_03) */ EDPSCD
		   			, PONM
		   		FROM PICMT0060
		   			WHERE USEYN = 'Y'
		   				AND DSCDPOYN = 'N'
		   	) PONM
	   WHERE A.SUPP_COMP_ID = B.SUPP_COMP_ID
		 AND B.GOODS_CD = C.GOODS_CD
		 AND C.CRTFCT_ID = D.CRTFCT_ID(+)
		 AND B.EDPS_CD = PONM.EDPSCD(+)
		 AND C.USE_YN = 'Y'
		 AND ( ( (A.CNTRAC_CANCEL_YMD IS NOT NULL OR TRIM(A.CNTRAC_CANCEL_YMD) != '')
			 		AND LENGTH(A.CNTRAC_CANCEL_YMD) = '8'
					AND A.SUPP_COMP_STUS_CD = '01'
					AND A.CNTRAC_CANCEL_YMD &gt; REPLACE(#search_end_ymd#,'-') )
			 OR
		          ( (C.VLD_TERM_END_YMD IS NOT NULL OR TRIM(C.VLD_TERM_END_YMD) != '')
		          	AND B.GOODS_STUS_CD = '01'
					AND SUBSTR(C.VLD_TERM_END_YMD,0, 2) != '99')
			  )
		<isNotEmpty property="search_crtfct_id" prepend="AND">
			C.CRTFCT_ID = #search_crtfct_id#
		</isNotEmpty>
		<isNotEmpty property="search_end_ymd" prepend="AND">
			C.VLD_TERM_END_YMD BETWEEN REPLACE(#search_strt_ymd#,'-') AND REPLACE(#search_end_ymd#,'-')
		</isNotEmpty>
		<isNotEmpty property="search_supp_comp_id" prepend="AND">
			A.SUPP_COMP_ID = #search_supp_comp_id#
		</isNotEmpty>
		<isNotEmpty property="search_suppo_rgist_pocd" prepend="AND">
			A.SUPPO_RGIST_POCD = #search_suppo_rgist_pocd#
		</isNotEmpty>
		<isNotEmpty property="search_text">
			<isNotEmpty property="search_type" prepend="AND">
				<isEqual property="search_type" compareValue="01">
					B.GOODS_CD LIKE #search_text#||'%'
				</isEqual>
				<isEqual property="search_type" compareValue="02">
					B.GOODS_NM LIKE '%'||#search_text#||'%'
				</isEqual>
				<isEqual property="search_type" compareValue="03">
					C.CRTFCT_NO LIKE '%'||#search_text#||'%'
				</isEqual>
			</isNotEmpty>
			<isEmpty property="search_type" prepend="AND">
				( B.GOODS_CD LIKE #search_text#||'%' OR B.GOODS_NM LIKE '%'||#search_text#||'%'
				 OR C.CRTFCT_NO LIKE '%'||#search_text#||'%' )
			</isEmpty>
		</isNotEmpty>
	</sql>


	<select id="goodsMgrCntracExpireList" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
			SELECT *
				FROM ( SELECT
					<isEmpty property="sidx">
						ROW_NUMBER () OVER (ORDER BY GOODS_CD DESC) RNUM
					</isEmpty>
					, A.*
					FROM (
						SELECT *
							FROM(
							<include refid="expire_list" />
							)
						) A
					) A
		<isNotEmpty property="firstIndex">
			WHERE RNUM BETWEEN  #firstIndex# AND #lastIndex#
		</isNotEmpty>
	</select>

	<select id="goodsMgrCntracExpireCount" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		SELECT COUNT(*) AS CNT
		  FROM (<include refid="expire_list" />)
	</select>

	<!-- 튜닝전쿼리 20161026 -->
	<sql id="agroFichery_listOld">
		SELECT A.GOODS_CD
			 , A.GOODS_CHG_DATE
			 , A.OLD_PRC
			 , A.CHG_PRC
			 , B.GOODS_NM
			 , (SELECT BCNC_NM FROM CO_SUPP_COMP_MAST WHERE SUPP_COMP_ID = B.SUPP_COMP_ID) AS SUPP_COMP_NM
			 , D.CTGRY_NM
			 , B.SUPPO_RGIST_POCD
			 , (SELECT PONM FROM PICMT0060 WHERE USEYN = 'Y' AND DSCDPOYN = 'N' AND REGIPOCD = B.SUPPO_RGIST_POCD) AS PONM
		  FROM GD_MGT_GOODS_PRC_HISTOR A, GD_GOODS_MAST B
          	 , (SELECT A.GOODS_CD, F_GET_COMN_CD_NM('PAVLN_DIV_CD', A.PAVLN_DIV_CD)||B.CTGRY_NM AS CTGRY_NM
		          FROM GD_MGT_GOODS_CTGRY A
		               , (SELECT A.CTGRY_CD, A.PAVLN_DIV_CD, SYS_CONNECT_BY_PATH(B.CTGRY_NM, '▶') AS CTGRY_NM
		                    FROM GD_CTGRY_PAVLN_MAPP A, GD_CTGRY_MAST B
		                   WHERE A.CTGRY_CD = B.CTGRY_CD
		                   START WITH B.HRNK_CTGRY_CD IS NULL
		                 CONNECT BY PRIOR B.CTGRY_CD = B.HRNK_CTGRY_CD) B
		         WHERE A.CTGRY_CD = B.CTGRY_CD
		           AND A.PAVLN_DIV_CD = B.PAVLN_DIV_CD
		           AND A.BASIC_CTGRY_YN = 'Y'
		           AND A.USE_YN = 'Y'
		         GROUP BY A.GOODS_CD, F_GET_COMN_CD_NM('PAVLN_DIV_CD', A.PAVLN_DIV_CD) || B.CTGRY_NM
          	    ) D
		 WHERE A.GOODS_CD = B.GOODS_CD
		   AND A.GOODS_CD = D.GOODS_CD(+)
		<isNotEmpty property="search_end_ymd" prepend="AND">
			A.GOODS_CHG_DATE BETWEEN REPLACE(#search_strt_ymd#,'-') AND REPLACE(#search_end_ymd#,'-')
		</isNotEmpty>
		<isNotEmpty property="search_supp_comp_id" prepend="AND">
			B.SUPP_COMP_ID = #search_supp_comp_id#
		</isNotEmpty>
		<isNotEmpty property="search_suppo_rgist_pocd" prepend="AND">
			B.SUPPO_RGIST_POCD = #search_suppo_rgist_pocd#
		</isNotEmpty>
		<isNotEmpty property="search_text">
			<isNotEmpty property="search_type" prepend="AND">
				<isEqual property="search_type" compareValue="01">
					A.GOODS_CD LIKE #search_text#||'%'
				</isEqual>
				<isEqual property="search_type" compareValue="02">
					B.GOODS_NM LIKE '%'||#search_text#||'%'
				</isEqual>
			</isNotEmpty>
			<isEmpty property="search_type" prepend="AND">
				( B.GOODS_CD LIKE #search_text#||'%' OR B.GOODS_NM LIKE '%'||#search_text#||'%')
			</isEmpty>
		</isNotEmpty>
	</sql>

	<!-- 튜닝후 쿼리 -->
	<sql id="agroFichery_list">
		SELECT /*+ LEADING(TT A) use_nl(TT A) USE_HASH(B) PUSH_PRED */ A.GOODS_CD,
		       TT.GOODS_CHG_DATE ,
		       TT.OLD_PRC ,
		       TT.CHG_PRC ,
		       TT.GOODS_NM ,
		       TT.SUPP_COMP_NM ,
		       F_GET_COMN_CD_NM('PAVLN_DIV_CD', A.PAVLN_DIV_CD)||B.CTGRY_NM AS CTGRY_NM ,
		       TT.SUPPO_RGIST_POCD ,
		       TT.PONM
		  FROM GD_MGT_GOODS_CTGRY A ,
		       (SELECT /*+ LEADING(A) USE_NL(A B) */ A.CTGRY_CD,
		               A.PAVLN_DIV_CD,
		               SYS_CONNECT_BY_PATH(B.CTGRY_NM, '▶') AS CTGRY_NM
		          FROM GD_CTGRY_PAVLN_MAPP A,
		               GD_CTGRY_MAST B
		         WHERE A.CTGRY_CD = B.CTGRY_CD START WITH B.HRNK_CTGRY_CD IS NULL CONNECT BY PRIOR B.CTGRY_CD = B.HRNK_CTGRY_CD
		         ) B,
		       (SELECT /*+ ORDERED USE_NL(A B) INDEX(A GD_MGT_GOODS_PRC_HISTOR_PK ) */ A.GOODS_CD ,
		               A.GOODS_CHG_DATE ,
		               A.OLD_PRC ,
		               A.CHG_PRC ,
		               B.GOODS_NM ,
		               (SELECT BCNC_NM
		                  FROM CO_SUPP_COMP_MAST
		                 WHERE SUPP_COMP_ID = B.SUPP_COMP_ID) AS SUPP_COMP_NM ,
		               B.SUPPO_RGIST_POCD ,
		               (SELECT PONM
		                  FROM PICMT0060
		                 WHERE USEYN = 'Y'
		                   AND DSCDPOYN = 'N'
		                   AND REGIPOCD = B.SUPPO_RGIST_POCD) AS PONM
		          FROM GD_MGT_GOODS_PRC_HISTOR A,
		               GD_GOODS_MAST B
		         WHERE A.GOODS_CD = B.GOODS_CD
					<isNotEmpty property="search_supp_comp_id" prepend="AND">
						B.SUPP_COMP_ID = #search_supp_comp_id#
					</isNotEmpty>
					<isNotEmpty property="search_suppo_rgist_pocd" prepend="AND">
						B.SUPPO_RGIST_POCD = #search_suppo_rgist_pocd#
					</isNotEmpty>
					<isNotEmpty property="search_text">
						<isNotEmpty property="search_type" prepend="AND">
							<isEqual property="search_type" compareValue="04">
								A.GOODS_CD LIKE #search_text#||'%'	/*상품코드 */
							</isEqual>
							<isEqual property="search_type" compareValue="05">
								B.GOODS_NM LIKE '%'||#search_text#||'%'		/*상품명 */
							</isEqual>
							<isEqual property="search_type" compareValue="03">
								A.CHGER_ID = #search_text#		/*변경담당자 */
							</isEqual>
						</isNotEmpty>
						<isEmpty property="search_type" prepend="AND">
							( B.GOODS_CD LIKE #search_text#||'%' OR B.GOODS_NM LIKE '%'||#search_text#||'%')
						</isEmpty>
					</isNotEmpty>
		         ) TT
		 WHERE A.CTGRY_CD = B.CTGRY_CD
		   AND A.PAVLN_DIV_CD = B.PAVLN_DIV_CD
		   AND A.GOODS_CD = TT.GOODS_CD
		   AND A.BASIC_CTGRY_YN = 'Y'
		   AND A.USE_YN = 'Y'
		<isNotEmpty property="search_end_ymd" prepend="AND">
			TT.GOODS_CHG_DATE BETWEEN REPLACE(#search_strt_ymd#,'-') AND REPLACE(#search_end_ymd#,'-')
		</isNotEmpty>
		 GROUP BY A.GOODS_CD,
		       F_GET_COMN_CD_NM('PAVLN_DIV_CD', A.PAVLN_DIV_CD) || B.CTGRY_NM,
		       TT.GOODS_CD ,
		       TT.GOODS_CHG_DATE ,
		       TT.OLD_PRC ,
		       TT.CHG_PRC ,
		       TT.GOODS_NM ,
		       TT.SUPP_COMP_NM ,
		       TT.SUPPO_RGIST_POCD ,
		       TT.PONM
	</sql>


	<select id="agroFicheryPrcChgList" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
			SELECT *
				FROM ( SELECT
					<isEmpty property="sidx">
						ROW_NUMBER () OVER (ORDER BY GOODS_CD DESC) RNUM
					</isEmpty>
					, A.*
					FROM (
						SELECT *
							FROM(
							<include refid="agroFichery_list" />
							)
						) A
					) A
		<isNotEmpty property="firstIndex">
			WHERE RNUM BETWEEN  #firstIndex# AND #lastIndex#
		</isNotEmpty>
	</select>

	<select id="agroFicheryPrcChgCount" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		SELECT COUNT(*) AS CNT
		  FROM (<include refid="agroFichery_list" />)
	</select>

	<select id="selectGoodsSuppBaseInfo" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
        SELECT A.SUPP_COMP_ID /*공급 업체 ID*/
             , A.BCNC_NM AS SUPP_COMP_NM /*공급업체 명 */
             , A.SUPP_COMP_DIV_CD  /* 공급 업체 분류 코드 */
             , A.COMPREG_NO  /* 사업자 등록 번호 */
             , A.PO_ECODE  /* 우체국 ECODE */
             , A.PRSDT_NM  /* 대표자 명*/
             , A.TELNO /* 전화번호 */
             , A.SUPP_COMP_STUS_CD /* 공급 업체 상태 코드 */
             , A.SUPPO_RGIST_POCD /* 공급국 국기호 */
             , (SELECT EDPSCD FROM PICMT0060 WHERE REGIPOCD = A.SUPPO_RGIST_POCD AND USEYN = 'Y' AND DSCDPOYN = 'N' AND ROWNUM = 1) AS EDPS_CD
             , (SELECT PONM FROM PICMT0060 WHERE REGIPOCD = A.SUPPO_RGIST_POCD AND USEYN = 'Y' AND DSCDPOYN = 'N' AND ROWNUM = 1) AS PONM
          FROM CO_SUPP_COMP_MAST A
         WHERE A.SUPP_COMP_ID = #supp_comp_id#
           AND ROWNUM = 1
	</select>

	<sql id="goodsMgrDc_list">
		SELECT /*+ no_merge  push_pred */
				A.GOODS_CD
			 , A.GOODS_NM
			 , A.STD_SELL_PRC
			 , FN_GOODS_MGT_DC_TYP(A.GOODS_CD, '01') AS DC_PRC_01
			 , FN_GOODS_MGT_DC_TYP(A.GOODS_CD, '02') AS DC_PRC_02
			 , FN_GOODS_MGT_DC_TYP(A.GOODS_CD, '03') AS DC_PRC_03
			 , FN_GOODS_MGT_DC_TYP(A.GOODS_CD, '04') AS DC_PRC_04
			 , FN_GOODS_MGT_DC_TYP(A.GOODS_CD, '05') AS DC_PRC_05
			 , FN_GOODS_MGT_DC_TYP(A.GOODS_CD, '06') AS DC_PRC_06
			 , FN_GOODS_MGT_DC_TYP(A.GOODS_CD, '07') AS DC_PRC_07
			 , FN_GOODS_MGT_DC_TYP(A.GOODS_CD, '08') AS DC_PRC_08
			 , FN_GOODS_MGT_DC_TYP(A.GOODS_CD, '09') AS DC_PRC_09
			 , FN_GOODS_MGT_DC_TYP(A.GOODS_CD, '99') AS DC_PRC_99
			 , DECODE(FN_GOODS_SUPP_YN(A.GOODS_CD), 'Y', '공급', '공급중단') AS SUPP_YN
			 , A.STOCK_VOLM
			 , A.SUPP_COMP_ID
			 , (SELECT BCNC_NM FROM CO_SUPP_COMP_MAST WHERE SUPP_COMP_ID = A.SUPP_COMP_ID) AS SUPP_COMP_NM
		FROM GD_MGT_GOODS_MAST A
			<isNotEmpty property="search_supp_yn">
				, (
			         SELECT /*+  use_NL(A B G) */ 'Y' AS GOODS_SUPP_YN  , A.GOODS_CD GOODS_CD
				      FROM GD_GOODS_MAST A
				         , CO_SUPP_COMP_MAST G
						 , GD_MGT_GOODS_MAST B
				     WHERE A.SUPP_COMP_ID = G.SUPP_COMP_ID
					   AND A.GOODS_CD = B.GOODS_CD
				       AND TO_CHAR(SYSDATE,'YYYYMMDD') BETWEEN NVL(A.SUPP_BGIN_YMD,'000000') AND NVL(A.SUPP_END_YMD,'999999') --공급기간 안에 있고
				       AND TO_CHAR(SYSDATE, 'YYYYMMDD') NOT BETWEEN NVL(A.SUPP_DSCNTC_STRT_YMD,'99991231') AND NVL(A.SUPP_DSCNTC_END_YMD,'99991231') --공급중지기간이 아니어야 하고
				       AND NVL(A.SUPP_DSCNTC_STUS_CD,'00') = '00' --공급중지상태코드 '00'일때만 정상 일단 NULL일 경우 정상(00)으로 간주
				       AND TO_CHAR(SYSDATE, 'YYYYMMDD') NOT BETWEEN NVL(G.CNTRAC_STOP_STRT_YMD,'99991231') AND NVL(G.CNTRAC_STOP_END_YMD,'99991231') --계약 중지 기간에 포함 되지 않고
				       AND NVL(G.CNTRAC_DSUSE_YMD,'99991231') > TO_CHAR(SYSDATE, 'YYYYMMDD') --계약해지 일자가 현재날자 보다 이후 일 경우
				       AND ( CASE WHEN ( SELECT COUNT(1)
				                           FROM GD_GOODS_CRTFC
				                          WHERE (VLD_TERM_END_YMD IS NOT NULL OR TRIM(VLD_TERM_END_YMD) != '')
				                            AND SUBSTR(VLD_TERM_END_YMD,0, 2) != '99'
				                            AND VLD_TERM_END_YMD <![CDATA[<]]> TO_CHAR(SYSDATE,'YYYYMMDD')
				                            AND GOODS_CD = A.GOODS_CD
				                            AND USE_YN = 'Y') > 0 THEN  1
				                  ELSE 0
				             END ) = 0
				             ) B
			WHERE A.GOODS_CD = B.GOODS_CD
		</isNotEmpty>
		<isEmpty property="search_supp_yn">
			WHERE 1=1
		</isEmpty>
			<isNotEmpty property="goods_cd" prepend="AND">
				A.GOODS_CD = #goods_cd#
			</isNotEmpty>
			<isNotEmpty property="search_ctgry_cd" prepend="AND">
				A.GOODS_CD IN (SELECT DISTINCT GOODS_CD
							     FROM GD_MGT_GOODS_CTGRY
							    WHERE CTGRY_CD IN ( SELECT A.CTGRY_CD FROM GD_CTGRY_MAST A WHERE  A.USE_YN = 'Y'
												     START WITH A.CTGRY_CD = #search_ctgry_cd#
												   CONNECT BY PRIOR A.CTGRY_CD = A.HRNK_CTGRY_CD )
								)
			</isNotEmpty>
			<isNotEmpty property="search_text">
				<isNotEmpty property="search_type" prepend="AND">
					<isEqual property="search_type" compareValue="goods_cd">
						A.GOODS_CD LIKE #search_text#||'%'
					</isEqual>
					<isEqual property="search_type" compareValue="goods_nm">
						A.GOODS_NM LIKE '%'||#search_text#||'%'
					</isEqual>
				</isNotEmpty>
				<isEmpty property="search_type" prepend="AND">
					(A.GOODS_CD LIKE #search_text#||'%' OR A.GOODS_NM LIKE '%'||#search_text#||'%')
				</isEmpty>
		   </isNotEmpty>
		   <isNotEmpty property="search_supp_comp_id" prepend="AND">
				A.SUPP_COMP_ID = #search_supp_comp_id#
		   </isNotEmpty>
		   <isNotEmpty property="search_sell_typ_cd" prepend="AND">
				A.SELL_TYP_CD = #search_sell_typ_cd#
		   </isNotEmpty>
		   <isNotEmpty property="search_supp_dscntc_stus_cd" prepend="AND">
				A.SUPP_DSCNTC_STUS_CD = #search_supp_dscntc_stus_cd#
		   </isNotEmpty>
		   <isNotEmpty property="search_goods_stus_cd" prepend="AND">
				A.GOODS_STUS_CD = #search_goods_stus_cd#
		   </isNotEmpty>
		   <isNotEmpty property="search_strt_ymd" prepend="AND">
		   		TO_CHAR(A.REG_DATE, 'YYYY-MM-DD') BETWEEN #search_strt_ymd# AND #search_end_ymd#
		   </isNotEmpty>
		   <isNotEmpty property="search_supp_yn" prepend="AND">
		   	B.GOODS_SUPP_YN = #search_supp_yn#
		   </isNotEmpty>
	</sql>

	<select id="selectGoodsMgrDcList" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
			SELECT *
				FROM ( SELECT
					<isEmpty property="sidx">
						ROW_NUMBER () OVER (ORDER BY GOODS_CD DESC) RNUM
					</isEmpty>
					, A.*
					FROM (
						SELECT *
							FROM(
							<include refid="goodsMgrDc_list" />
							)
						) A
					) A
		<isNotEmpty property="firstIndex">
			WHERE RNUM BETWEEN  #firstIndex# AND #lastIndex#
		</isNotEmpty>
	</select>

	<select id="selectGoodsMgrDcCount" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		SELECT COUNT(*) AS CNT
		  FROM (<include refid="goodsMgrDc_list" />)
	</select>

	<update id="updateMgtGoodsChgReasn" parameterClass="java.util.HashMap">
		UPDATE GD_MGT_GOODS_MAST
		   SET GOODS_CHG_REASN_CD		= #goods_chg_reasn_cd#
			 , GOODS_CHG_REASN_CONT		= #goods_chg_reasn_cont#
			 , APPR_PROC_CD			 	= '01'
			 , CHG_DATE					= SYSDATE
		<isNotEmpty property="login_usr_id">
			 , CHGER_ID = #login_usr_id#
		</isNotEmpty>
		 WHERE GOODS_CD IN
		 <iterate property="goods_arr" open="("  close=")" conjunction=",">
			#goods_arr[]#
		</iterate>
	</update>

	<delete id="deleteMgtGoodsSearchInfo" parameterClass="java.util.HashMap">
		DELETE FROM GD_GOODS_SEARCH
		 WHERE GOODS_CD = #goods_cd#
	</delete>

	<insert id="insertMgtGoodsSearchInfo" parameterClass="java.util.HashMap">
		INSERT INTO GD_GOODS_SEARCH
			 ( GOODS_CD
			 , SEARCH_NAME
			 , DISP_YN
		<isNotEmpty property="login_usr_id">
			 , SYS_REGR_ID
		</isNotEmpty>
			 , SYS_REG_DTIME
		<isNotEmpty property="login_usr_id">
			 , SYS_MODR_ID
		</isNotEmpty>
			 , SYS_MOD_DTIME )
		VALUES
			 ( #goods_cd#
			 , #search_name#
			 , 'Y'
		<isNotEmpty property="login_usr_id">
			 , #login_usr_id#
		</isNotEmpty>
			 , SYSDATE
		<isNotEmpty property="login_usr_id">
			 , #login_usr_id#
		</isNotEmpty>
			 , SYSDATE )
	</insert>

	<sql id="goodsSell_list">
        SELECT A.GOODS_CD
			 , A.GOODS_NM
			 , A.GOODS_STUS_CD
			 , A.STD_SELL_PRC
			 , A.SUPP_COMP_ID
			 , (SELECT BCNC_NM FROM CO_SUPP_COMP_MAST WHERE SUPP_COMP_ID = A.SUPP_COMP_ID) AS SUPP_COMP_NM
			 , S.CTGRY_CD
			 , (SELECT SENDNON FROM GD_GOODS_SEND WHERE GOODS_CD = A.GOODS_CD) AS SENDNON
			 , F_GET_COMN_CD_NM('GOODS_STUS_CD', A.GOODS_STUS_CD) AS GOODS_STUS_NM
			 , F_GET_COMN_CD_NM('PAVLN_DIV_CD', S.PAVLN_DIV_CD) AS PAVLN_DIV_NM
			 , ( SELECT B.CTGRY_CD
				  FROM GD_CTGRY_MAST B
				 WHERE CONNECT_BY_ISLEAF = 1
				 START WITH B.CTGRY_CD = S.CTGRY_CD
			   CONNECT BY PRIOR B.HRNK_CTGRY_CD = B.CTGRY_CD ) TOP_CTGRY_CD
          FROM GD_GOODS_MAST A
			 , GD_GOODS_CTGRY S
			 , GD_CTGRY_PAVLN_MAPP T
         WHERE S.GOODS_CD = A.GOODS_CD
		   AND T.PAVLN_DIV_CD = S.PAVLN_DIV_CD
		   AND T.CTGRY_CD = S.CTGRY_CD
		   AND S.BASIC_CTGRY_YN = 'Y'
		   AND S.USE_YN = 'Y'
            <isEmpty property="excpetCode">
           		AND A.GOODS_STUS_CD IN ('01', '05')
            </isEmpty>
			<isNotEmpty property="str_div" prepend="AND">
				<isEqual property="str_div" compareValue="07">
					A.OVSEA_SEND_PSSB_YN = 'Y' AND (SELECT SUM(EMS_SEND_AMT) FROM GD_GOODS_SEND_NATION WHERE GOODS_CD = A.GOODS_CD ) > 0
					<isNotEmpty property="lang_cd" prepend="AND">
						A.GOODS_CD IN (SELECT GOODS_CD FROM GD_GOODS_MLANG_SPRT WHERE LANG_CD = #lang_cd#)
					</isNotEmpty>
				</isEqual>
				<isNotEqual property="str_div" compareValue="07">
					A.GOODS_CD IN ( SELECT X.GOODS_CD
									  FROM GD_CTGRY_PAVLN_MAPP B, GD_GOODS_CTGRY X
									 WHERE X.USE_YN = 'Y'
									   AND X.PAVLN_DIV_CD = B.PAVLN_DIV_CD
									   AND X.CTGRY_CD = B.CTGRY_CD
									   AND B.PAVLN_DIV_CD = #str_div#
									   AND B.CTGRY_CD IN ( SELECT A.CTGRY_CD
															 FROM GD_CTGRY_MAST A
															WHERE A.USE_YN = 'Y'
													<isNotEmpty property="search_ctgry_cd" >
															START WITH A.CTGRY_CD = #search_ctgry_cd#
														  CONNECT BY PRIOR A.CTGRY_CD = A.HRNK_CTGRY_CD
													</isNotEmpty>
														 )
								  )
				</isNotEqual>
			</isNotEmpty>
			<isNotEmpty property="search_text">
				<isNotEmpty property="search_type" prepend="AND">
					<isEqual property="search_type" compareValue="goods_cd">
						A.GOODS_CD LIKE #search_text#||'%'
					</isEqual>
					<isEqual property="search_type" compareValue="goods_nm">
						A.GOODS_NM LIKE '%'||#search_text#||'%'
					</isEqual>
				</isNotEmpty>
				<isEmpty property="search_type" prepend="AND">
					(A.GOODS_CD LIKE #search_text#||'%' OR A.GOODS_NM LIKE '%'||#search_text#||'%')
				</isEmpty>
			</isNotEmpty>
			<isNotEmpty property="search_supp_comp_id" prepend="AND">
				A.SUPP_COMP_ID = #search_supp_comp_id#
			</isNotEmpty>
			<isNotEmpty property="search_appr_proc_cd" prepend="AND">
				A.APPR_PROC_CD = #search_appr_proc_cd#
			</isNotEmpty>
			<isNotEmpty property="search_goods_stus_cd" prepend="AND">
				A.GOODS_STUS_CD = #search_goods_stus_cd#
			</isNotEmpty>
			<isNotEmpty property="goods_cd" prepend="AND">
		   		A.GOODS_CD = #goods_cd#
			</isNotEmpty>
			<isNotEmpty property="rgr_goods_yn" prepend="AND">
		   		A.RGR_GOODS_YN = #rgr_goods_yn#
			</isNotEmpty>
			<isNotEmpty property="sell_typ_cd" prepend="AND">
		   		A.SELL_TYP_CD = #sell_typ_cd#
			</isNotEmpty>
		    <isNotEmpty property="goodsCdArr" prepend="AND">
      			A.GOODS_CD IN
				<iterate property="goodsCdArr" open="("  close=")" conjunction=",">
					#goodsCdArr[]#
				</iterate>
		    </isNotEmpty>
	</sql>

	<select id="selectGoodsSellList" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
			SELECT *
				FROM ( SELECT
					<isEmpty property="sidx">
						ROW_NUMBER () OVER (ORDER BY GOODS_CD DESC) RNUM
					</isEmpty>
					, A.*
					FROM (
						SELECT A.*
							 , A.PAVLN_DIV_NM ||
							   ( SELECT SYS_CONNECT_BY_PATH(B.CTGRY_NM, '▶')
							   	   FROM GD_CTGRY_MAST B
								  WHERE B.CTGRY_CD = A.CTGRY_CD
								  START WITH B.CTGRY_CD = A.TOP_CTGRY_CD
								CONNECT BY PRIOR B.CTGRY_CD = B.HRNK_CTGRY_CD) BASIC_CTGRY_NM /* 기본 카테고리*/
							FROM(
							<include refid="goodsSell_list" />
							)A
						) A
					) A
		<isNotEmpty property="firstIndex">
			WHERE RNUM BETWEEN  #firstIndex# AND #lastIndex#
		</isNotEmpty>
	</select>

	<select id="selectGoodsSellCount" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		SELECT COUNT(*) AS CNT
		  FROM (<include refid="goodsSell_list" />)
	</select>

	<update id="updateFlowerSendAreaUseyn" parameterClass="java.util.HashMap">
		UPDATE CM_FLW_GOODS_BIZINFO
		   SET USE_YN = 'N'
			 , REG_ID = NVL(#login_usr_id#, 'ADMIN')
	         , MODIFY_DATE = SYSDATE
		 WHERE GOODS_CD = #goods_cd#
	</update>

	<insert id="insertFlowerSendAreaInfo" parameterClass="java.util.HashMap">
		MERGE INTO CM_FLW_GOODS_BIZINFO
			 USING DUAL
				ON (GOODS_CD = #goods_cd# AND SUPP_COMP_ID = #supp_comp_id#)
		WHEN MATCHED THEN
			UPDATE SET
				   USE_YN = 'Y'
				 , REG_ID = NVL(#login_usr_id#, 'ADMIN')
		         , MODIFY_DATE = SYSDATE
		WHEN NOT MATCHED THEN
			INSERT
		         ( GOODS_CD
		         , SUPP_COMP_ID
		         , USE_YN
		         , CREATE_DATE
		         , MODIFY_DATE
		         , REG_ID )
		  VALUES ( #goods_cd#
		         , #supp_comp_id#
		         , 'Y'
		         , SYSDATE
		         , SYSDATE
		         , NVL(#login_usr_id#, 'ADMIN') )
	</insert>

	<select id="selectCertDtaiInfo" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
        SELECT A.CRTFCT_ID
             , A.CRTFCT_NM
             , A.CRTFC_OR_NM
             , A.CRTFC_URL
             , IMAGE.FILE_STRE_PATH||IMAGE.STRE_FILE_NM AS IMAGE_PATH
          FROM SC_GOODS_CRTFC_MAST A, CM_FILE_MGT IMAGE
         WHERE A.ATTCHFILE_ID = IMAGE.ATTCHFILE_ID(+)
           AND A.CRTFCT_ID = #crtfct_id#
	</select>


	<sql id="goodsExtra_list">
		SELECT A.GOODS_CD
			 , A.GOODS_NM
			 , A.EXTRA_GOODS_YN
			 , DECODE(NVL(A.EXTRA_GOODS_YN, 'N'), 'Y', '덤 사용중', '덤 사용안함') AS EXTRA_GOODS_YN_NM
			 , DECODE(NVL(B.USEYN, 'N'), 'Y', '사용', '사용안함') AS USEYN_NM
			 , B.EXTRA_GOODS_SEQ
			 , B.EXTRA_GOODS_TERM_SET_YN
			 , B.STRT_YMD
			 , B.END_YMD
			 , B.STD_CNT
			 , B.OFR_CNT
			 , B.USEYN
			 , B.CHG_DATE
		  FROM GD_MGT_GOODS_MAST A
		  	 , GD_EXTRA_GOODS_INFO B
		 WHERE A.GOODS_CD = B.GOODS_CD(+)
		<isNotEmpty property="search_text">
			<isNotEmpty property="search_type" prepend="AND">
				<isEqual property="search_type" compareValue="goods_cd">
					A.GOODS_CD LIKE #search_text#||'%'
				</isEqual>
				<isEqual property="search_type" compareValue="goods_nm">
					A.GOODS_NM LIKE '%'||#search_text#||'%'
				</isEqual>
			</isNotEmpty>
		</isNotEmpty>
		<isNotEmpty property="search_strt_ymd">
			<isNotEmpty property="search_date_type" prepend="AND">
				<isEqual property="search_date_type" compareValue="strt">
					B.STRT_YMD BETWEEN REPLACE(#search_strt_ymd#, '-') AND REPLACE(#search_end_ymd#, '-')
				</isEqual>
				<isEqual property="search_date_type" compareValue="end">
					B.END_YMD BETWEEN REPLACE(#search_strt_ymd#, '-') AND REPLACE(#search_end_ymd#, '-')
				</isEqual>
			</isNotEmpty>
		</isNotEmpty>
		<isNotEmpty property="search_extra_goods_yn" prepend="AND">
			A.EXTRA_GOODS_YN = #search_extra_goods_yn#
		</isNotEmpty>
	</sql>

	<select id="selectGoodsExtraList" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
			SELECT *
				FROM ( SELECT
					<isEmpty property="sidx">
						ROW_NUMBER () OVER (ORDER BY GOODS_CD, EXTRA_GOODS_SEQ DESC) RNUM
					</isEmpty>
					, A.*
					FROM (
						SELECT A.*
							FROM(
							<include refid="goodsExtra_list" />
							)A
						) A
					) A
		<isNotEmpty property="firstIndex">
			WHERE RNUM BETWEEN  #firstIndex# AND #lastIndex#
		</isNotEmpty>
	</select>

	<select id="selectGoodsExtraCount" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		SELECT COUNT(*) AS CNT
		  FROM (<include refid="goodsExtra_list" />)
	</select>

	<update id="updateMgtGoodsMastExtraInfo" parameterClass="java.util.HashMap">
		UPDATE GD_MGT_GOODS_MAST
		   SET EXTRA_GOODS_YN = #extra_goods_yn#
		 WHERE GOODS_CD = #goods_cd#
	</update>

	<update id="updateGoodsMastExtraInfo" parameterClass="java.util.HashMap">
		UPDATE GD_GOODS_MAST
		   SET EXTRA_GOODS_YN = #extra_goods_yn#
		 WHERE GOODS_CD = #goods_cd#
	</update>




























	<select id="selectGoodsHeader" resultClass="java.util.HashMap">
		select COLUMN_NAME,COMMENTS from all_col_comments where table_name ='GD_GOODS_MAST' and owner = 'EPOSTMALL'
	</select>

	<update id="updateMgtGoodsMastExcel" parameterClass="java.util.HashMap">
		UPDATE GD_MGT_GOODS_MAST
		   SET
		      REGER_ID = #reger_id#
		     ,REG_DATE = SYSDATE
		     ,CHGER_ID = #chger_id#
		     ,CHG_DATE = SYSDATE
		     /* , APPR_PROC_CD = '01'	*/	/* 상품일괄등록시 승인요청 상태 20161103 */
		     /* , GOODS_CHG_REASN_CD = '99' */ /* 상품일괄등록시 값입력 20161103 */
		     /* , GOODS_CHG_REASN_CONT = '관리자 상품일괄등록 수정' */ /* 상품일괄등록시 값입력 20161103 */
		     <isNotNull property="md_id" prepend=",">
				MD_ID=#md_id#
			 </isNotNull>
			 <isNotNull property="sell_typ_cd" prepend=",">
				SELL_TYP_CD=#sell_typ_cd#
			 </isNotNull>
			 <isNotNull property="prdctn_area_cd" prepend=",">
				PRDCTN_AREA_CD=#prdctn_area_cd#
			 </isNotNull>
			 <isNotNull property="postnet_ctgry_cd" prepend=",">
			 	POSTNET_CTGRY_CD=#postnet_ctgry_cd#
			 </isNotNull>
			 <isNotNull property="supp_comp_id" prepend=",">
				SUPP_COMP_ID=#supp_comp_id#
			 </isNotNull>
			 <isNotNull property="edps_cd" prepend=",">
			 	EDPS_CD =#edps_cd#
			 </isNotNull>
			 <isNotNull property="suppo_rgist_pocd" prepend=",">
			 	SUPPO_RGIST_POCD=#suppo_rgist_pocd#
			 </isNotNull>
			 <isNotNull property="goods_nm" prepend=",">
			 	GOODS_NM=#goods_nm#
			 </isNotNull>
			 <isNotNull property="std" prepend=",">
			 	STD=#std#
			 </isNotNull>
			 <isNotNull property="unit" prepend=",">
			 	UNIT=#unit#
			 </isNotNull>
			 <isNotNull property="unit_wght" prepend=",">
			 	UNIT_WGHT=#unit_wght#
			 </isNotNull>
			 <isNotNull property="unit_volm" prepend=",">
			 	UNIT_VOLM=#unit_volm#
			 </isNotNull>
			 <isNotNull property="ovsea_wght" prepend=",">
			 	OVERSEA_WGHT =#ovsea_wght#
			 </isNotNull>
			 <isNotNull property="ovsea_volm" prepend=",">
			 	OVERSEA_VOLM =#ovsea_volm#
			 </isNotNull>
			 <isNotNull property="srch_goods_nm" prepend=",">
			 	SRCH_GOODS_NM=#srch_goods_nm#
			 </isNotNull>
			 <isNotNull property="orgplce_div_cd" prepend=",">
			 	ORGPLCE_DIV_CD=#orgplce_div_cd#
			 </isNotNull>
			 <isNotNull property="orgplce_dtail_area_choice_yn" prepend=",">
			 	ORGPLCE_DTAIL_AREA_CHOICE_YN=#orgplce_dtail_area_choice_yn#
			 </isNotNull>
			 <isNotNull property="orgplce_dtail_div_cd" prepend=",">
			 	ORGPLCE_DTAIL_DIV_CD=#orgplce_dtail_div_cd#
			 </isNotNull>
			 <isNotNull property="orgplce_dtail_area_cd" prepend=",">
			 	ORGPLCE_DTAIL_AREA_CD=#orgplce_dtail_area_cd#
			 </isNotNull>
			 <isNotNull property="taxt_div_cd" prepend=",">
			 	TAXT_DIV_CD=#taxt_div_cd#
			 </isNotNull>
			 <isNotNull property="buyer_agelimit_cd" prepend=",">
			 	BUYER_AGELIMIT_CD=#buyer_agelimit_cd#
			 </isNotNull>
			 <isNotNull property="fix_resrv_goods_yn" prepend=",">
			 	FIX_RESRV_GOODS_YN= NVL(#fix_resrv_goods_yn#,'N')
			 </isNotNull>
			 <isNotNull property="ovsea_send_pssb_yn" prepend=",">
			 	OVSEA_SEND_PSSB_YN=#ovsea_send_pssb_yn#
			 </isNotNull>
			 <isNotNull property="rgr_goods_yn" prepend=",">
			 	RGR_GOODS_YN= NVL(#rgr_goods_yn#,'N')
			 </isNotNull>
			 <isNotNull property="send_msg_typ_cd" prepend=",">
			 	SEND_MSG_TYP_CD=#send_msg_typ_cd#
			 </isNotNull>
			 <isNotNull property="wicket_goods_dc_yn" prepend=",">
			 	WICKET_GOODS_DC_YN=#wicket_goods_dc_yn#
			 </isNotNull>
			 <isNotNull property="wicket_goods_dc_amt" prepend=",">
			 	WICKET_GOODS_DC_AMT=#wicket_goods_dc_amt#
			 </isNotNull>
			 <isNotNull property="goods_stus_cd" prepend=",">
			 	GOODS_STUS_CD=#goods_stus_cd#
			 </isNotNull>
			 <isNotNull property="goods_desc_kr" prepend=",">
			 	GOODS_DESC=#goods_desc_kr#
			 </isNotNull>
			 <isNotNull property="cnsmr_prc" prepend=",">
			 	CNSMR_PRC= NVL(#cnsmr_prc#,0)
			 </isNotNull>
			 <isNotNull property="std_sell_prc" prepend=",">
			 	STD_SELL_PRC= NVL(#std_sell_prc#,0)
			 </isNotNull>
			 <isNotNull property="dc_apply_prc" prepend=",">
			 	DC_APPLY_PRC= NVL(#dc_apply_prc#,0)
			 </isNotNull>
			 <isNotNull property="dc_apply_strt_ymd" prepend=",">
			 	DC_APPLY_STRT_YMD= #dc_apply_strt_ymd#
			 </isNotNull>
			 <isNotNull property="dc_apply_end_ymd" prepend=",">
			 	DC_APPLY_END_YMD= #dc_apply_end_ymd#
			 </isNotNull>
			 <isNotNull property="basic_dc_set_yn" prepend=",">
			 	BASIC_DC_SET_YN=  NVL(#basic_dc_set_yn#,'N')
			 </isNotNull>
			 <isNotNull property="basic_dc_div_cd" prepend=",">
			 	BASIC_DC_DIV_CD= #basic_dc_div_cd#
			 </isNotNull>
			 <isNotNull property="basic_dc_amt" prepend=",">
			 	BASIC_DC_AMT= NVL(#basic_dc_amt#,0)
			 </isNotNull>
			 <isNotNull property="basic_dc_rate" prepend=",">
			 	BASIC_DC_RATE = NVL(#basic_dc_rate#,0)
			 </isNotNull>
			 <isNotNull property="accml_pnt_apply_yn" prepend=",">
			 	ACCML_PNT_APPLY_YN= NVL(#accml_pnt_apply_yn#,'N')
			 </isNotNull>
			 <isNotNull property="accml_pnt_div_cd" prepend=",">
			 	ACCML_PNT_DIV_CD=#accml_pnt_div_cd#
			 </isNotNull>
			 <isNotNull property="accml_pnt_fixamt" prepend=",">
			 	ACCML_PNT_FIXAMT= NVL(#accml_pnt_fixamt#,0)
			 </isNotNull>
			 <isNotNull property="accml_pnt_fixrate" prepend=",">
			 	ACCML_PNT_FIXRATE= NVL(#accml_pnt_fixrate#,0)
			 </isNotNull>
			 <isNotNull property="okcash_supp_yn" prepend=",">
			 	OKCASH_SUPP_YN= NVL(#okcash_supp_yn#,'N')
			 </isNotNull>
			 <isNotNull property="okcash_supp_div_cd" prepend=",">
			 	OKCASH_SUPP_DIV_CD=#okcash_supp_div_cd#
			 </isNotNull>
			 <isNotNull property="okcash_supp_amt" prepend=",">
			 	OKCASH_SUPP_AMT= NVL(#okcash_supp_amt#,0)
			 </isNotNull>
			 <isNotNull property="okcash_supp_rate" prepend=",">
			 	OKCASH_SUPP_RATE= NVL(#okcash_supp_rate#,0)
			 </isNotNull>
			 <isNotNull property="extra_goods_yn" prepend=",">
			 	EXTRA_GOODS_YN= NVL(#extra_goods_yn#,'N')
			 </isNotNull>
			 <isNotNull property="gift_pssb_yn" prepend=",">
			 	GIFT_PSSB_YN= NVL(#gift_pssb_yn#,'N')
			 </isNotNull>
			 <isNotNull property="buy_cnt_limit_yn" prepend=",">
			 	BUY_CNT_LIMIT_YN= NVL(#buy_cnt_limit_yn#,'N')
			 </isNotNull>
			 <isNotNull property="min_buy_cnt" prepend=",">
			 	MIN_BUY_CNT= NVL(#min_buy_cnt#,0)
			 </isNotNull>
			 <isNotNull property="max_buy_cnt_limit_yn" prepend=",">
			 	MAX_BUY_CNT_LIMIT_YN= NVL(#max_buy_cnt_limit_yn#,'N')
			 </isNotNull>
			 <isNotNull property="max_buy_cnt" prepend=",">
			 	MAX_BUY_CNT= NVL(#max_buy_cnt#,0)
			 </isNotNull>
			 <isNotNull property="stock_mgt_use_yn" prepend=",">
			 	STOCK_MGT_USE_YN= NVL(#stock_mgt_use_yn#,'Y')
			 </isNotNull>
			 <isNotNull property="stock_mgt_strt_ymd" prepend=",">
			 	STOCK_MGT_STRT_YMD=#stock_mgt_strt_ymd#
			 </isNotNull>
			 <isNotNull property="stock_mgt_end_ymd" prepend=",">
			 	STOCK_MGT_END_YMD=#stock_mgt_end_ymd#
			 </isNotNull>
			 <isNotNull property="stock_volm" prepend=",">
			 	STOCK_VOLM= NVL(#stock_volm#,0)
			 </isNotNull>
			 <isNotNull property="add_stock_volm" prepend=",">
			 	ADD_STOCK_VOLM= NVL(#add_stock_volm#,0)
			 </isNotNull>
			 <isNotNull property="strt_supp_ymd" prepend=",">
			 	STRT_SUPP_YMD=#strt_supp_ymd#
			 </isNotNull>
			 <isNotNull property="supp_dscntc_stus_cd" prepend=",">
			 	SUPP_DSCNTC_STUS_CD=#supp_dscntc_stus_cd#
			 </isNotNull>
			 <isNotNull property="supp_bgin_ymd" prepend=",">
			 	SUPP_BGIN_YMD=#supp_bgin_ymd#
			 </isNotNull>
			 <isNotNull property="supp_end_ymd" prepend=",">
			 	SUPP_END_YMD=#supp_end_ymd#
			 </isNotNull>
			 <isNotNull property="supp_dscntc_strt_ymd" prepend=",">
			 	SUPP_DSCNTC_STRT_YMD=#supp_dscntc_strt_ymd#
			 </isNotNull>
			 <isNotNull property="supp_dscntc_end_ymd" prepend=",">
			 	SUPP_DSCNTC_END_YMD=#supp_dscntc_end_ymd#
			 </isNotNull>
			 <isNotNull property="supp_dscntc_reasn" prepend=",">
			 	SUPP_DSCNTC_REASN=#supp_dscntc_reasn#
			 </isNotNull>
			 <isNotNull property="goods_optn_apply_yn" prepend=",">
			 	GOODS_OPTN_APPLY_YN= NVL(#goods_optn_apply_yn#,'Y')
			 </isNotNull>
			 <isNotNull property="trdacl_goods_yn" prepend=",">
			 	TRDACL_GOODS_YN= NVL(#trdacl_goods_yn#,'N')
			 </isNotNull>
			 <isNotNull property="trdacl_cnt" prepend=",">
			 	TRDACL_CNT= NVL(#trdacl_cnt#,0)
			 </isNotNull>
			 <isNotNull property="goods_prsnt_apply_yn" prepend=",">
			 	GOODS_PRSNT_APPLY_YN= NVL(#goods_prsnt_apply_yn#,'N')
			 </isNotNull>
			 <isNotNull property="ernc_goods_prdlst_cd" prepend=",">
			 	ERNC_GOODS_PRDLST_CD=#ernc_goods_prdlst_cd#
			 </isNotNull>
		 WHERE GOODS_CD = #goods_cd#
	</update>
	<update id="updateGoodsMastExcel" parameterClass="java.util.HashMap">
		UPDATE GD_GOODS_MAST
		   SET
		      REGER_ID = #reger_id#
		     ,REG_DATE = SYSDATE
		     ,CHGER_ID = #chger_id#
		     ,CHG_DATE = SYSDATE
		     /* , APPR_PROC_CD = '01'	*/	/* 상품일괄등록시 승인요청 상태 20161103 */
		     /* , GOODS_CHG_REASN_CD = '99' */ /* 상품일괄등록시 값입력 20161103 */
		     /* , GOODS_CHG_REASN_CONT = '관리자 상품일괄등록 수정' */ /* 상품일괄등록시 값입력 20161103 */
		     <isNotNull property="md_id" prepend=",">
				MD_ID=#md_id#
			 </isNotNull>
			 <isNotNull property="sell_typ_cd" prepend=",">
				SELL_TYP_CD=#sell_typ_cd#
			 </isNotNull>
			 <isNotNull property="prdctn_area_cd" prepend=",">
				PRDCTN_AREA_CD=#prdctn_area_cd#
			 </isNotNull>
			 <isNotNull property="postnet_ctgry_cd" prepend=",">
			 	POSTNET_CTGRY_CD=#postnet_ctgry_cd#
			 </isNotNull>
			 <isNotNull property="supp_comp_id" prepend=",">
				SUPP_COMP_ID=#supp_comp_id#
			 </isNotNull>
			 <isNotNull property="edps_cd" prepend=",">
			 	EDPS_CD =#edps_cd#
			 </isNotNull>
			 <isNotNull property="suppo_rgist_pocd" prepend=",">
			 	SUPPO_RGIST_POCD=#suppo_rgist_pocd#
			 </isNotNull>
			 <isNotNull property="goods_nm" prepend=",">
			 	GOODS_NM=#goods_nm#
			 </isNotNull>
			 <isNotNull property="std" prepend=",">
			 	STD=#std#
			 </isNotNull>
			 <isNotNull property="unit" prepend=",">
			 	UNIT=#unit#
			 </isNotNull>
			 <isNotNull property="unit_wght" prepend=",">
			 	UNIT_WGHT=#unit_wght#
			 </isNotNull>
			 <isNotNull property="unit_volm" prepend=",">
			 	UNIT_VOLM=#unit_volm#
			 </isNotNull>
			 <isNotNull property="ovsea_wght" prepend=",">
			 	OVERSEA_WGHT =#ovsea_wght#
			 </isNotNull>
			 <isNotNull property="ovsea_volm" prepend=",">
			 	OVERSEA_VOLM =#ovsea_volm#
			 </isNotNull>
			 <isNotNull property="srch_goods_nm" prepend=",">
			 	SRCH_GOODS_NM=#srch_goods_nm#
			 </isNotNull>
			 <isNotNull property="orgplce_div_cd" prepend=",">
			 	ORGPLCE_DIV_CD=#orgplce_div_cd#
			 </isNotNull>
			 <isNotNull property="orgplce_dtail_area_choice_yn" prepend=",">
			 	ORGPLCE_DTAIL_AREA_CHOICE_YN=#orgplce_dtail_area_choice_yn#
			 </isNotNull>
			 <isNotNull property="orgplce_dtail_div_cd" prepend=",">
			 	ORGPLCE_DTAIL_DIV_CD=#orgplce_dtail_div_cd#
			 </isNotNull>
			 <isNotNull property="orgplce_dtail_area_cd" prepend=",">
			 	ORGPLCE_DTAIL_AREA_CD=#orgplce_dtail_area_cd#
			 </isNotNull>
			 <isNotNull property="taxt_div_cd" prepend=",">
			 	TAXT_DIV_CD=#taxt_div_cd#
			 </isNotNull>
			 <isNotNull property="buyer_agelimit_cd" prepend=",">
			 	BUYER_AGELIMIT_CD=#buyer_agelimit_cd#
			 </isNotNull>
			 <isNotNull property="fix_resrv_goods_yn" prepend=",">
			 	FIX_RESRV_GOODS_YN= NVL(#fix_resrv_goods_yn#,'N')
			 </isNotNull>
			 <isNotNull property="ovsea_send_pssb_yn" prepend=",">
			 	OVSEA_SEND_PSSB_YN=#ovsea_send_pssb_yn#
			 </isNotNull>
			 <isNotNull property="rgr_goods_yn" prepend=",">
			 	RGR_GOODS_YN= NVL(#rgr_goods_yn#,'N')
			 </isNotNull>
			 <isNotNull property="send_msg_typ_cd" prepend=",">
			 	SEND_MSG_TYP_CD=#send_msg_typ_cd#
			 </isNotNull>
			 <isNotNull property="wicket_goods_dc_yn" prepend=",">
			 	WICKET_GOODS_DC_YN=#wicket_goods_dc_yn#
			 </isNotNull>
			 <isNotNull property="wicket_goods_dc_amt" prepend=",">
			 	WICKET_GOODS_DC_AMT=#wicket_goods_dc_amt#
			 </isNotNull>
			 <isNotNull property="goods_stus_cd" prepend=",">
			 	GOODS_STUS_CD=#goods_stus_cd#
			 </isNotNull>
			 <isNotNull property="goods_desc_kr" prepend=",">
			 	GOODS_DESC=#goods_desc_kr#
			 </isNotNull>
			 <isNotNull property="cnsmr_prc" prepend=",">
			 	CNSMR_PRC= NVL(#cnsmr_prc#,0)
			 </isNotNull>
			 <isNotNull property="std_sell_prc" prepend=",">
			 	STD_SELL_PRC= NVL(#std_sell_prc#,0)
			 </isNotNull>
			 <isNotNull property="dc_apply_prc" prepend=",">
			 	DC_APPLY_PRC= NVL(#dc_apply_prc#,0)
			 </isNotNull>
			 <isNotNull property="dc_apply_strt_ymd" prepend=",">
			 	DC_APPLY_STRT_YMD= #dc_apply_strt_ymd#
			 </isNotNull>
			 <isNotNull property="dc_apply_end_ymd" prepend=",">
			 	DC_APPLY_END_YMD= #dc_apply_end_ymd#
			 </isNotNull>
			 <isNotNull property="basic_dc_set_yn" prepend=",">
			 	BASIC_DC_SET_YN=  NVL(#basic_dc_set_yn#,'N')
			 </isNotNull>
			 <isNotNull property="basic_dc_div_cd" prepend=",">
			 	BASIC_DC_DIV_CD= #basic_dc_div_cd#
			 </isNotNull>
			 <isNotNull property="basic_dc_amt" prepend=",">
			 	BASIC_DC_AMT= NVL(#basic_dc_amt#,0)
			 </isNotNull>
			 <isNotNull property="basic_dc_rate" prepend=",">
			 	BASIC_DC_RATE = NVL(#basic_dc_rate#,0)
			 </isNotNull>
			 <isNotNull property="accml_pnt_apply_yn" prepend=",">
			 	ACCML_PNT_APPLY_YN= NVL(#accml_pnt_apply_yn#,'N')
			 </isNotNull>
			 <isNotNull property="accml_pnt_div_cd" prepend=",">
			 	ACCML_PNT_DIV_CD=#accml_pnt_div_cd#
			 </isNotNull>
			 <isNotNull property="accml_pnt_fixamt" prepend=",">
			 	ACCML_PNT_FIXAMT= NVL(#accml_pnt_fixamt#,0)
			 </isNotNull>
			 <isNotNull property="accml_pnt_fixrate" prepend=",">
			 	ACCML_PNT_FIXRATE= NVL(#accml_pnt_fixrate#,0)
			 </isNotNull>
			 <isNotNull property="okcash_supp_yn" prepend=",">
			 	OKCASH_SUPP_YN= NVL(#okcash_supp_yn#,'N')
			 </isNotNull>
			 <isNotNull property="okcash_supp_div_cd" prepend=",">
			 	OKCASH_SUPP_DIV_CD=#okcash_supp_div_cd#
			 </isNotNull>
			 <isNotNull property="okcash_supp_amt" prepend=",">
			 	OKCASH_SUPP_AMT= NVL(#okcash_supp_amt#,0)
			 </isNotNull>
			 <isNotNull property="okcash_supp_rate" prepend=",">
			 	OKCASH_SUPP_RATE= NVL(#okcash_supp_rate#,0)
			 </isNotNull>
			 <isNotNull property="extra_goods_yn" prepend=",">
			 	EXTRA_GOODS_YN= NVL(#extra_goods_yn#,'N')
			 </isNotNull>
			 <isNotNull property="gift_pssb_yn" prepend=",">
			 	GIFT_PSSB_YN= NVL(#gift_pssb_yn#,'N')
			 </isNotNull>
			 <isNotNull property="buy_cnt_limit_yn" prepend=",">
			 	BUY_CNT_LIMIT_YN= NVL(#buy_cnt_limit_yn#,'N')
			 </isNotNull>
			 <isNotNull property="min_buy_cnt" prepend=",">
			 	MIN_BUY_CNT= NVL(#min_buy_cnt#,0)
			 </isNotNull>
			 <isNotNull property="max_buy_cnt_limit_yn" prepend=",">
			 	MAX_BUY_CNT_LIMIT_YN= NVL(#max_buy_cnt_limit_yn#,'N')
			 </isNotNull>
			 <isNotNull property="max_buy_cnt" prepend=",">
			 	MAX_BUY_CNT= NVL(#max_buy_cnt#,0)
			 </isNotNull>
			 <isNotNull property="stock_mgt_use_yn" prepend=",">
			 	STOCK_MGT_USE_YN= NVL(#stock_mgt_use_yn#,'Y')
			 </isNotNull>
			 <isNotNull property="stock_mgt_strt_ymd" prepend=",">
			 	STOCK_MGT_STRT_YMD=#stock_mgt_strt_ymd#
			 </isNotNull>
			 <isNotNull property="stock_mgt_end_ymd" prepend=",">
			 	STOCK_MGT_END_YMD=#stock_mgt_end_ymd#
			 </isNotNull>
			 <isNotNull property="stock_volm" prepend=",">
			 	STOCK_VOLM= NVL(#stock_volm#,0)
			 </isNotNull>
			 <isNotNull property="add_stock_volm" prepend=",">
			 	ADD_STOCK_VOLM= NVL(#add_stock_volm#,0)
			 </isNotNull>
			 <isNotNull property="strt_supp_ymd" prepend=",">
			 	STRT_SUPP_YMD=#strt_supp_ymd#
			 </isNotNull>
			 <isNotNull property="supp_dscntc_stus_cd" prepend=",">
			 	SUPP_DSCNTC_STUS_CD=#supp_dscntc_stus_cd#
			 </isNotNull>
			 <isNotNull property="supp_bgin_ymd" prepend=",">
			 	SUPP_BGIN_YMD=#supp_bgin_ymd#
			 </isNotNull>
			 <isNotNull property="supp_end_ymd" prepend=",">
			 	SUPP_END_YMD=#supp_end_ymd#
			 </isNotNull>
			 <isNotNull property="supp_dscntc_strt_ymd" prepend=",">
			 	SUPP_DSCNTC_STRT_YMD=#supp_dscntc_strt_ymd#
			 </isNotNull>
			 <isNotNull property="supp_dscntc_end_ymd" prepend=",">
			 	SUPP_DSCNTC_END_YMD=#supp_dscntc_end_ymd#
			 </isNotNull>
			 <isNotNull property="supp_dscntc_reasn" prepend=",">
			 	SUPP_DSCNTC_REASN=#supp_dscntc_reasn#
			 </isNotNull>
			 <isNotNull property="goods_optn_apply_yn" prepend=",">
			 	GOODS_OPTN_APPLY_YN= NVL(#goods_optn_apply_yn#,'Y')
			 </isNotNull>
			 <isNotNull property="trdacl_goods_yn" prepend=",">
			 	TRDACL_GOODS_YN= NVL(#trdacl_goods_yn#,'N')
			 </isNotNull>
			 <isNotNull property="trdacl_cnt" prepend=",">
			 	TRDACL_CNT= NVL(#trdacl_cnt#,0)
			 </isNotNull>
			 <isNotNull property="goods_prsnt_apply_yn" prepend=",">
			 	GOODS_PRSNT_APPLY_YN= NVL(#goods_prsnt_apply_yn#,'N')
			 </isNotNull>
			 <isNotNull property="ernc_goods_prdlst_cd" prepend=",">
			 	ERNC_GOODS_PRDLST_CD=#ernc_goods_prdlst_cd#
			 </isNotNull>
		 WHERE GOODS_CD = #goods_cd#
	</update>
	<select id="selectFtcPrdlstStdCdList"  resultClass="java.util.HashMap" >
		select ftc_prdlst_grp_cd, count(*) cnt
		from gd_mgt_ftc_std_cd
		where use_yn='Y'
		group by ftc_prdlst_grp_cd
		order by to_number(ftc_prdlst_grp_cd) asc
	</select>
	<update id="updateMgtFtcGoodsExcel" parameterClass="java.util.HashMap">
		MERGE INTO GD_MGT_FTC_PRDLST PRDLST
		USING  DUAL
		ON(
               PRDLST.FTC_PRDLST_GRP_CD = #ernc_goods_prdlst_cd#
               AND PRDLST.FTC_PRDLST_STD_CD = #ftc_prdlst_std_cd#
		       AND PRDLST.GOODS_CD = #goods_cd#
		  )
		WHEN MATCHED THEN
		UPDATE SET GOODS_ITEM_CONT =  #goods_item_cont#
				   ,CHG_DATE = SYSDATE
				   ,CHGER_ID = #chger_id#
		WHEN NOT MATCHED THEN
		INSERT (GOODS_CD,FTC_PRDLST_GRP_CD,FTC_PRDLST_STD_CD,GOODS_ITEM_CONT,REG_DATE,CHG_DATE , REGER_ID, CHGER_ID)
		VALUES (#goods_cd# , #ernc_goods_prdlst_cd# , #ftc_prdlst_std_cd# , #goods_item_cont#, SYSDATE , SYSDATE ,#reger_id#, #chger_id#  )
		WHERE (#ernc_goods_prdlst_cd#, #ftc_prdlst_std_cd# ) IN ( SELECT FTC_PRDLST_GRP_CD, FTC_PRDLST_STD_CD FROM  GD_MGT_FTC_STD_CD WHERE USE_YN ='Y' )
	</update>
	<update id="updateFtcGoodsExcel" parameterClass="java.util.HashMap">
		MERGE INTO GD_FTC_PRDLST PRDLST
		USING  DUAL
		ON(
               PRDLST.FTC_PRDLST_GRP_CD = #ernc_goods_prdlst_cd#
               AND PRDLST.FTC_PRDLST_STD_CD = #ftc_prdlst_std_cd#
		       AND PRDLST.GOODS_CD = #goods_cd#
		  )
		WHEN MATCHED THEN
		UPDATE SET GOODS_ITEM_CONT =  #goods_item_cont#
				   ,CHG_DATE = SYSDATE
				   ,CHGER_ID = #chger_id#
		WHEN NOT MATCHED THEN
		INSERT (GOODS_CD,FTC_PRDLST_GRP_CD,FTC_PRDLST_STD_CD,GOODS_ITEM_CONT,REG_DATE,CHG_DATE , REGER_ID, CHGER_ID)
		VALUES (#goods_cd# , #ernc_goods_prdlst_cd# , #ftc_prdlst_std_cd# , #goods_item_cont#, SYSDATE , SYSDATE ,#reger_id#, #chger_id#  )
		WHERE (#ernc_goods_prdlst_cd#, #ftc_prdlst_std_cd# ) IN ( SELECT FTC_PRDLST_GRP_CD, FTC_PRDLST_STD_CD FROM  GD_MGT_FTC_STD_CD WHERE USE_YN ='Y' )
	</update>
	<insert id="InsertMgtGoodsMastExcel" parameterClass="java.util.HashMap">
		INSERT INTO GD_MGT_GOODS_MAST
		(
				MD_ID,
				SELL_TYP_CD,
				PRDCTN_AREA_CD,
				POSTNET_CTGRY_CD,
				SUPP_COMP_ID,
				EDPS_CD,
				SUPPO_RGIST_POCD,
				GOODS_NM,
				STD,
				UNIT,
				GOODS_BASIC_FEE,
				PO_FEE_RATE,
				SRCH_GOODS_NM,
				ORGPLCE_DIV_CD,
				ORGPLCE_DTAIL_AREA_CHOICE_YN,
				ORGPLCE_DTAIL_DIV_CD,
				ORGPLCE_DTAIL_AREA_CD,
				GOODS_CD,
				TAXT_DIV_CD,
				BUYER_AGELIMIT_CD,
				FIX_RESRV_GOODS_YN,
				OVSEA_SEND_PSSB_YN,
				RGR_GOODS_YN,
				SEND_MSG_TYP_CD,
				WICKET_GOODS_DC_YN,
				WICKET_GOODS_DC_AMT,
				GOODS_STUS_CD,
				GOODS_DESC,
				CNSMR_PRC,
				STD_SELL_PRC,
				DC_APPLY_PRC,
				DC_APPLY_STRT_YMD,
				DC_APPLY_END_YMD,
				BASIC_DC_SET_YN,
				BASIC_DC_DIV_CD,
				BASIC_DC_AMT,
				BASIC_DC_RATE,
				ACCML_PNT_APPLY_YN,
				ACCML_PNT_DIV_CD,
				ACCML_PNT_FIXAMT,
				ACCML_PNT_FIXRATE,
				OKCASH_SUPP_YN,
				OKCASH_SUPP_DIV_CD,
				OKCASH_SUPP_AMT,
				OKCASH_SUPP_RATE,
				EXTRA_GOODS_YN,
				GIFT_PSSB_YN,
				BUY_CNT_LIMIT_YN,
				MIN_BUY_CNT,
				MAX_BUY_CNT_LIMIT_YN,
				MAX_BUY_CNT,
				STOCK_MGT_USE_YN,
				STOCK_MGT_STRT_YMD,
				STOCK_MGT_END_YMD,
				STOCK_VOLM,
				ADD_STOCK_VOLM,
				STRT_SUPP_YMD,
				SUPP_DSCNTC_STUS_CD,
				SUPP_BGIN_YMD,
				SUPP_END_YMD,
				SUPP_DSCNTC_STRT_YMD,
				SUPP_DSCNTC_END_YMD,
				SUPP_DSCNTC_REASN,
				GOODS_OPTN_APPLY_YN,
				TRDACL_GOODS_YN,
				TRDACL_CNT,
				GOODS_PRSNT_APPLY_YN,
				ERNC_GOODS_PRDLST_CD,
				REG_DATE,
				CHG_DATE,
				REGER_ID,
				CHGER_ID,
				APPR_PROC_CD 
		) VALUES(
				#md_id#,
				#sell_typ_cd#,
				#prdctn_area_cd#,
				#postnet_ctgry_cd#,
				#supp_comp_id#,
				#edps_cd#,
				#suppo_rgist_pocd#,
				#goods_nm#,
				#std#,
				#unit#,
				NVL(#goods_basic_fee#,0),
				NVL(#po_fee_rate#,0),
				#srch_goods_nm#,
				#orgplce_div_cd#,
				#orgplce_dtail_area_choice_yn#,
				#orgplce_dtail_div_cd#,
				#orgplce_dtail_area_cd#,
				#goods_cd#,
				#taxt_div_cd#,
				#buyer_agelimit_cd#,
				NVL(#fix_resrv_goods_yn#,'N'),
				NVL(#ovsea_send_pssb_yn#,'N'),
				NVL(#rgr_goods_yn#,'N'),
				#send_msg_typ_cd#,
				NVL(#wicket_goods_dc_yn#,'N'),
				NVL(#wicket_goods_dc_amt#,0),
				#goods_stus_cd#,
				#goods_desc_kr#,
				NVL(#cnsmr_prc#,0),
				NVL(#std_sell_prc#,0),
				NVL(#dc_apply_prc#,0),
				#dc_apply_strt_ymd# ,
				#dc_apply_end_ymd# ,
				NVL(#basic_dc_set_yn#,'N'),
				#basic_dc_div_cd#,
				NVL(#basic_dc_amt#,0),
				NVL(#basic_dc_rate#,0),
				NVL(#accml_pnt_apply_yn#,'N'),
				#accml_pnt_div_cd#,
				NVL(#accml_pnt_fixamt#,0),
				NVL(#accml_pnt_fixrate#,0),
				NVL(#okcash_supp_yn#,'N'),
				#okcash_supp_div_cd#,
				NVL(#okcash_supp_amt#,0),
				NVL(#okcash_supp_rate#,0),
				NVL(#extra_goods_yn#,0),
				NVL(#gift_pssb_yn#,'N'),
				NVL(#buy_cnt_limit_yn#,'N'),
				NVL(#min_buy_cnt#,0),
				NVL(#max_buy_cnt_limit_yn#,'N'),
				NVL(#max_buy_cnt#,0),
				NVL(#stock_mgt_use_yn#,'Y'),
				#stock_mgt_strt_ymd#,
				#stock_mgt_end_ymd#,
				NVL(#stock_volm#,9999),
				NVL(#add_stock_volm#,9999),
				#strt_supp_ymd#,
				#supp_dscntc_stus_cd#,
				#supp_bgin_ymd#,
				#supp_end_ymd#,
				#supp_dscntc_strt_ymd#,
				#supp_dscntc_end_ymd#,
				#supp_dscntc_reasn#,
				NVL(#goods_optn_apply_yn#,'Y'),
				NVL(#trdacl_goods_yn#,'N'),
				NVL(#trdacl_cnt#,0),
				NVL(#goods_prsnt_apply_yn#,'N'),
				#ernc_goods_prdlst_cd#,
				sysdate,
				sysdate,
				#reger_id#,
				#chger_id#,
				'03'
		)
	</insert>
	<insert id="InsertGoodsMastExcel" parameterClass="java.util.HashMap">
		INSERT INTO GD_GOODS_MAST
		(
				MD_ID,
				SELL_TYP_CD,
				PRDCTN_AREA_CD,
				POSTNET_CTGRY_CD,
				SUPP_COMP_ID,
				EDPS_CD,
				SUPPO_RGIST_POCD,
				GOODS_NM,
				STD,
				UNIT,
				GOODS_BASIC_FEE,
				PO_FEE_RATE,
				SRCH_GOODS_NM,
				ORGPLCE_DIV_CD,
				ORGPLCE_DTAIL_AREA_CHOICE_YN,
				ORGPLCE_DTAIL_DIV_CD,
				ORGPLCE_DTAIL_AREA_CD,
				GOODS_CD,
				TAXT_DIV_CD,
				BUYER_AGELIMIT_CD,
				FIX_RESRV_GOODS_YN,
				OVSEA_SEND_PSSB_YN,
				RGR_GOODS_YN,
				SEND_MSG_TYP_CD,
				WICKET_GOODS_DC_YN,
				WICKET_GOODS_DC_AMT,
				GOODS_STUS_CD,
				GOODS_DESC,
				CNSMR_PRC,
				STD_SELL_PRC,
				DC_APPLY_PRC,
				DC_APPLY_STRT_YMD,
				DC_APPLY_END_YMD,
				BASIC_DC_SET_YN,
				BASIC_DC_DIV_CD,
				BASIC_DC_AMT,
				BASIC_DC_RATE,
				ACCML_PNT_APPLY_YN,
				ACCML_PNT_DIV_CD,
				ACCML_PNT_FIXAMT,
				ACCML_PNT_FIXRATE,
				OKCASH_SUPP_YN,
				OKCASH_SUPP_DIV_CD,
				OKCASH_SUPP_AMT,
				OKCASH_SUPP_RATE,
				EXTRA_GOODS_YN,
				GIFT_PSSB_YN,
				BUY_CNT_LIMIT_YN,
				MIN_BUY_CNT,
				MAX_BUY_CNT_LIMIT_YN,
				MAX_BUY_CNT,
				STOCK_MGT_USE_YN,
				STOCK_MGT_STRT_YMD,
				STOCK_MGT_END_YMD,
				STOCK_VOLM,
				ADD_STOCK_VOLM,
				STRT_SUPP_YMD,
				SUPP_DSCNTC_STUS_CD,
				SUPP_BGIN_YMD,
				SUPP_END_YMD,
				SUPP_DSCNTC_STRT_YMD,
				SUPP_DSCNTC_END_YMD,
				SUPP_DSCNTC_REASN,
				GOODS_OPTN_APPLY_YN,
				TRDACL_GOODS_YN,
				TRDACL_CNT,
				GOODS_PRSNT_APPLY_YN,
				ERNC_GOODS_PRDLST_CD,
				REG_DATE,
				CHG_DATE,
				REGER_ID,
				CHGER_ID,
				APPR_PROC_CD 
		) VALUES(
				#md_id#,
				#sell_typ_cd#,
				#prdctn_area_cd#,
				#postnet_ctgry_cd#,
				#supp_comp_id#,
				#edps_cd#,
				#suppo_rgist_pocd#,
				#goods_nm#,
				#std#,
				#unit#,
				NVL(#goods_basic_fee#,0),
				NVL(#po_fee_rate#,0),
				#srch_goods_nm#,
				#orgplce_div_cd#,
				#orgplce_dtail_area_choice_yn#,
				#orgplce_dtail_div_cd#,
				#orgplce_dtail_area_cd#,
				#goods_cd#,
				#taxt_div_cd#,
				#buyer_agelimit_cd#,
				NVL(#fix_resrv_goods_yn#,'N'),
				NVL(#ovsea_send_pssb_yn#,'N'),
				NVL(#rgr_goods_yn#,'N'),
				#send_msg_typ_cd#,
				NVL(#wicket_goods_dc_yn#,'N'),
				NVL(#wicket_goods_dc_amt#,0),
				#goods_stus_cd#,
				#goods_desc_kr#,
				NVL(#cnsmr_prc#,0),
				NVL(#std_sell_prc#,0),
				NVL(#dc_apply_prc#,0),
				#dc_apply_strt_ymd# ,
				#dc_apply_end_ymd# ,
				NVL(#basic_dc_set_yn#,'N'),
				#basic_dc_div_cd#,
				NVL(#basic_dc_amt#,0),
				NVL(#basic_dc_rate#,0),
				NVL(#accml_pnt_apply_yn#,'N'),
				#accml_pnt_div_cd#,
				NVL(#accml_pnt_fixamt#,0),
				NVL(#accml_pnt_fixrate#,0),
				NVL(#okcash_supp_yn#,'N'),
				#okcash_supp_div_cd#,
				NVL(#okcash_supp_amt#,0),
				NVL(#okcash_supp_rate#,0),
				NVL(#extra_goods_yn#,0),
				NVL(#gift_pssb_yn#,'N'),
				NVL(#buy_cnt_limit_yn#,'N'),
				NVL(#min_buy_cnt#,0),
				NVL(#max_buy_cnt_limit_yn#,'N'),
				NVL(#max_buy_cnt#,0),
				NVL(#stock_mgt_use_yn#,'Y'),
				#stock_mgt_strt_ymd#,
				#stock_mgt_end_ymd#,
				NVL(#stock_volm#,9999),
				NVL(#add_stock_volm#,9999),
				#strt_supp_ymd#,
				#supp_dscntc_stus_cd#,
				#supp_bgin_ymd#,
				#supp_end_ymd#,
				#supp_dscntc_strt_ymd#,
				#supp_dscntc_end_ymd#,
				#supp_dscntc_reasn#,
				NVL(#goods_optn_apply_yn#,'Y'),
				NVL(#trdacl_goods_yn#,'N'),
				NVL(#trdacl_cnt#,0),
				NVL(#goods_prsnt_apply_yn#,'N'),
				#ernc_goods_prdlst_cd#,
				sysdate,
				sysdate,
				#reger_id#,
				#chger_id#,
				'03'
		)
	</insert>
	
	<insert id="InsertGoodsMastHistExcel" parameterClass="java.util.HashMap">
		INSERT INTO GD_GOODS_HISTOR
		(
				MD_ID,
				GOODS_CHG_DATE,
				SELL_TYP_CD,
				PRDCTN_AREA_CD,
				POSTNET_CTGRY_CD,
				SUPP_COMP_ID,
				EDPS_CD,
				SUPPO_RGIST_POCD,
				GOODS_NM,
				STD,
				UNIT,
				GOODS_BASIC_FEE,
				PO_FEE_RATE,
				SRCH_GOODS_NM,
				ORGPLCE_DIV_CD,
				ORGPLCE_DTAIL_AREA_CHOICE_YN,
				ORGPLCE_DTAIL_DIV_CD,
				ORGPLCE_DTAIL_AREA_CD,
				GOODS_CD,
				TAXT_DIV_CD,
				BUYER_AGELIMIT_CD,
				FIX_RESRV_GOODS_YN,
				OVSEA_SEND_PSSB_YN,
				RGR_GOODS_YN,
				SEND_MSG_TYP_CD,
				WICKET_GOODS_DC_YN,
				WICKET_GOODS_DC_AMT,
				GOODS_STUS_CD,
				GOODS_DESC,
				CNSMR_PRC,
				STD_SELL_PRC,
				DC_APPLY_PRC,
				DC_APPLY_STRT_YMD,
				DC_APPLY_END_YMD,
				BASIC_DC_SET_YN,
				BASIC_DC_DIV_CD,
				BASIC_DC_AMT,
				BASIC_DC_RATE,
				ACCML_PNT_APPLY_YN,
				ACCML_PNT_DIV_CD,
				ACCML_PNT_FIXAMT,
				ACCML_PNT_FIXRATE,
				OKCASH_SUPP_YN,
				OKCASH_SUPP_DIV_CD,
				OKCASH_SUPP_AMT,
				OKCASH_SUPP_RATE,
				EXTRA_GOODS_YN,
				GIFT_PSSB_YN,
				BUY_CNT_LIMIT_YN,
				MIN_BUY_CNT,
				MAX_BUY_CNT_LIMIT_YN,
				MAX_BUY_CNT,
				STOCK_MGT_USE_YN,
				STOCK_MGT_STRT_YMD,
				STOCK_MGT_END_YMD,
				STOCK_VOLM,
				ADD_STOCK_VOLM,
				STRT_SUPP_YMD,
				SUPP_DSCNTC_STUS_CD,
				SUPP_BGIN_YMD,
				SUPP_END_YMD,
				SUPP_DSCNTC_STRT_YMD,
				SUPP_DSCNTC_END_YMD,
				SUPP_DSCNTC_REASN,
				GOODS_OPTN_APPLY_YN,
				TRDACL_GOODS_YN,
				TRDACL_CNT,
				GOODS_PRSNT_APPLY_YN,
				ERNC_GOODS_PRDLST_CD,
				REG_DATE,
				CHG_DATE,
				REGER_ID,
				CHGER_ID,
				APPR_PROC_CD 
		) VALUES(
				#md_id#,
				TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS'),
				#sell_typ_cd#,
				#prdctn_area_cd#,
				#postnet_ctgry_cd#,
				#supp_comp_id#,
				#edps_cd#,
				#suppo_rgist_pocd#,
				NVL(#goods_nm#,(SELECT GOODS_NM FROM GD_GOODS_MAST WHERE GOODS_CD =#goods_cd#)),
				#std#,
				#unit#,
				NVL(#goods_basic_fee#,0),
				NVL(#po_fee_rate#,0),
				#srch_goods_nm#,
				#orgplce_div_cd#,
				#orgplce_dtail_area_choice_yn#,
				#orgplce_dtail_div_cd#,
				#orgplce_dtail_area_cd#,
				#goods_cd#,
				#taxt_div_cd#,
				#buyer_agelimit_cd#,
				NVL(#fix_resrv_goods_yn#,'N'),
				NVL(#ovsea_send_pssb_yn#,'N'),
				NVL(#rgr_goods_yn#,'N'),
				#send_msg_typ_cd#,
				NVL(#wicket_goods_dc_yn#,'N'),
				NVL(#wicket_goods_dc_amt#,0),
				#goods_stus_cd#,
				#goods_desc_kr#,
				NVL(#cnsmr_prc#,0),
				NVL(#std_sell_prc#,0),
				NVL(#dc_apply_prc#,0),
				#dc_apply_strt_ymd# ,
				#dc_apply_end_ymd# ,
				NVL(#basic_dc_set_yn#,'N'),
				#basic_dc_div_cd#,
				NVL(#basic_dc_amt#,0),
				NVL(#basic_dc_rate#,0),
				NVL(#accml_pnt_apply_yn#,'N'),
				#accml_pnt_div_cd#,
				NVL(#accml_pnt_fixamt#,0),
				NVL(#accml_pnt_fixrate#,0),
				NVL(#okcash_supp_yn#,'N'),
				#okcash_supp_div_cd#,
				NVL(#okcash_supp_amt#,0),
				NVL(#okcash_supp_rate#,0),
				NVL(#extra_goods_yn#,0),
				NVL(#gift_pssb_yn#,'N'),
				NVL(#buy_cnt_limit_yn#,'N'),
				NVL(#min_buy_cnt#,0),
				NVL(#max_buy_cnt_limit_yn#,'N'),
				NVL(#max_buy_cnt#,0),
				NVL(#stock_mgt_use_yn#,'Y'),
				#stock_mgt_strt_ymd#,
				#stock_mgt_end_ymd#,
				NVL(#stock_volm#,9999),
				NVL(#add_stock_volm#,9999),
				#strt_supp_ymd#,
				#supp_dscntc_stus_cd#,
				#supp_bgin_ymd#,
				#supp_end_ymd#,
				#supp_dscntc_strt_ymd#,
				#supp_dscntc_end_ymd#,
				#supp_dscntc_reasn#,
				NVL(#goods_optn_apply_yn#,'Y'),
				NVL(#trdacl_goods_yn#,'N'),
				NVL(#trdacl_cnt#,0),
				NVL(#goods_prsnt_apply_yn#,'N'),
				#ernc_goods_prdlst_cd#,
				sysdate,
				sysdate,
				#reger_id#,
				#chger_id#,
				'03'
		)
	</insert>
	
	<select id ="selectGoodsCd"  parameterClass ="java.util.HashMap" resultClass="java.util.HashMap">
	select  goods_cd from gd_mgt_goods_mast where goods_cd =#goods_cd#
	</select>
	<!-- 공통코드 조회 -->
	<select id="selectCommCodeByGrpIdSelectBox" parameterClass ="java.util.HashMap" resultClass="comCodeListMap">
	SELECT T2.cd_grp_id
	     , T2.COMN_CD_ID AS value
	     , T2.COMN_CD_NM AS name
	FROM   CM_COMN_CD_GRP T1
      	 , CM_COMN_CD T2
	WHERE 1=1
	AND    T1.CD_GRP_ID = T2.CD_GRP_ID
	AND    T1.CD_GRP_ID = #inputCdGrpId#
	ORDER BY T2.SORT_ORDER ASC
	</select>
	<insert id="insertMgtGoodsDcInfoExcel" parameterClass="java.util.HashMap">
		MERGE INTO GD_MGT_GOODS_DC
			 USING DUAL
				ON (GOODS_CD = #goods_cd# AND DC_TYP_CD = #dc_typ_cd# )
		WHEN MATCHED THEN
			UPDATE
			   SET  CHG_DATE		= SYSDATE
				 , CHGER_ID		= #chger_id#
				 <isNotNull property="dc_apply_yn" prepend=",">
			       DC_APPLY_YN	= #dc_apply_yn#
			     </isNotNull>
			     <isNotNull property="dc_div_cd" prepend=",">
				   DC_DIV_CD	= #dc_div_cd#
				 </isNotNull>
				 <isNotNull property="dc_term_set_yn" prepend=",">
				   DC_TERM_SET_YN = #dc_term_set_yn#
				 </isNotNull>
				 <isNotNull property="fixamt_dc" prepend=",">
				   FIXAMT_DC	= NVL(#fixamt_dc#,0)
				 </isNotNull>
				 <isNotNull property="fixrate_dc" prepend=",">
				   FIXRATE_DC	= NVL(#fixrate_dc#,0)
				 </isNotNull>
				 <isNotNull property="dc_strt_ymd" prepend=",">
				   DC_STRT_YMD	= TO_CHAR(TO_DATE(#dc_strt_ymd#),'YYYYMMDD')
				 </isNotNull>
				 <isNotNull property="dc_end_ymd" prepend=",">
				   DC_END_YMD	= TO_CHAR(TO_DATE(#dc_end_ymd#),'YYYYMMDD')
				 </isNotNull>
				 <isNotNull property="dc_std_cnt" prepend=",">
				   DC_STD_CNT	= NVL(#dc_std_cnt#,0)
				 </isNotNull>

		WHEN NOT MATCHED THEN
			INSERT
				 ( GOODS_CD
				 , GOODS_DC_SEQ
				 , DC_TYP_CD
				 , DC_APPLY_YN
				 , DC_DIV_CD
				 , DC_TERM_SET_YN
				 , FIXAMT_DC
				 , FIXRATE_DC
				 , DC_STRT_YMD
				 , DC_END_YMD
				 , DC_STD_CNT
				 , REG_DATE
				 , CHG_DATE
				 , REGER_ID
				 , CHGER_ID)
		  VALUES
				 ( #goods_cd#
				 , (SELECT NVL(MAX(TO_NUMBER(GOODS_DC_SEQ)), 0) FROM GD_MGT_GOODS_DC WHERE GOODS_CD = #goods_cd#)
				 , #dc_typ_cd#
				 , #dc_apply_yn#
				 , #dc_div_cd#
				 , #dc_term_set_yn#
				 , NVL(#fixamt_dc#,0)
				 , NVL(#fixrate_dc#,0)
				 , TO_CHAR(TO_DATE(#dc_strt_ymd#),'YYYYMMDD')
				 , TO_CHAR(TO_DATE(#dc_end_ymd#),'YYYYMMDD')
				 , NVL(#dc_std_cnt#,0)
				 , SYSDATE
				 , SYSDATE
				 , #reger_id#
				 , #chger_id# )
	</insert>
	<insert id="insertGoodsDcInfoExcel" parameterClass="java.util.HashMap">
		MERGE INTO GD_GOODS_DC
			 USING DUAL
				ON (GOODS_CD = #goods_cd# AND DC_TYP_CD = #dc_typ_cd# )
		WHEN MATCHED THEN
			UPDATE
			   SET  CHG_DATE		= SYSDATE
				 , CHGER_ID		= #chger_id#
				 <isNotNull property="dc_apply_yn" prepend=",">
			       DC_APPLY_YN	= #dc_apply_yn#
			     </isNotNull>
			     <isNotNull property="dc_div_cd" prepend=",">
				   DC_DIV_CD	= #dc_div_cd#
				 </isNotNull>
				 <isNotNull property="dc_term_set_yn" prepend=",">
				   DC_TERM_SET_YN = #dc_term_set_yn#
				 </isNotNull>
				 <isNotNull property="fixamt_dc" prepend=",">
				   FIXAMT_DC	= NVL(#fixamt_dc#,0)
				 </isNotNull>
				 <isNotNull property="fixrate_dc" prepend=",">
				   FIXRATE_DC	= NVL(#fixrate_dc#,0)
				 </isNotNull>
				 <isNotNull property="dc_strt_ymd" prepend=",">
				   DC_STRT_YMD	= TO_CHAR(TO_DATE(#dc_strt_ymd#),'YYYYMMDD')
				 </isNotNull>
				 <isNotNull property="dc_end_ymd" prepend=",">
				   DC_END_YMD	= TO_CHAR(TO_DATE(#dc_end_ymd#),'YYYYMMDD')
				 </isNotNull>
				 <isNotNull property="dc_std_cnt" prepend=",">
				   DC_STD_CNT	= NVL(#dc_std_cnt#,0)
				 </isNotNull>

		WHEN NOT MATCHED THEN
			INSERT
				 ( GOODS_CD
				 , GOODS_DC_SEQ
				 , DC_TYP_CD
				 , DC_APPLY_YN
				 , DC_DIV_CD
				 , DC_TERM_SET_YN
				 , FIXAMT_DC
				 , FIXRATE_DC
				 , DC_STRT_YMD
				 , DC_END_YMD
				 , DC_STD_CNT
				 , REG_DATE
				 , CHG_DATE
				 , REGER_ID
				 , CHGER_ID)
		  VALUES
				 ( #goods_cd#
				 , (SELECT NVL(MAX(TO_NUMBER(GOODS_DC_SEQ)), 0) FROM GD_GOODS_DC WHERE GOODS_CD = #goods_cd#)
				 , #dc_typ_cd#
				 , #dc_apply_yn#
				 , #dc_div_cd#
				 , #dc_term_set_yn#
				 , NVL(#fixamt_dc#,0)
				 , NVL(#fixrate_dc#,0)
				 , TO_CHAR(TO_DATE(#dc_strt_ymd#),'YYYYMMDD')
				 , TO_CHAR(TO_DATE(#dc_end_ymd#),'YYYYMMDD')
				 , NVL(#dc_std_cnt#,0)
				 , SYSDATE
				 , SYSDATE
				 , #reger_id#
				 , #chger_id# )
	</insert>
	<delete id="deleteMgtCrtfcGoodsInfoExcel" parameterClass="java.util.HashMap">
		DELETE FROM GD_MGT_GOODS_CRTFC
		 WHERE GOODS_CD = #goods_cd#
		   AND CRTFCT_ID = #crtfct_id#		   
	</delete>
	<delete id="deleteCrtfcGoodsInfoExcel" parameterClass="java.util.HashMap">
		DELETE FROM GD_GOODS_CRTFC
		 WHERE GOODS_CD = #goods_cd#
		   AND CRTFCT_ID = #crtfct_id#		   
	</delete>
	<!-- 카테고리 관리 하단 상품출력 관련 전체 상품 검색용 (테스트용)-->
	<select id="selectCategoryGoodsList"  resultClass="commMap" parameterClass="java.util.HashMap">
		 /** SQL_ID : selectCategoryGoodsList**/

		SELECT *
		  FROM (SELECT ROW_NUMBER() OVER(ORDER BY(
		               CASE #sort#
		                 WHEN '1' THEN         /**누적판매순위**/
		                  ORDERCNT
		                 WHEN '2' THEN         /**평가높은순**/
		                  GOODS_REVIEW_SCOR
		                 WHEN '3' THEN         /**후기많은순**/
		                  GOODS_REVIEW_CNT
		                 WHEN '5' THEN         /**높은가격순**/
		                  CNSMR_PRC
		               END) DESC
		               ,(CASE #sort#
		                 WHEN '4' THEN         /**낮은가격순**/
		                  CNSMR_PRC
		               END) ASC) RNUM
		              ,X.*
		          FROM (SELECT GOODS_CD /**상품코드**/
		                      ,GOODS_NM /**상품명**/
		                      ,SUPP_COMP_ID /**공급업체ID**/
		                      ,CNSMR_PRC /**소비자가**/
		                      ,STD_SELL_PRC /**기준 판매 가 **/
		                      ,DC_APPLY_PRC /**할인 적용 가 **/
		                      ,TO_NUMBER(SUBSTR(GDREVIEWINFO, 0, 10)) GOODS_REVIEW_CNT /**후기수**/
		                      ,TO_NUMBER(SUBSTR(GDREVIEWINFO, 11, 10)) GOODS_REVIEW_SCOR /**평가점수 **/
		                      ,BCNC_NM /**공급업체명**/
		                      ,ORDERCNT /**누적판매순위**/
		                  FROM (

		                        SELECT A.GOODS_CD
		                               ,A.GOODS_NM
		                               ,A.SUPP_COMP_ID
		                               ,A.CNSMR_PRC
		                               ,A.STD_SELL_PRC
		                               ,A.DC_APPLY_PRC
		                               ,(SELECT GDREVIEWINFO
		                                   FROM (SELECT LPAD(COUNT(*), 10, '0') ||
		                                                LPAD(NVL(SUM(QUALITY_SCOR), 0), 10, '0') GDREVIEWINFO
		                                               ,GOODS_CD
		                                           FROM GD_GOODS_EVL
		                                          GROUP BY GOODS_CD) C
		                                  WHERE A.GOODS_CD = C.GOODS_CD) GDREVIEWINFO
		                               ,(SELECT BCNC_NM
		                                   FROM CO_SUPP_COMP_MAST B
		                                  WHERE A.SUPP_COMP_ID = B.SUPP_COMP_ID) BCNC_NM
		                               ,(SELECT CNT
		                                   FROM (SELECT COUNT(*) CNT, GOODS_CD
		                                           FROM OD_ORDER_ITM
		                                          WHERE ORDER_DTAIL_STUS_CD = 'D05' /** D05:배송완료 **/
		                                          GROUP BY GOODS_CD) D
		                                  WHERE D.GOODS_CD = A.GOODS_CD) ORDERCNT
		                          FROM GD_GOODS_MAST A
		                        )
		               ) X
		        )
		 WHERE RNUM <![CDATA[<=]]> 5

	</select>
	<!-- 카테고리 관리 하단 상품출력 관련 선택한 카테고리 검색용(향후 실제로 사용될 쿼리.. 위쪽 쿼리는 삭제 예정)-->
	<select id="selectCategoryGoodsList1111"  resultClass="commMap" parameterClass="java.util.HashMap">
		 /** SQL_ID : selectCategoryGoodsList**/

		SELECT *
		  FROM (SELECT ROW_NUMBER() OVER(ORDER BY(
		               CASE #sort#
		                 WHEN '1' THEN         /**누적판매순위**/
		                  ORDERCNT
		                 WHEN '2' THEN         /**평가높은순**/
		                  GOODS_REVIEW_SCOR
		                 WHEN '3' THEN         /**후기많은순**/
		                  GOODS_REVIEW_CNT
		                 WHEN '5' THEN         /**높은가격순**/
		                  CNSMR_PRC
		               END) DESC
		               ,(CASE #sort#
		                 WHEN '4' THEN         /**낮은가격순**/
		                  CNSMR_PRC
		               END) ASC) RNUM
		              ,X.*
		          FROM (SELECT GOODS_CD /**상품코드**/
		                      ,GOODS_NM /**상품명**/
		                      ,SUPP_COMP_ID /**공급업체ID**/
		                      ,CNSMR_PRC /**소비자가**/
		                      ,STD_SELL_PRC /**기준 판매 가 **/
		                      ,DC_APPLY_PRC /**할인 적용 가 **/
		                      ,TO_NUMBER(SUBSTR(GDREVIEWINFO, 0, 10)) GOODS_REVIEW_CNT /**후기수**/
		                      ,TO_NUMBER(SUBSTR(GDREVIEWINFO, 11, 10)) GOODS_REVIEW_SCOR /**평가점수 **/
		                      ,BCNC_NM /**공급업체명**/
		                      ,ORDERCNT /**누적판매순위**/
		                  FROM (

		                        SELECT A.GOODS_CD
		                               ,A.GOODS_NM
		                               ,A.SUPP_COMP_ID
		                               ,A.CNSMR_PRC
		                               ,A.STD_SELL_PRC
		                               ,A.DC_APPLY_PRC
		                               ,(SELECT GDREVIEWINFO
		                                   FROM (SELECT LPAD(COUNT(*), 10, '0') ||
		                                                LPAD(NVL(SUM(QUALITY_SCOR), 0), 10, '0') GDREVIEWINFO
		                                               ,GOODS_CD
		                                           FROM GD_GOODS_EVL
		                                          GROUP BY GOODS_CD) C
		                                  WHERE A.GOODS_CD = C.GOODS_CD) GDREVIEWINFO
		                               ,(SELECT BCNC_NM
		                                   FROM CO_SUPP_COMP_MAST B
		                                  WHERE A.SUPP_COMP_ID = B.SUPP_COMP_ID) BCNC_NM
		                               ,(SELECT CNT
		                                   FROM (SELECT COUNT(*) CNT, GOODS_CD
		                                           FROM OD_ORDER_ITM
		                                          WHERE ORDER_DTAIL_STUS_CD = 'D05' /** D05:배송완료 **/
		                                          GROUP BY GOODS_CD) D
		                                  WHERE D.GOODS_CD = A.GOODS_CD) ORDERCNT
		                          FROM GD_GOODS_MAST A
		                          WHERE EXISTS
				                         (SELECT *
				                                  FROM (SELECT B.GOODS_CD
				                                          FROM (SELECT CTGRY_CD, PAVLN_DIV_CD
				                                                  FROM GD_CTGRY_MAST
				                                                 WHERE CTGRY_CD LIKE 'MALL%'
				                                                   AND PAVLN_DIV_CD = #pavln_div_cd#) A
				                                         INNER JOIN (SELECT CTGRY_CD, GOODS_CD
				                                                      FROM GD_GOODS_CTGRY
				                                                     WHERE USE_YN = 'Y'
				                                                       AND CTGRY_CD = CASE
				                                                             WHEN #ctgry_cd# IS NULL OR
				                                                                  #ctgry_cd# = '' THEN
				                                                              CTGRY_CD
				                                                             ELSE
				                                                              #ctgry_cd#
				                                                           END) B
				                                            ON A.CTGRY_CD = B.CTGRY_CD) GC
				                                 WHERE GC. GOODS_CD = A.GOODS_CD)
		                        )
		               ) X
		        )
		 WHERE RNUM <![CDATA[<=]]> 5

	</select>

	<update id="updateMgtMasterStockVol" parameterClass="java.util.HashMap">
	UPDATE GD_MGT_GOODS_MAST SET STOCK_VOLM = #stock_volm#
	 	WHERE GOODS_CD = #goods_cd#
	</update>
	<update id="updateMasterStockVol" parameterClass="java.util.HashMap">
	UPDATE GD_GOODS_MAST SET STOCK_VOLM = #stock_volm#
	 	WHERE GOODS_CD = #goods_cd#
	</update>
	<delete id ="deleteMgtGoodsOptnGrpInfoExcel" parameterClass="java.util.HashMap">
		DELETE FROM GD_MGT_GOODS_OPTN_GRP WHERE GOODS_CD = #goods_cd#
	</delete>
	<delete id ="deleteGoodsOptnGrpInfoExcel" parameterClass="java.util.HashMap">
		DELETE FROM GD_GOODS_OPTN_GRP WHERE GOODS_CD = #goods_cd#
	</delete>

	<insert id="insertMgtGoodsCrtfcInfoExcel" parameterClass="java.util.HashMap">
		MERGE INTO GD_MGT_GOODS_CRTFC
			 USING DUAL
				ON (CRTFCT_ID = #crtfct_id#
				    AND CRTFCT_SEQ = (SELECT MAX(TO_NUMBER(CRTFCT_SEQ))
				    					FROM GD_MGT_GOODS_CRTFC
				    				  WHERE GOODS_CD = #goods_cd# AND CRTFCT_ID = #crtfct_id#)
				    AND GOODS_CD = #goods_cd# )
		WHEN MATCHED THEN
			UPDATE SET
				   USE_YN		= 'Y'
				 <isNotNull property="crtfct_no" prepend=",">
				  CRTFCT_NO	= #crtfct_no#
				 </isNotNull>
				 <isNotNull property="vld_term_strt_ymd" prepend=",">
				  VLD_TERM_STRT_YMD = TO_CHAR(TO_DATE(#vld_term_strt_ymd#),'YYYYMMDD')
				 </isNotNull>
				 <isNotNull property="vld_term_end_ymd" prepend=",">
				  VLD_TERM_END_YMD	= TO_CHAR(TO_DATE(#vld_term_end_ymd#),'YYYYMMDD')
				 </isNotNull>
				 , REG_DATE		= SYSDATE
		         , CHG_DATE		= SYSDATE
		         , REGER_ID		= #reger_id#
		         , CHGER_ID		= #chger_id#
		WHEN NOT MATCHED THEN
			INSERT
				 ( GOODS_CD
				 , CRTFCT_ID
				 , CRTFCT_SEQ
				 , CRTFCT_NO
				 , VLD_TERM_STRT_YMD
				 , VLD_TERM_END_YMD
				 , USE_YN
				 , REG_DATE
				 , CHG_DATE
				 , REGER_ID
				 , CHGER_ID )
		  VALUES ( #goods_cd#
				 , #crtfct_id#
				 , (SELECT NVL(MAX(TO_NUMBER(CRTFCT_SEQ))+1, 1) FROM GD_MGT_GOODS_CRTFC WHERE GOODS_CD = #goods_cd# AND CRTFCT_ID = #crtfct_id#)
				 , #crtfct_no#
				 , TO_CHAR(TO_DATE(#vld_term_strt_ymd#),'YYYYMMDD')
				 , TO_CHAR(TO_DATE(#vld_term_end_ymd#),'YYYYMMDD')
				 , 'Y'
				 , SYSDATE
				 , SYSDATE
				 , #reger_id#
				 , #chger_id# )
	</insert>
	
	<insert id="insertGoodsCrtfcInfoExcel" parameterClass="java.util.HashMap">
		MERGE INTO GD_GOODS_CRTFC
			 USING DUAL
				ON (CRTFCT_ID = #crtfct_id#
				    AND CRTFCT_SEQ = (SELECT MAX(TO_NUMBER(CRTFCT_SEQ))
				    					FROM GD_GOODS_CRTFC
				    				  WHERE GOODS_CD = #goods_cd# AND CRTFCT_ID = #crtfct_id#)
				    AND GOODS_CD = #goods_cd# )
		WHEN MATCHED THEN
			UPDATE SET
				   USE_YN		= 'Y'
				 <isNotNull property="crtfct_no" prepend=",">
				  CRTFCT_NO	= #crtfct_no#
				 </isNotNull>
				 <isNotNull property="vld_term_strt_ymd" prepend=",">
				  VLD_TERM_STRT_YMD = TO_CHAR(TO_DATE(#vld_term_strt_ymd#),'YYYYMMDD')
				 </isNotNull>
				 <isNotNull property="vld_term_end_ymd" prepend=",">
				  VLD_TERM_END_YMD	= TO_CHAR(TO_DATE(#vld_term_end_ymd#),'YYYYMMDD')
				 </isNotNull>
				 , REG_DATE		= SYSDATE
		         , CHG_DATE		= SYSDATE
		         , REGER_ID		= #reger_id#
		         , CHGER_ID		= #chger_id#
		WHEN NOT MATCHED THEN
			INSERT
				 ( GOODS_CD
				 , CRTFCT_ID
				 , CRTFCT_SEQ
				 , CRTFCT_NO
				 , VLD_TERM_STRT_YMD
				 , VLD_TERM_END_YMD
				 , USE_YN
				 , REG_DATE
				 , CHG_DATE
				 , REGER_ID
				 , CHGER_ID )
		  VALUES ( #goods_cd#
				 , #crtfct_id#
				 , (SELECT NVL(MAX(TO_NUMBER(CRTFCT_SEQ))+1, 1) FROM GD_GOODS_CRTFC WHERE GOODS_CD = #goods_cd# AND CRTFCT_ID = #crtfct_id#)
				 , #crtfct_no#
				 , TO_CHAR(TO_DATE(#vld_term_strt_ymd#),'YYYYMMDD')
				 , TO_CHAR(TO_DATE(#vld_term_end_ymd#),'YYYYMMDD')
				 , 'Y'
				 , SYSDATE
				 , SYSDATE
				 , #reger_id#
				 , #chger_id# )
	</insert>

	<insert id="insertMgtGoodsOptnGrpInfoExcel" parameterClass="java.util.HashMap">
		MERGE INTO GD_MGT_GOODS_OPTN_GRP
			 USING DUAL
				ON (GOODS_CD = #goods_cd# AND
				GOODS_OPTN_GRP_SEQ = (SELECT MAX(GOODS_OPTN_GRP_SEQ)
										FROM GD_MGT_GOODS_OPTN_GRP WHERE
									  GOODS_CD = #goods_cd# )  )
		WHEN MATCHED THEN
			UPDATE SET  USE_YN			 = 'Y'
				 	, CHG_DATE			 = SYSDATE
				 	, CHGER_ID			 = #chger_id#
			    <isNotNull property="goods_optn_grp_nm" prepend=",">
				   GOODS_OPTN_GRP_NM = #goods_optn_grp_nm#
				</isNotNull>
				<isNotNull property="essn_choice_yn" prepend=",">
				   ESSN_CHOICE_YN	 = #essn_choice_yn#
				</isNotNull>
				<isNotNull property="hrnk_optn_grp_seq" prepend=",">
				   HRNK_OPTN_GRP_SEQ = #hrnk_optn_grp_seq#
				</isNotNull>
	 	WHEN NOT MATCHED THEN
			INSERT
				 ( GOODS_CD
				 , GOODS_OPTN_GRP_SEQ
				 , GOODS_OPTN_GRP_NM
				 , ESSN_CHOICE_YN
				 , HRNK_OPTN_GRP_SEQ
				 , USE_YN
				 , REG_DATE
				 , CHG_DATE
				 , REGER_ID
				 , CHGER_ID )
		  VALUES ( #goods_cd#
				 , 1
				 , #goods_optn_grp_nm#
				 , #essn_choice_yn#
				 , #hrnk_optn_grp_seq#
				 , 'Y'
				 , SYSDATE
				 , SYSDATE
				 , #reger_id#
				 , #chger_id# )
	</insert>

    <insert id="insertGoodsOptnGrpInfoExcel" parameterClass="java.util.HashMap">
		MERGE INTO GD_GOODS_OPTN_GRP
			 USING DUAL
				ON (GOODS_CD = #goods_cd# AND
				GOODS_OPTN_GRP_SEQ = (SELECT MAX(GOODS_OPTN_GRP_SEQ)
										FROM GD_GOODS_OPTN_GRP WHERE
									  GOODS_CD = #goods_cd# )  )
		WHEN MATCHED THEN
			UPDATE SET  USE_YN			 = 'Y'
				 	, CHG_DATE			 = SYSDATE
				 	, CHGER_ID			 = #chger_id#
			    <isNotNull property="goods_optn_grp_nm" prepend=",">
				   GOODS_OPTN_GRP_NM = #goods_optn_grp_nm#
				</isNotNull>
				<isNotNull property="essn_choice_yn" prepend=",">
				   ESSN_CHOICE_YN	 = #essn_choice_yn#
				</isNotNull>
				<isNotNull property="hrnk_optn_grp_seq" prepend=",">
				   HRNK_OPTN_GRP_SEQ = #hrnk_optn_grp_seq#
				</isNotNull>
	 	WHEN NOT MATCHED THEN
			INSERT
				 ( GOODS_CD
				 , GOODS_OPTN_GRP_SEQ
				 , GOODS_OPTN_GRP_NM
				 , ESSN_CHOICE_YN
				 , HRNK_OPTN_GRP_SEQ
				 , USE_YN
				 , REG_DATE
				 , CHG_DATE
				 , REGER_ID
				 , CHGER_ID )
		  VALUES ( #goods_cd#
				 , 1
				 , #goods_optn_grp_nm#
				 , #essn_choice_yn#
				 , #hrnk_optn_grp_seq#
				 , 'Y'
				 , SYSDATE
				 , SYSDATE
				 , #reger_id#
				 , #chger_id# )
	</insert>
<!-- 	<insert id="insertGoodsLangInfoExcel" parameterClass="java.util.HashMap"> -->
<!-- 		MERGE INTO GD_MGT_GOODS_MLANG_SPRT -->
<!-- 			 USING DUAL -->
<!-- 				ON (LANG_CD = #lang_cd# AND GOODS_CD = #goods_cd#) -->
<!-- 		WHEN MATCHED THEN -->
<!-- 			UPDATE -->
<!-- 			   SET  CHG_DATE		= SYSDATE -->
<!-- 				   ,CHGER_ID		= #chger_id# -->
<!-- 			   <isNotNull property="goods_nm" prepend=","> -->
<!-- 			       GOODS_NM		= #goods_nm# -->
<!-- 			   </isNotNull> -->
<!-- 			   <isNotNull property="goods_desc" prepend=","> -->
<!-- 				   GOODS_DESC	= #goods_desc# -->
<!-- 			   </isNotNull> -->
<!-- 			   <isNotNull property="std" prepend=","> -->
<!-- 				   STD			= #std# -->
<!-- 			   </isNotNull> -->
<!-- 		WHEN NOT MATCHED THEN -->
<!-- 			INSERT -->
<!-- 				 ( GOODS_CD -->
<!-- 				 , LANG_CD -->
<!-- 				 , GOODS_NM -->
<!-- 				 , GOODS_DESC -->
<!-- 				 , STD -->
<!-- 				 , REG_DATE -->
<!-- 				 , CHG_DATE -->
<!-- 				 , REGER_ID -->
<!-- 				 , CHGER_ID ) -->
<!-- 		  VALUES ( #goods_cd# -->
<!-- 				 , #lang_cd# -->
<!-- 				 , #goods_nm# -->
<!-- 				 , #goods_desc# -->
<!-- 				 , #std# -->
<!-- 				 , SYSDATE -->
<!-- 				 , SYSDATE -->
<!-- 				 , #reger_id# -->
<!-- 				 , #chger_id# ) -->
<!-- 	</insert> -->

	<insert id="insertMgtGoodsLangInfoExcel" parameterClass="java.util.HashMap">
		INSERT INTO GD_MGT_GOODS_MLANG_SPRT
			 ( GOODS_CD
			 , LANG_CD
			 , GOODS_NM
			 , GOODS_DESC
			 , STD
			 , REG_DATE
			 , CHG_DATE
			 , REGER_ID
			 , CHGER_ID )
	  	VALUES
	  	     ( #goods_cd#
			 , #lang_cd#
			 , #goods_nm#
			 , #goods_desc#
			 , #std#
			 , SYSDATE
			 , SYSDATE
			 , #reger_id#
			 , #chger_id# )
	</insert>
	
	<insert id="insertGoodsLangInfoExcel" parameterClass="java.util.HashMap">
		INSERT INTO GD_GOODS_MLANG_SPRT
			 ( GOODS_CD
			 , LANG_CD
			 , GOODS_NM
			 , GOODS_DESC
			 , STD
			 , REG_DATE
			 , CHG_DATE
			 , REGER_ID
			 , CHGER_ID )
	  	VALUES
	  	     ( #goods_cd#
			 , #lang_cd#
			 , #goods_nm#
			 , #goods_desc#
			 , #std#
			 , SYSDATE
			 , SYSDATE
			 , #reger_id#
			 , #chger_id# )
	</insert>

	<insert id="updateMgtGoodsLangInfoExcel" parameterClass="java.util.HashMap">
		UPDATE  GD_MGT_GOODS_MLANG_SPRT
		   SET  CHG_DATE		= SYSDATE
			   ,CHGER_ID		= #chger_id#
		   <isNotNull property="goods_nm" prepend=",">
		       GOODS_NM		= #goods_nm#
		   </isNotNull>
		   <isNotNull property="goods_desc" prepend=",">
			   GOODS_DESC	= #goods_desc#
		   </isNotNull>
		   <isNotNull property="std" prepend=",">
			   STD			= #std#
		   </isNotNull>
		WHERE  LANG_CD = #lang_cd#
		AND    GOODS_CD = #goods_cd#
	</insert>
	
	<insert id="updateGoodsLangInfoExcel" parameterClass="java.util.HashMap">
		UPDATE  GD_GOODS_MLANG_SPRT
		   SET  CHG_DATE		= SYSDATE
			   ,CHGER_ID		= #chger_id#
		   <isNotNull property="goods_nm" prepend=",">
		       GOODS_NM		= #goods_nm#
		   </isNotNull>
		   <isNotNull property="goods_desc" prepend=",">
			   GOODS_DESC	= #goods_desc#
		   </isNotNull>
		   <isNotNull property="std" prepend=",">
			   STD			= #std#
		   </isNotNull>
		WHERE  LANG_CD = #lang_cd#
		AND    GOODS_CD = #goods_cd#
	</insert>

	<insert id="insertMgtGoodsSendInfoExcel" parameterClass="java.util.HashMap">
		MERGE INTO GD_MGT_GOODS_SEND
			 USING DUAL
				ON ( GOODS_CD = #goods_cd# )
		WHEN MATCHED THEN
			UPDATE
			   SET CHG_DATE						= SYSDATE
				 , CHGER_ID						= #chger_id#
				  <isNotNull property="send_pssb_area_cd" prepend=",">
			   	   SEND_PSSB_AREA_CD			= #send_pssb_area_cd#
			   	  </isNotNull>
			   	  <isNotNull property="send_pssb_area_dtail_cd" prepend=",">
				   SEND_PSSB_AREA_DTAIL_CD		= #send_pssb_area_dtail_cd#
				  </isNotNull>
				  <isNotNull property="send_meth_div_cd" prepend=",">
				   SEND_METH_DIV_CD				= #send_meth_div_cd#
				  </isNotNull>
				  <isNotNull property="send_meth_dtail_cd" prepend=",">
				   SEND_METH_DTAIL_CD			= #send_meth_dtail_cd#
				  </isNotNull>
				  <isNotNull property="visit_recpt_yn" prepend=",">
				    VISIT_RECPT_YN				= #visit_recpt_yn#
				  </isNotNull>
				  <isNotNull property="outware_addr" prepend=",">
				    OUTWARE_ADDR					= #outware_addr#
				  </isNotNull>
				  <isNotNull property="retrngd_exchg_addr" prepend=",">
				   RETRNGD_EXCHG_ADDR			= #retrngd_exchg_addr#
				  </isNotNull>
				  <isNotNull property="sendnon_div_cd" prepend=",">
				   SENDNON_DIV_CD				= #sendnon_div_cd#
				  </isNotNull>
				  <isNotNull property="sendnon" prepend=",">
				   SENDNON						= NVL(#sendnon#,0)
				 </isNotNull>
				  <isNotNull property="sendnon_lwest_buy_prc" prepend=",">
				   SENDNON_LWEST_BUY_PRC		= NVL(#sendnon_lwest_buy_prc#,0)
				 </isNotNull>
				 <isNotNull property="sendnon_max_buy_prc" prepend=",">
				   SENDNON_MAX_BUY_PRC			= NVL(#sendnon_max_buy_prc#,0)
				 </isNotNull>
				 <isNotNull property="bundsend_div_yn" prepend=",">
				   BUNDSEND_DIV_YN				= #bundsend_div_yn#
				 </isNotNull>
				  <isNotNull property="sendnon_add_div_cd" prepend=",">
				   SENDNON_ADD_DIV_CD			= #sendnon_add_div_cd#
				  </isNotNull>
				  <isNotNull property="setl_meth_div_cd" prepend=",">
				   SETL_METH_DIV_CD				= #setl_meth_div_cd#
				 </isNotNull>
				  <isNotNull property="idsrts_add_sendnon_set_yn" prepend=",">
				   IDSRTS_ADD_SENDNON_SET_YN	= NVL(#idsrts_add_sendnon_set_yn#,'N')
				 </isNotNull>
				  <isNotNull property="jeju_sendnon" prepend=",">
				   JEJU_SENDNON					= NVL(#jeju_sendnon#,0)
				 </isNotNull>
				 <isNotNull property="idsrts_sendnon" prepend=",">
				   IDSRTS_SENDNON				= NVL(#idsrts_sendnon#,0)
				 </isNotNull>
				 <isNotNull property="send_add_set_yn" prepend=",">
				   SEND_ADD_SET_YN				= NVL(#send_add_set_yn#,'N')
				 </isNotNull>
				 <isNotNull property="unit_wght" prepend=",">
				   WGHT							= NVL(#unit_wght#,0)
				 </isNotNull>
				 <isNotNull property="unit_volm" prepend=",">
				   VOLM							= NVL(#unit_volm#,0)
				 </isNotNull>
				 <isNotNull property="ovsea_kind_div_cd" prepend=",">
				   OVSEA_KIND_DIV_CD			= #ovsea_kind_div_cd#
				 </isNotNull>
				 <isNotNull property="ovsea_exp_div_cd" prepend=",">
				   OVSEA_EXP_DIV_CD				= #ovsea_exp_div_cd#
				 </isNotNull>
				  <isNotNull property="prcl_inmatl_nm" prepend=",">
				   PRCL_INMATL_NM				= #prcl_inmatl_nm#
				 </isNotNull>
				 <isNotNull property="sendlimit_atpn" prepend=",">
				   SENDLIMIT_ATPN				= #sendlimit_atpn#
				 </isNotNull>
				 <isNotNull property="templ_stre_yn" prepend=",">
				   TEMPL_STRE_YN				= #templ_stre_yn#
				 </isNotNull>
				  <isNotNull property="templ_nm" prepend=",">
				   TEMPL_NM						= #templ_nm#
				 </isNotNull>
		WHEN NOT MATCHED THEN
			INSERT
				 ( GOODS_CD
				 , SEND_PSSB_AREA_CD
				 , SEND_PSSB_AREA_DTAIL_CD
				 , SEND_METH_DIV_CD
				 , SEND_METH_DTAIL_CD
				 , VISIT_RECPT_YN
				 , OUTWARE_ADDR
				 , RETRNGD_EXCHG_ADDR
				 , SENDNON_DIV_CD
				 , SENDNON
				 , SENDNON_LWEST_BUY_PRC
				 , SENDNON_MAX_BUY_PRC
				 , BUNDSEND_DIV_YN
				 , SENDNON_ADD_DIV_CD
				 , SETL_METH_DIV_CD
				 , IDSRTS_ADD_SENDNON_SET_YN
				 , JEJU_SENDNON
				 , IDSRTS_SENDNON
				 , SEND_ADD_SET_YN
				 , WGHT
				 , VOLM
				 , OVSEA_KIND_DIV_CD
				 , OVSEA_EXP_DIV_CD
				 , PRCL_INMATL_NM
				 , SENDLIMIT_ATPN
				 , TEMPL_STRE_YN
				 , TEMPL_NM
				 , REG_DATE
				 , CHG_DATE
				 , REGER_ID
				 , CHGER_ID )
		  VALUES
				 ( #goods_cd#
				 , #send_pssb_area_cd#
				 , #send_pssb_area_dtail_cd#
				 , #send_meth_div_cd#
				 , #send_meth_dtail_cd#
				 , #visit_recpt_yn#
				 , #outware_addr#
				 , #retrngd_exchg_addr#
				 , #sendnon_div_cd#
				 , #sendnon#
				 , #sendnon_lwest_buy_prc#
				 , #sendnon_max_buy_prc#
				 , #bundsend_div_yn#
				 , #sendnon_add_div_cd#
				 , #setl_meth_div_cd#
				 , #idsrts_add_sendnon_set_yn#
				 , #jeju_sendnon#
				 , #idsrts_sendnon#
				 , #send_add_set_yn#
				 , #unit_wght#
				 , #unit_volm#
				 , #ovsea_kind_div_cd#
				 , #ovsea_exp_div_cd#
				 , #prcl_inmatl_nm#
				 , #sendlimit_atpn#
				 , #templ_stre_yn#
				 , #templ_nm#
				 , SYSDATE
				 , SYSDATE
				 , #reger_id#
				 , #chger_id# )
	</insert>
	
	<insert id="insertGoodsSendInfoExcel" parameterClass="java.util.HashMap">
		MERGE INTO GD_GOODS_SEND
			 USING DUAL
				ON ( GOODS_CD = #goods_cd# )
		WHEN MATCHED THEN
			UPDATE
			   SET CHG_DATE						= SYSDATE
				 , CHGER_ID						= #chger_id#
				  <isNotNull property="send_pssb_area_cd" prepend=",">
			   	   SEND_PSSB_AREA_CD			= #send_pssb_area_cd#
			   	  </isNotNull>
			   	  <isNotNull property="send_pssb_area_dtail_cd" prepend=",">
				   SEND_PSSB_AREA_DTAIL_CD		= #send_pssb_area_dtail_cd#
				  </isNotNull>
				  <isNotNull property="send_meth_div_cd" prepend=",">
				   SEND_METH_DIV_CD				= #send_meth_div_cd#
				  </isNotNull>
				  <isNotNull property="send_meth_dtail_cd" prepend=",">
				   SEND_METH_DTAIL_CD			= #send_meth_dtail_cd#
				  </isNotNull>
				  <isNotNull property="visit_recpt_yn" prepend=",">
				    VISIT_RECPT_YN				= #visit_recpt_yn#
				  </isNotNull>
				  <isNotNull property="outware_addr" prepend=",">
				    OUTWARE_ADDR					= #outware_addr#
				  </isNotNull>
				  <isNotNull property="retrngd_exchg_addr" prepend=",">
				   RETRNGD_EXCHG_ADDR			= #retrngd_exchg_addr#
				  </isNotNull>
				  <isNotNull property="sendnon_div_cd" prepend=",">
				   SENDNON_DIV_CD				= #sendnon_div_cd#
				  </isNotNull>
				  <isNotNull property="sendnon" prepend=",">
				   SENDNON						= NVL(#sendnon#,0)
				 </isNotNull>
				  <isNotNull property="sendnon_lwest_buy_prc" prepend=",">
				   SENDNON_LWEST_BUY_PRC		= NVL(#sendnon_lwest_buy_prc#,0)
				 </isNotNull>
				 <isNotNull property="sendnon_max_buy_prc" prepend=",">
				   SENDNON_MAX_BUY_PRC			= NVL(#sendnon_max_buy_prc#,0)
				 </isNotNull>
				 <isNotNull property="bundsend_div_yn" prepend=",">
				   BUNDSEND_DIV_YN				= #bundsend_div_yn#
				 </isNotNull>
				  <isNotNull property="sendnon_add_div_cd" prepend=",">
				   SENDNON_ADD_DIV_CD			= #sendnon_add_div_cd#
				  </isNotNull>
				  <isNotNull property="setl_meth_div_cd" prepend=",">
				   SETL_METH_DIV_CD				= #setl_meth_div_cd#
				 </isNotNull>
				  <isNotNull property="idsrts_add_sendnon_set_yn" prepend=",">
				   IDSRTS_ADD_SENDNON_SET_YN	= NVL(#idsrts_add_sendnon_set_yn#,'N')
				 </isNotNull>
				  <isNotNull property="jeju_sendnon" prepend=",">
				   JEJU_SENDNON					= NVL(#jeju_sendnon#,0)
				 </isNotNull>
				 <isNotNull property="idsrts_sendnon" prepend=",">
				   IDSRTS_SENDNON				= NVL(#idsrts_sendnon#,0)
				 </isNotNull>
				 <isNotNull property="send_add_set_yn" prepend=",">
				   SEND_ADD_SET_YN				= NVL(#send_add_set_yn#,'N')
				 </isNotNull>
				 <isNotNull property="unit_wght" prepend=",">
				   WGHT							= NVL(#unit_wght#,0)
				 </isNotNull>
				 <isNotNull property="unit_volm" prepend=",">
				   VOLM							= NVL(#unit_volm#,0)
				 </isNotNull>
				 <isNotNull property="ovsea_kind_div_cd" prepend=",">
				   OVSEA_KIND_DIV_CD			= #ovsea_kind_div_cd#
				 </isNotNull>
				 <isNotNull property="ovsea_exp_div_cd" prepend=",">
				   OVSEA_EXP_DIV_CD				= #ovsea_exp_div_cd#
				 </isNotNull>
				  <isNotNull property="prcl_inmatl_nm" prepend=",">
				   PRCL_INMATL_NM				= #prcl_inmatl_nm#
				 </isNotNull>
				 <isNotNull property="sendlimit_atpn" prepend=",">
				   SENDLIMIT_ATPN				= #sendlimit_atpn#
				 </isNotNull>
				 <isNotNull property="templ_stre_yn" prepend=",">
				   TEMPL_STRE_YN				= #templ_stre_yn#
				 </isNotNull>
				  <isNotNull property="templ_nm" prepend=",">
				   TEMPL_NM						= #templ_nm#
				 </isNotNull>
		WHEN NOT MATCHED THEN
			INSERT
				 ( GOODS_CD
				 , SEND_PSSB_AREA_CD
				 , SEND_PSSB_AREA_DTAIL_CD
				 , SEND_METH_DIV_CD
				 , SEND_METH_DTAIL_CD
				 , VISIT_RECPT_YN
				 , OUTWARE_ADDR
				 , RETRNGD_EXCHG_ADDR
				 , SENDNON_DIV_CD
				 , SENDNON
				 , SENDNON_LWEST_BUY_PRC
				 , SENDNON_MAX_BUY_PRC
				 , BUNDSEND_DIV_YN
				 , SENDNON_ADD_DIV_CD
				 , SETL_METH_DIV_CD
				 , IDSRTS_ADD_SENDNON_SET_YN
				 , JEJU_SENDNON
				 , IDSRTS_SENDNON
				 , SEND_ADD_SET_YN
				 , WGHT
				 , VOLM
				 , OVSEA_KIND_DIV_CD
				 , OVSEA_EXP_DIV_CD
				 , PRCL_INMATL_NM
				 , SENDLIMIT_ATPN
				 , TEMPL_STRE_YN
				 , TEMPL_NM
				 , REG_DATE
				 , CHG_DATE
				 , REGER_ID
				 , CHGER_ID )
		  VALUES
				 ( #goods_cd#
				 , #send_pssb_area_cd#
				 , #send_pssb_area_dtail_cd#
				 , #send_meth_div_cd#
				 , #send_meth_dtail_cd#
				 , #visit_recpt_yn#
				 , #outware_addr#
				 , #retrngd_exchg_addr#
				 , #sendnon_div_cd#
				 , #sendnon#
				 , #sendnon_lwest_buy_prc#
				 , #sendnon_max_buy_prc#
				 , #bundsend_div_yn#
				 , #sendnon_add_div_cd#
				 , #setl_meth_div_cd#
				 , #idsrts_add_sendnon_set_yn#
				 , #jeju_sendnon#
				 , #idsrts_sendnon#
				 , #send_add_set_yn#
				 , #unit_wght#
				 , #unit_volm#
				 , #ovsea_kind_div_cd#
				 , #ovsea_exp_div_cd#
				 , #prcl_inmatl_nm#
				 , #sendlimit_atpn#
				 , #templ_stre_yn#
				 , #templ_nm#
				 , SYSDATE
				 , SYSDATE
				 , #reger_id#
				 , #chger_id# )
	</insert>

	<insert id="deleteMgtGoodsOptnDtailInfoExcel" parameterClass="java.util.HashMap">
	DELETE FROM GD_MGT_GOODS_OPTN_DTAIL WHERE
	       GOODS_CD = #goods_cd#
	</insert>
	
	<insert id="deleteGoodsOptnDtailInfoExcel" parameterClass="java.util.HashMap">
	DELETE FROM GD_GOODS_OPTN_DTAIL WHERE
	       GOODS_CD = #goods_cd#
	</insert>
	
	<insert id="insertMgtGoodsOptnDtailInfoExcel" parameterClass="java.util.HashMap">
		MERGE INTO GD_MGT_GOODS_OPTN_DTAIL
			 USING DUAL
				ON (GOODS_CD = #goods_cd#
					AND GOODS_OPTN_GRP_SEQ = (SELECT MAX(GOODS_OPTN_GRP_SEQ)
												FROM GD_MGT_GOODS_OPTN_GRP
											  WHERE GOODS_CD = #goods_cd# ) AND GOODS_OPTN_SEQ = #goods_optn_seq#)
		WHEN MATCHED THEN
			UPDATE SET
				   GOODS_OPTN_NM 		= #goods_optn_nm#
				 , OPTN_GOODS_APPLY_PRC = NVL(#optn_goods_apply_prc#,0)
				 , STOCK_VOLM			= NVL(#stock_volm#,0)
				 , HRNK_GOODS_OPTN_SEQ	= #hrnk_goods_optn_seq#
				 , RGB_COLOR			= #rgb_color#
				 , USE_YN				= 'Y'
				 , SORT_ORDER			= #sort_order#
				 , CHG_DATE			 	= SYSDATE
				 , CHGER_ID			 	= #chger_id#
		WHEN NOT MATCHED THEN
			INSERT
				 ( GOODS_CD
				 , GOODS_OPTN_GRP_SEQ
				 , GOODS_OPTN_SEQ
				 , GOODS_OPTN_NM
				 , OPTN_GOODS_APPLY_PRC
				 , STOCK_VOLM
				 , HRNK_GOODS_OPTN_SEQ
				 , RGB_COLOR
				 , USE_YN
				 , SORT_ORDER
				 , REG_DATE
				 , CHG_DATE
				 , REGER_ID
				 , CHGER_ID )
		  VALUES ( #goods_cd#
				 , 1
				 , #goods_optn_seq#
				 , #goods_optn_nm#
				 , NVL(#optn_goods_apply_prc#,0)
				 , NVL(#stock_volm#,0)
				 , #hrnk_goods_optn_seq#
				 , #rgb_color#
				 , 'Y'
				 , #sort_order#
				 , SYSDATE
				 , SYSDATE
				 , #reger_id#
				 , #chger_id# )
	</insert>
	<insert id="insertGoodsOptnDtailInfoExcel" parameterClass="java.util.HashMap">
		MERGE INTO GD_GOODS_OPTN_DTAIL
			 USING DUAL
				ON (GOODS_CD = #goods_cd#
					AND GOODS_OPTN_GRP_SEQ = (SELECT MAX(GOODS_OPTN_GRP_SEQ)
												FROM GD_MGT_GOODS_OPTN_GRP
											  WHERE GOODS_CD = #goods_cd# ) AND GOODS_OPTN_SEQ = #goods_optn_seq#)
		WHEN MATCHED THEN
			UPDATE SET
				   GOODS_OPTN_NM 		= #goods_optn_nm#
				 , OPTN_GOODS_APPLY_PRC = NVL(#optn_goods_apply_prc#,0)
				 , STOCK_VOLM			= NVL(#stock_volm#,0)
				 , HRNK_GOODS_OPTN_SEQ	= #hrnk_goods_optn_seq#
				 , RGB_COLOR			= #rgb_color#
				 , USE_YN				= 'Y'
				 , SORT_ORDER			= #sort_order#
				 , CHG_DATE			 	= SYSDATE
				 , CHGER_ID			 	= #chger_id#
		WHEN NOT MATCHED THEN
			INSERT
				 ( GOODS_CD
				 , GOODS_OPTN_GRP_SEQ
				 , GOODS_OPTN_SEQ
				 , GOODS_OPTN_NM
				 , OPTN_GOODS_APPLY_PRC
				 , STOCK_VOLM
				 , HRNK_GOODS_OPTN_SEQ
				 , RGB_COLOR
				 , USE_YN
				 , SORT_ORDER
				 , REG_DATE
				 , CHG_DATE
				 , REGER_ID
				 , CHGER_ID )
		  VALUES ( #goods_cd#
				 , 1
				 , #goods_optn_seq#
				 , #goods_optn_nm#
				 , NVL(#optn_goods_apply_prc#,0)
				 , NVL(#stock_volm#,0)
				 , #hrnk_goods_optn_seq#
				 , #rgb_color#
				 , 'Y'
				 , #sort_order#
				 , SYSDATE
				 , SYSDATE
				 , #reger_id#
				 , #chger_id# )
	</insert>
	
	<select id="selectPavlnIdByGrpId" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT COMN_CD_ID AS COMN_CD, COMN_CD_NM AS NAME FROM CM_COMN_CD WHERE CD_GRP_ID = 'PAVLN_DIV_CD' AND USE_YN='Y' AND COMN_CD_ID BETWEEN '01' AND '20'
	</select>
	<sql id="selectSaleBizEAIMgr">
		SELECT
		    A.SUPP_COMP_ID, /** 공급업체ID**/
		    A.BCNC_NM, /**거래처명**/
		    C.PAVLN_DIV_CD ,/** 매장구분**/
		    PAVLN.COMN_CD_NM  PAVLN_NM,/** 매장구분**/
		    A.SUPPO_RGIST_POCD,/**공급국 등기용 국기호**/
		    B.PONM ,/** 공급우체국**/
		    A.PRSDT_NM ,/**대표자명**/
		    A.SUPP_COMP_DIV_CD,/**공급업체분류코드**/
		    SUPP_COMP.COMN_CD_NM AS SUPP_COMP_DIV_NM, /**공급업체분류코드**/
		    A.SUPP_COMP_STUS_CD, /**공급 업체 상태 코드**/
		    SUPP_COMP_STUS.COMN_CD_NM AS SUPP_COMP_STUS_NM, /**공급 업체 상태 코드**/
		    A.COMPREG_NO, /**사업자등록번호**/
		    A.AFTPMN_TREAT_APPR_NO, /**후납 처리 승인 번호**/
		    TO_CHAR(A.CHG_DATE, 'YYYY-MM-DD HH24:MI') AS CHG_DATE, /**변경일자**/
		    B.HRNKORREGIPOCD, /**청코드**/
		    REGIPO.POSHORTNM /**청명**/
		FROM CO_SUPP_COMP_MAST A,  PICMT0060 B , CO_PAVLN_MGT C ,
		(SELECT COMN_CD_ID, COMN_CD_NM FROM CM_COMN_CD WHERE CD_GRP_ID = 'PAVLN_DIV_CD') PAVLN,
		(SELECT COMN_CD_ID, COMN_CD_NM FROM CM_COMN_CD WHERE CD_GRP_ID = 'SUPP_COMP_DIV_CD') SUPP_COMP,
		(SELECT COMN_CD_ID, COMN_CD_NM FROM CM_COMN_CD WHERE CD_GRP_ID = 'SUPP_COMP_STUS_CD') SUPP_COMP_STUS,
		(SELECT POSHORTNM,REGIPOCD,RCOCD
		        FROM (
		            SELECT POSHORTNM ,A.REGIPOCD,RCOCD
		            FROM (
		                    SELECT REGIPOCD, MAX(POCHGSEQ) POCHGSEQ
		                    FROM PICMT0060
		                    WHERE HRNKORREGIPOCD = '89994' AND USEYN='Y'
		                    GROUP BY REGIPOCD
		            ) A
		            , PICMT0060 B
		             WHERE (A.REGIPOCD = B.REGIPOCD
		                    AND A.POCHGSEQ = B.POCHGSEQ
		                    AND RCOCD != '00')
		        UNION
		        SELECT POSHORTNM ,REGIPOCD,RCOCD
		            FROM PICMT0060
		            WHERE REGIPOCD = '89994' AND USEYN='Y')
		         ORDER BY RCOCD ) REGIPO
		WHERE A.SUPPO_RGIST_POCD = B.REGIPOCD(+)
		AND A.SUPP_COMP_ID = C.SUPP_COMP_ID(+)
		AND B.HRNKORREGIPOCD = REGIPO.REGIPOCD(+)
		AND C.PAVLN_DIV_CD = PAVLN.COMN_CD_ID(+)
		AND A.SUPP_COMP_DIV_CD = SUPP_COMP.COMN_CD_ID(+)
		AND A.SUPP_COMP_STUS_CD = SUPP_COMP_STUS.COMN_CD_ID(+)
		AND B.USEYN ='Y'
		AND A.CHGER_ID = 'EAI'
		<!--매장구분  -->
		 <isNotEmpty property="search_pavln_id" prepend="AND">
		 	C.PAVLN_DIV_CD = #search_pavln_id#
		 </isNotEmpty>
		 	<!--공급업체상태  -->
		 <isNotEmpty property="search_supp_comp_stus" prepend="AND">
		 	A.SUPP_COMP_STUS_CD = #search_supp_comp_stus#
		 </isNotEmpty>
		 <isNotEmpty property="search_index" >
		 	<!--업체명  -->
		 	<isEqual property="search_index" compareValue ="01" prepend="AND" >
		 	A.BCNC_NM LIKE '%'|| #search_Text# || '%'
		 	</isEqual>
		 	<!--대표자명  -->
		 	<isEqual property="search_index" compareValue ="02" prepend="AND" >
		 	A.PRSDT_NM LIKE '%'|| #search_Text# || '%'
		 	</isEqual>
		 	<!--사업자번호  -->
		 	<isEqual property="search_index" compareValue ="03" prepend="AND" >
		 	A.COMPREG_NO LIKE '%'|| #search_Text# || '%'
		 	</isEqual>
		 </isNotEmpty>
		  	<!--공급업체분류  -->
		 <isNotEmpty property="search_supp_comp_div" prepend="AND">
		 	A.SUPP_COMP_DIV_CD = #search_supp_comp_div#
		 </isNotEmpty>
		   	<!--청구분  -->
		 <isNotEmpty property="search_postOfficeId" prepend="AND">
		 	A.HRNKORREGIPOCD = #search_postOfficeId#
		 </isNotEmpty>
		 <!--기간조회  -->
		 <isNotEmpty property="search_StartDate" prepend="AND">
				<![CDATA[	TO_CHAR(A.REG_DATE,'YYYY-MM-DD') >= #search_StartDate# ]]>
		 </isNotEmpty>
		 <isNotEmpty property="search_EndDate" prepend="AND">
				<![CDATA[	TO_CHAR(A.CHG_DATE,'YYYY-MM-DD') <= #search_EndDate# ]]>
		 </isNotEmpty>
	</sql>

	<select id="selectSaleBizEAIMgrList" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
			SELECT *
				FROM ( SELECT
					<isEmpty property="sidx">
						ROW_NUMBER () OVER (ORDER BY BCNC_NM ASC) RNUM
					</isEmpty>
					, A.*
					FROM (
						SELECT *
							FROM(
							<include refid="selectSaleBizEAIMgr" />
							)
						) A
					) A
		<isNotEmpty property="firstIndex">
			WHERE RNUM BETWEEN  #firstIndex# AND #lastIndex#
		</isNotEmpty>
	</select>

	<select id="selectSaleBizEAIMgrListCount" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
	SELECT COUNT(*) AS CNT
		  FROM (<include refid="selectSaleBizEAIMgr" />)
	</select>

	<sql id="selectSaleGoodsEAIMgr">
		SELECT
		    A.SUPP_COMP_ID, /** 공급업체ID**/
		    A.BCNC_NM, /**거래처명**/
		    C.PAVLN_DIV_CD ,/** 매장구분**/
		    PAVLN.COMN_CD_NM  PAVLN_NM,/** 매장구분**/
		    A.PRSDT_NM ,/**대표자명**/
		    A.SUPP_COMP_DIV_CD,/**공급업체분류코드**/
		    SUPP_COMP.COMN_CD_NM AS SUPP_COMP_DIV_NM, /**공급업체분류코드**/
		    A.SUPP_COMP_STUS_CD, /**공급 업체 상태 코드**/
		    SUPP_COMP_STUS.COMN_CD_NM AS SUPP_COMP_STUS_NM, /**공급 업체 상태 코드**/
		    A.COMPREG_NO, /**사업자등록번호**/
		    TO_CHAR(A.CHG_DATE, 'YYYY-MM-DD HH24:MI') AS CHG_DATE, /**변경일자**/
		    TO_CHAR(TO_DATE(B.STRT_SUPP_YMD),'YYYY-MM-DD') || '~' || TO_CHAR(TO_DATE(B.SUPP_END_YMD),'YYYY-MM-DD') AS SUPP_YMD, /**공급일자**/
		    TO_CHAR(TO_DATE(B.SUPP_DSCNTC_STRT_YMD),'YYYY-MM-DD') || '~' || TO_CHAR(TO_DATE(B.SUPP_DSCNTC_END_YMD),'YYYY-MM-DD') AS SUPP_DSCNTC_YMD, /**공급중지일자**/
		    B.SUPP_DSCNTC_REASN,/**공급 보류 사유**/
		    D.WGHT,/**중량**/
		    D.VOLM,/**부피**/
		    B.GOODS_CD,/**상품코드**/
		    B.GOODS_NM,/**상품명**/
		    B.STD,/**상품규격**/
		    B.STD_SELL_PRC,/**기준판매가**/
		    GOODS_STUS.COMN_CD_NM GOODS_STUS_NM/**상품상태**/
		FROM CO_SUPP_COMP_MAST A,  GD_MGT_GOODS_MAST B , CO_PAVLN_MGT C ,GD_MGT_GOODS_SEND D,
		(SELECT COMN_CD_ID, COMN_CD_NM FROM CM_COMN_CD WHERE CD_GRP_ID = 'PAVLN_DIV_CD') PAVLN,
		(SELECT COMN_CD_ID, COMN_CD_NM FROM CM_COMN_CD WHERE CD_GRP_ID = 'SUPP_COMP_DIV_CD') SUPP_COMP,
		(SELECT COMN_CD_ID, COMN_CD_NM FROM CM_COMN_CD WHERE CD_GRP_ID = 'SUPP_COMP_STUS_CD') SUPP_COMP_STUS,
		(SELECT COMN_CD_ID, COMN_CD_NM FROM CM_COMN_CD WHERE CD_GRP_ID = 'GOODS_STUS_CD') GOODS_STUS
		/** , (SELECT MIN (PRCCALSTDWGHT) PRCCALSTDWGHT FROM
				(SELECT DOMFRNPRC EMSFEE,
		       			0 MICROFEE,
				       PRCCALSTDWGHT
				  FROM PIPMT0010
				 WHERE PRCLARGEDIVCD = 'P03'
				   AND PRCMIDDIVCD = '31'
				   AND PRCSMALLDIVCD = '301'
				   AND TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN APPLYSTRTYMD AND APPLYENDYMD
				   AND FRNAREACD ='E'
				 UNION ALL
				SELECT 0,
				       DOMFRNPRC MICROFEE,
				       PRCCALSTDWGHT
				  FROM PIPMT0010
				 WHERE PRCLARGEDIVCD = 'P02'
				   AND PRCMIDDIVCD = '1'
				   AND PRCSMALLDIVCD = '104'
				   AND TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN APPLYSTRTYMD AND APPLYENDYMD
				   AND FRNAREACD = 'E' )
		) PIPMT0010 **/
		WHERE A.SUPP_COMP_ID = B.SUPP_COMP_ID
		AND B.GOODS_CD = D.GOODS_CD
		AND A.SUPP_COMP_ID = C.SUPP_COMP_ID(+)
		AND C.PAVLN_DIV_CD = PAVLN.COMN_CD_ID(+)
		AND A.SUPP_COMP_DIV_CD = SUPP_COMP.COMN_CD_ID(+)
		AND B.GOODS_STUS_CD = GOODS_STUS.COMN_CD_ID(+)
		AND A.SUPP_COMP_STUS_CD = SUPP_COMP_STUS.COMN_CD_ID(+)
		AND NVL(D.WGHT,0)  <![CDATA[ >  ]]>  0
		AND A.CHGER_ID = 'EAI'
		<!--기간조회  -->
		 <isNotEmpty property="search_StartDate" prepend="AND">
				<![CDATA[	TO_CHAR(A.REG_DATE,'YYYY-MM-DD') >= #search_StartDate# ]]>
		 </isNotEmpty>
		 <isNotEmpty property="search_EndDate" prepend="AND">
				<![CDATA[	TO_CHAR(A.CHG_DATE,'YYYY-MM-DD') <= #search_EndDate# ]]>
		 </isNotEmpty>
		 <!-- 매장분류 -->
		 <isNotEmpty property="search_pavln_id" prepend="AND">
		 	C.PAVLN_DIV_CD = #search_pavln_id#
		 </isNotEmpty>
		 	<!--공급업체상태  -->
		 <isNotEmpty property="search_supp_comp_stus" prepend="AND">
		 	A.SUPP_COMP_STUS_CD = #search_supp_comp_stus#
		 </isNotEmpty>
		   	<!--공급업체분류  -->
		 <isNotEmpty property="search_supp_comp_div" prepend="AND">
		 	A.SUPP_COMP_DIV_CD = #search_supp_comp_div#
		 </isNotEmpty>
		 <!-- 검색구분 -->
		 <isNotEmpty property="search_index" >
		 		<isEqual property="search_index" compareValue ="01" prepend="AND" >
			 	B.GOODS_CD LIKE '%'|| #search_Text# || '%'
			 	</isEqual>
			 	<isEqual property="search_index" compareValue ="02" prepend="AND" >
			 	B.GOODS_NM LIKE '%'|| #search_Text# || '%'
			 	</isEqual>
			 	<isEqual property="search_index" compareValue ="03" prepend="AND" >
			 	A.SUPP_COMP_ID LIKE '%'|| #search_Text# || '%'
			 	</isEqual>
			 	<isEqual property="search_index" compareValue ="04" prepend="AND" >
			 	A.BCNC_NM LIKE '%'|| #search_Text# || '%'
			 	</isEqual>
		 </isNotEmpty>
		 	<!--상품상태코드  -->
		 <isNotEmpty property="search_goods_status" prepend="AND">
		 	B.GOODS_STUS_CD = #search_goods_status#
		 </isNotEmpty>

	</sql>

	<select id="selectSaleGoodsEAIMgrList" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
			SELECT *
				FROM ( SELECT
					<isEmpty property="sidx">
						ROW_NUMBER () OVER (ORDER BY GOODS_NM ASC) RNUM
					</isEmpty>
					, A.*
					FROM (
						SELECT *
							FROM(
							<include refid="selectSaleGoodsEAIMgr" />
							)
						) A
					) A
		<isNotEmpty property="firstIndex">
			WHERE RNUM BETWEEN  #firstIndex# AND #lastIndex#
		</isNotEmpty>
	</select>

	<select id="selectSaleGoodsEAIMgrListCount" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
	SELECT COUNT(*) AS CNT
		  FROM (<include refid="selectSaleGoodsEAIMgr" />)
	</select>
</sqlMap>