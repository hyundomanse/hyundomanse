<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">

<!-- 정산실행 -->
<sqlMap namespace="BO.AdjRun">
	<typeAlias  alias="commMap" type="com.devwork.common.map.CommonMap"/>
	
	<!-- 페이징 Header -->
	<sql id="pagingHeader">
		<![CDATA[
		SELECT *  
		  FROM (
				SELECT A.*
				     , ROWNUM  AS RNUM
				  FROM (
		]]>	  
	</sql>
	
	<!-- 페이징 Footer -->
	<sql id="pagingFooter">
		<![CDATA[
                       ) A	WHERE ROWNUM <= #lastIndex#
		       ) WHERE RNUM >= #firstIndex#
		]]>
	</sql>
	
	<!-- 금융영업일 가져오기 -->
	<select id="getHolidayYn" parameterClass="java.util.HashMap" resultClass="String">
		<![CDATA[
		/* 당일이 금융영업일 인지 여부 검사 */ 
		SELECT HOLDAYYN AS HOLIDAY_YN
		FROM   PIEMT0160 A
		WHERE  A.RCOCD='00'	/* 청별코드 CM_COMN_CD - CD_GRP_ID = 'RCO_CD' */
		AND    A.WORKCALEYMD = TO_CHAR(SYSDATE,'YYYYMMDD')
		]]>	
	</select>
	<!-- 금융영업일 가져오기 -->
	
	<!-- 우편영업일 가져오기-->
	<select id="selectBaseWorkDay" parameterClass="java.util.HashMap" resultClass="String">
		<![CDATA[
        /* 정산 기준일자는 금융영업일 기준 전일자 */ 
		SELECT MAX(A.WORKCALEYMD) AS WORK_CALE_YMD 
		FROM   PIEMT0160 A
		WHERE  A.RCOCD='00'
		AND    A.WORKCALEYMD < #adj_date#
		AND    A.HOLDAYYN='N'
		]]>	
	</select>
	<!-- 우편영업일 가져오기-->	
	
	<!-- 우편영업일 가져오기(현재일자 이전) -->		
	<select id="selectBaseWorkDaySysDate" parameterClass="java.util.HashMap" resultClass="String">	
    <![CDATA[
        /* 정산 기준일자는 금융영업일 기준 전일자 */ 
		SELECT MAX(A.WORKCALEYMD) AS WORK_CALE_YMD 
		FROM   PIEMT0160 A
		WHERE  A.RCOCD='00'
		AND    A.WORKCALEYMD < TO_CHAR(SYSDATE,'YYYYMMDD')
		AND    A.HOLDAYYN='N'
    ]]>
    </select>
	<!-- 우편영업일 가져오기(현재일자 이전) end -->	    

	<!-- 이체결과(adj_status) 에서 상태값이 #adj_status# 인것  카운트 -->		
	<select id="selectWorkDayAdjCnt" parameterClass="java.util.HashMap" resultClass="int">
		SELECT COUNT(*) AS ADJ_CNT 
		FROM   ST_ADJ_STATUS
		WHERE  ADJ_DATE = #adj_date#
		AND    ADJ_STATUS = #adj_status#
	</select>	
	<!-- 이체결과(adj_status) 에서 상태값이 2(이체결과반영) 카운트 -->
	
	<!-- 정산상태 메시지 출력 -->
	<select id="selectAdjStatusMsg" parameterClass="java.util.HashMap" resultClass="String">	
    <![CDATA[
        SELECT NAME
        FROM
            (
            SELECT  A.ADJ_STATUS
                  , B.COMN_CD_NM AS NAME
                  , B.CD_VAL3
            FROM    ST_ADJ_STATUS A, CM_COMN_CD B
            WHERE   B.CD_GRP_ID = 'TRANSF_STUS_CD'
            AND     A.ADJ_STATUS = B.COMN_CD_ID
            AND     A.ADJ_DATE = TO_CHAR(SYSDATE,'YYYYMMDD')
            AND     B.CD_VAL1 = 'D'
            AND     A.ADJ_STATUS NOT IN ('A','B','C','D')
            UNION ALL
            SELECT  '0' ADJ_STATUS
                  , '연계수신['
                    || (SELECT A.ADJ_STATUS FROM ST_ADJ_STATUS A WHERE A.ADJ_DATE = TO_CHAR(SYSDATE,'YYYYMMDD') AND A.ADJ_STATUS = 'A') ||','
                    || (SELECT A.ADJ_STATUS FROM ST_ADJ_STATUS A WHERE A.ADJ_DATE = TO_CHAR(SYSDATE,'YYYYMMDD') AND A.ADJ_STATUS = 'B') ||','
                    || (SELECT A.ADJ_STATUS FROM ST_ADJ_STATUS A WHERE A.ADJ_DATE = TO_CHAR(SYSDATE,'YYYYMMDD') AND A.ADJ_STATUS = 'C') ||','
                    || (SELECT A.ADJ_STATUS FROM ST_ADJ_STATUS A WHERE A.ADJ_DATE = TO_CHAR(SYSDATE,'YYYYMMDD') AND A.ADJ_STATUS = 'D') ||']' AS NAME
                  , '001' CD_VAL3
            FROM DUAL
            UNION ALL
            SELECT '-', '정산처리 작업전', '000' 
            FROM DUAL
            ORDER BY CD_VAL3 DESC
            )
        WHERE ROWNUM = 1 
		]]>
	</select>
	<!-- 정산상태 메시지 출력 end -->	
	
	<!-- 화면에 뿌려줄 이체요청 이체결과 출력 retrieveSuppCtrtCompare_1_1(AS-IS) -->
	<select id="selectAdjSuppCtrtCompareBefore" parameterClass="java.util.HashMap" resultClass="commMap">	
		/* 이체요청및 결과내역조회 (이체결과 반영전) */
	 	SELECT  '1' AS DIV
			   , COUNT(*) AS CNT
			   , NVL(SUM(TRANSF_AMT), 0) AS AMTSUM
		FROM   ST_SUPP_POREGI_TRF_AMT 
		WHERE  TRANSF_REQ_YMD = #adj_work_cal_ymd#
		UNION ALL
	    SELECT '2' DIV 
		     , COUNT(*) CNT
		  	 , NVL(SUM(TRANSF_AMT), 0)
	  	FROM   IFR_SUPP_POREGI_TRF_AMT 
	    WHERE  TRANSF_REQ_YMD =  #adj_work_cal_ymd#
	    AND TRANSF_DATA_SEQ != -1 
	    AND TRANSF_FILE_SEQ = (
								SELECT NVL(MAX(TRANSF_FILE_SEQ), 0)
								FROM IFR_SUPP_POREGI_TRF_AMT 
								WHERE TRANSF_REQ_YMD = #adj_work_cal_ymd#
							  )     
		UNION ALL
	    SELECT '3' DIV
		  	 , COUNT(*) CNT
			 , NVL(SUM(TRANSF_AMT), 0)
	   	FROM   ST_CTRT_FEE_TRANSF
	    WHERE  TRANSF_REQ_YMD = #adj_work_cal_ymd#
	    UNION ALL
	    SELECT '4' DIV 
			 , COUNT(*) CNT
			 , NVL(SUM(TRANSF_AMT), 0)
	    FROM   IFR_CTRT_FEE_TRANSF
	    WHERE  TRANSF_REQ_YMD = #adj_work_cal_ymd#
	    AND    TRANSF_DATA_SEQ != -1 
	    AND    TRANSF_FILE_SEQ = (
									SELECT NVL(MAX(TRANSF_FILE_SEQ), 0)
									FROM IFR_CTRT_FEE_TRANSF 
									WHERE TRANSF_REQ_YMD = #adj_work_cal_ymd#
								 )    
	 	UNION ALL											
		SELECT '5' AS DIV 
			 , COUNT(*) AS CNT
			 , NVL(SUM(DEPOT_AMT), 0) AS AMTSUM 
		FROM IFR_RECEV_PO_DEP_AMT 
		WHERE TRANSF_REQ_YMD = #adj_work_cal_ymd#
		AND TRANSF_DATA_SEQ != -1 
		AND TRANSF_FILE_SEQ = (
						          SELECT NVL(MAX(TRANSF_FILE_SEQ), 0)
						          FROM IFR_RECEV_PO_DEP_AMT 
						          WHERE TRANSF_REQ_YMD = #adj_work_cal_ymd#
							  )
		UNION ALL
		SELECT '6' AS DIV 
			 , SUM(CNT) AS CNT
			 , SUM(AMTSUM) AS AMTSUM 
		FROM 
			(
			   SELECT COUNT(*) AS CNT, NVL(SUM(DEPOT_AMT), 0) AS AMTSUM 
			   FROM   ST_RECEV_PO_DEP_AMT
			   WHERE  DEPOT_YMD = #adj_work_cal_ymd# 
			   AND    DEPOT_AMT > 0
		       UNION ALL
		       SELECT COUNT(*) AS CNT, NVL(SUM(BUY_COMP_DEPOT_AMT), 0) AS AMTSUM 
			   FROM   ST_BUY_COMP_DEPOT_INFO
		       WHERE  BUY_COMP_DEPOT_YMD = #adj_work_cal_ymd# 
			   AND    BUY_COMP_CD = '998'
			 )									   	
	</select>
	<!-- 화면에 뿌려줄 이체요청 이체결과 출력 retrieveSuppCtrtCompare_1_1(AS-IS) -->
	
	<!-- 화면에 뿌려줄 이체요청 이체결과 출력 retrieveSuppCtrtCompare_1_2(AS-IS) -->
	<select id="selectAdjSuppCtrtCompareAfter" parameterClass="java.util.HashMap" resultClass="commMap">	
		/* 이체요청및 결과내역조회 (이체결과 반영 후) */
		SELECT '1' AS DIV 
		 	 , COUNT(*) AS CNT
		 	 , NVL(SUM(TRANSF_AMT), 0) AS AMTSUM
		FROM   ST_SUPP_POREGI_TRF_AMT 
		WHERE  TRANSF_REQ_YMD = #adj_work_cal_ymd#
		UNION ALL
		SELECT '2' DIV 
			 , COUNT(*) CNT
			 , NVL(SUM(TRANSF_AMT), 0)
		FROM   IFR_SUPP_POREGI_TRF_AMT 
		WHERE  TRANSF_REQ_YMD = #adj_work_cal_ymd#
		AND    TRANSF_DATA_SEQ != -1 
		AND    USE_YN = 'Y'
		UNION ALL
		SELECT '3' DIV 
		 	 , COUNT(*) CNT
			 , NVL(SUM(TRANSF_AMT), 0)
		FROM   ST_CTRT_FEE_TRANSF
		WHERE TRANSF_REQ_YMD = #adj_work_cal_ymd#
		UNION ALL
		SELECT '4' DIV 
			 , COUNT(*) CNT
			 , NVL(SUM(TRANSF_AMT), 0)
		FROM   IFR_CTRT_FEE_TRANSF
		WHERE  TRANSF_REQ_YMD = #adj_work_cal_ymd#
		AND    TRANSF_DATA_SEQ != -1 
		AND    USE_YN = 'Y'
		UNION ALL				
		SELECT '5' AS DIV 
			 , COUNT(*) AS CNT
			 , NVL(SUM(DEPOT_AMT), 0) AS AMTSUM 
		FROM   IFR_RECEV_PO_DEP_AMT 
		WHERE  TRANSF_REQ_YMD = #adj_work_cal_ymd#
		AND    TRANSF_DATA_SEQ != -1 
		AND    USE_YN = 'Y'
		UNION ALL
		SELECT '6' AS DIV , SUM(CNT) AS CNT, SUM(AMTSUM) AS AMTSUM 
		FROM 
			(
		    SELECT COUNT(*) AS CNT, NVL(SUM(DEPOT_AMT), 0) AS AMTSUM 
		    FROM   ST_RECEV_PO_DEP_AMT
		    WHERE  DEPOT_YMD = #adj_work_cal_ymd# 
		    AND    DEPOT_AMT > 0
		    UNION ALL
		    SELECT COUNT(*) AS CNT, NVL(SUM(BUY_COMP_DEPOT_AMT), 0) AS AMTSUM 
		    FROM   ST_BUY_COMP_DEPOT_INFO
		    WHERE  BUY_COMP_DEPOT_YMD = #adj_work_cal_ymd#
		    AND    BUY_COMP_CD = '998'
			)					
	</select>
	<!-- 화면에 뿌려줄 이체요청 이체결과 출력 retrieveSuppCtrtCompare_1_2(AS-IS) -->
	
	<!-- 접수국 입금내역 반영(이체결과반영) ADJ_STATUS 체크 retriveAdjStatusChkCnt2_1 (AS-IS) -->
	<select id="selectAdjIfrSuppCnt" parameterClass="java.util.HashMap" resultClass="commMap">		
    <![CDATA[
	    SELECT
	         ( 
	           SELECT SUM(CNT)
	           FROM
	           (
	             SELECT COUNT(*) AS CNT
	             FROM   ST_ADJ_STATUS
	             WHERE  ADJ_DATE = TO_CHAR(SYSDATE, 'YYYYMMDD')
	             AND    ADJ_STATUS IN ('D')		/* CM_COMN_CD CD_GRP_ID = 'TRANSF_STUS_CD' */
	             UNION ALL
	             /* 우체국 입금파일 수신 여부 판단 */ 
	             SELECT COUNT(1) AS CNT 
	             FROM   IFR_RECEV_PO_DEP_AMT 
	             WHERE  TRANSF_DATA_SEQ = -1 
	             AND    TRANSF_REQ_YMD = 
	                           (
				                SELECT MAX(A.WORKCALEYMD) AS WORK_CALE_YMD 
				                FROM PIEMT0160 A
				                WHERE A.RCOCD='00'
				                AND A.WORKCALEYMD < TO_CHAR(SYSDATE, 'YYYYMMDD')
				                AND A.HOLDAYYN='N'
	                           )
	            UNION ALL
	            /* 이체요청파일 전송결과 수신 여부 판단 */
	            SELECT COUNT(1) AS CNT 
	            FROM   IFR_SUPP_POREGI_TRF_AMT 
	            WHERE  TRANSF_DATA_SEQ = -1 
	            AND    TRANSF_REQ_YMD = 
				               (
				                SELECT MAX(A.WORKCALEYMD) AS WORK_CALE_YMD 
				                FROM PIEMT0160 A
				                WHERE A.RCOCD='00'
				                AND A.WORKCALEYMD < TO_CHAR(SYSDATE, 'YYYYMMDD')
				                AND A.HOLDAYYN='N'
				               )
	            UNION ALL
	            /* 위탁수수료 전송결과 수신 여부 판단 */
	            SELECT COUNT(1) AS CTRT_REE_CNT 
	            FROM   IFR_CTRT_FEE_TRANSF 
	            WHERE  TRANSF_DATA_SEQ = -1 
	            AND    TRANSF_REQ_YMD =
	            			   (
	              				SELECT CASE 
	              					 	 WHEN TO_CHAR(SYSDATE, 'YYYYMMDD') > A.THIS_MONTH_CTRT_FEE_DATE THEN A.THIS_MONTH_CTRT_FEE_DATE
	                                     ELSE B.BEFORE_MONTH_CTRT_FEE_DATE
	                                   END AS LAST_CTRT_FEE_DATE
	              				FROM
						              (
						                  SELECT  MIN(A.WORKCALEYMD) AS THIS_MONTH_CTRT_FEE_DATE
						                  FROM PIEMT0160 A
						                  WHERE A.RCOCD='00'
						                  AND A.WORKCALEYMD >= TO_CHAR(SYSDATE, 'YYYYMM')||'17'
						                  AND A.HOLDAYYN='N'
						              )A,
							          (    
							              SELECT MIN(B.WORKCALEYMD) AS BEFORE_MONTH_CTRT_FEE_DATE
							              FROM  PIEMT0160 B
							              WHERE B.RCOCD='00'
							              AND B.WORKCALEYMD >= TO_CHAR(TO_DATE(TO_CHAR(SYSDATE, 'YYYYMM')||'01', 'YYYYMMDD') - 1, 'YYYYMM')||'17'
							              AND B.HOLDAYYN='N'                
							          )B
	            			   )
	           )
	       ) CONDITION_ADJ_STATUS_CNT_ONE,
           (SELECT COUNT(*)
            FROM   ST_ADJ_STATUS
            WHERE  ADJ_DATE = TO_CHAR(SYSDATE, 'YYYYMMDD')
            AND    ADJ_STATUS ='2'
           ) CURRENT_ADJ_STATUS_CNT_ONE
		FROM DUAL
    ]]>	
    </select>	
	<!--접수국 입금내역 반영 ADJ_STATUS 체크 retriveAdjStatusChkCnt2_1 (AS-IS) END --> 
	
	<!-- 이체결과 반영시 PHA006 요청데이타가 있는지 체크 카운트 -->		
	<select id="selectaAjtFeeTransfCnt" parameterClass="java.util.HashMap" resultClass="int">
		SELECT COUNT(*) CNT
		FROM   ST_CTRT_FEE_TRANSF
		WHERE  TRANSF_REQ_YMD = #adj_base_work_day#
	</select>	
	
	<!-- 공급국별이체금액정보 결과수신(IFR_SUPP_POREGI_TRF_AMT MAX SEQ SELECT -->
	<select id="selectaAdjIfrSuppPoregiTrfAmtFileSeq" parameterClass="java.util.HashMap" resultClass="int">
     	SELECT NVL(MAX(TRANSF_FILE_SEQ),0) AS TRANSF_FILE_SEQ
		FROM   IFR_SUPP_POREGI_TRF_AMT 
		WHERE  TRANSF_REQ_YMD = #adj_base_work_day#	
	</select>		
	<!-- 공급국별이체금액정보 결과수신(IFR_SUPP_POREGI_TRF_AMT MAX SEQ SELECT end -->
	
	<!-- 이체결과 내역 조회 PHA003 -->	   
	<select id="selectIfrSuppPoregiTrfAmtList" parameterClass="java.util.HashMap" resultClass="commMap">					
    	SELECT TRANSF_REQ_YMD
	         , TRANSF_DATA_SEQ
	         , TRANSF_DATA_DIV_CD
	         , TRANSF_RSLT_PFNC_CD
	         , TRANSF_AMT
	         , TRANSF_RSLT_CONT
	         , LAST_REG_DATE
      	FROM   IFR_SUPP_POREGI_TRF_AMT A           
      	WHERE  A.TRANSF_REQ_YMD   = #adj_base_work_day#
      	AND    A.TRANSF_FILE_SEQ = #transf_file_seq#
      	AND    A.TRANSF_DATA_SEQ > 0
      	ORDER BY TRANSF_DATA_SEQ
	</select>     
	
	<!-- SUPP_POREGI_TRF_AMT UPDATE (PHA003 처리) -->
	<update id="updateSuppPoregipoTrfAmt" parameterClass="java.util.HashMap">	
		UPDATE ST_SUPP_POREGI_TRF_AMT A SET
		  	   A.transf_Rslt_Pfnc_Cd = #transf_rslt_pfnc_cd#
		  	 , A.transf_Rslt_Cont = #transf_rslt_cont#
			 , A.transf_Data_Frwd_Stus_Cd = #transf_data_frwd_stus_cd#
			 , A.transf_Data_Frwd_Ymd = TO_CHAR(SYSDATE,'YYYYMMDD')
			 /* , LAST_REG_DATE = SYSDATE  */       
		WHERE  A.TRANSF_REQ_YMD   = #adj_base_work_day#
		AND    A.TRANSF_DATA_SEQ  = #transf_data_seq#
		AND    A.TRANSF_AMT = #transf_amt#		
	</update>	
	<!-- SUPP_POREGI_TRF_AMT UPDATE (PHA003 처리) END -->		 

	<!-- IFR_SUPP_POREGI_TRF_AMT UPDATE (PHA003 처리) -->
	<update id="updateIfrSuppPoregipoTrfAmt" parameterClass="java.util.HashMap">		
		UPDATE IFR_SUPP_POREGI_TRF_AMT A SET 
			   A.USE_YN = 'Y' 
			/* , LAST_REG_DATE = SYSDATE   */     
		WHERE  A.TRANSF_REQ_YMD   = #adj_base_work_day#
		AND    A.TRANSF_FILE_SEQ  = #transf_file_seq#	
	</update>
	<!-- IFR_SUPP_POREGI_TRF_AMT UPDATE (PHA003 처리) END -->	
	
	<!-- IFR_CTRT_FEE_TRANSF  TRANSF_FILE_SEQ -->
	<select id="selectaAdjIfrCtrtFeeTrfFileSeq" parameterClass="java.util.HashMap" resultClass="int">
		SELECT NVL(MAX(TRANSF_FILE_SEQ),0) AS TRANSF_FILE_SEQ
		FROM   IFR_CTRT_FEE_TRANSF 
		WHERE  TRANSF_REQ_YMD = #adj_base_work_day#
		AND    TRANSF_DATA_SEQ > 0		
	</select>
	<!-- IFR_CTRT_FEE_TRANSF  TRANSF_FILE_SEQ END -->
	
	<!-- 위탁수수료 요청내역 조회 PHA006 -->	   
	<select id="selectIfrCtrtFeeTransfList" parameterClass="java.util.HashMap" resultClass="commMap">	
		SELECT  TRANSF_REQ_YMD
			  , TRANSF_DATA_SEQ
			  , TRANSF_DATA_DIV_CD
			  , TRANSF_RSLT_PFNC_CD
			  , TRANSF_AMT
			  , TRANSF_RSLT_CONT
			  , LAST_REG_DATE
		FROM    IFR_CTRT_FEE_TRANSF
		WHERE   TRANSF_REQ_YMD = #adj_base_work_day#
		AND     TRANSF_FILE_SEQ = #transf_file_seq2#
		AND     TRANSF_DATA_SEQ > 0
		ORDER BY TRANSF_DATA_SEQ	
	</select>  	
	
	<!-- CTRT_FEE_TRANSF UPDATE (PHA006 처리) -->
	<update id="updateCtrtFeeTransf" parameterClass="java.util.HashMap">	
		UPDATE ST_CTRT_FEE_TRANSF A SET 
	           A.TRANSF_RSLT_PFNC_CD = #transf_rslt_pfnc_cd#
             , A.TRANSF_RSLT_CONT   = #transf_rslt_cont#
             , A.TRANSF_DATA_FRWD_STUS_CD = '04'
             , A.TRANSF_DATA_FRWD_YMD = TO_CHAR(SYSDATE,'YYYYMMDD')
             , LAST_REG_DATE = SYSDATE
		WHERE  A.TRANSF_REQ_YMD   = #adj_base_work_day#
		AND    A.TRANSF_DATA_SEQ  = #transf_data_seq#	
		AND    A.TRANSF_AMT = #transf_amt#	
	</update>	
	<!-- CTRT_FEE_TRANSF UPDATE (PHA003 처리) END -->		

	<!-- IFR_CTRT_FEE_TRANSF UPDATE (PHA006 처리) -->
	<update id="updateIfrCtrtFeeTransf" parameterClass="java.util.HashMap">		
		UPDATE IFR_CTRT_FEE_TRANSF A SET 
			   A.USE_YN = 'Y' 
			 , LAST_REG_DATE = SYSDATE   
		WHERE  A.TRANSF_REQ_YMD   = #adj_base_work_day#
		AND    A.TRANSF_FILE_SEQ  = #transf_file_seq2#	
	</update>
	<!-- IFR_CTRT_FEE_TRANSF UPDATE (PHA006 처리) END -->	
	
	<!-- IFR_RECEV_PO_DEP_AMT USE_YN='Y' UPDATE (PHB000 처리) -->
	<update id="updateIfrRecevPoDeptAmt" parameterClass="java.util.HashMap">		
		UPDATE IFR_RECEV_PO_DEP_AMT A
        SET    A.USE_YN = 'Y'        
        WHERE  A.TRANSF_REQ_YMD   = #adj_base_work_day#
        AND    A.TRANSF_FILE_SEQ  = #transf_file_seq#
	</update>
	<!-- IFR_RECEV_PO_DEP_AMT USE_YN='Y' UPDATE (PHA006 처리) END -->	
	
	<!-- IFR_RECEV_PO_DEP_AMT USE_YN='N' UPDATE (PHB000 처리) -->
	<update id="updateIfrRecevPoDeptAmtCancel" parameterClass="java.util.HashMap">		
		UPDATE IFR_RECEV_PO_DEP_AMT
       	SET    USE_YN='N'
       	WHERE  TRANSF_REQ_YMD   = #adj_base_work_day#
        AND    USE_YN = 'Y'
	</update>
	<!-- IFR_RECEV_PO_DEP_AMT USE_YN='N' UPDATE (PHB000 처리) END -->	
	
	<!-- 취급소 입금내역관리 현금입금상태코드 업데이트 -->
	<update id="updateTreatPostDepotMgmtCancle" parameterClass="java.util.HashMap">		
		UPDATE ST_TREAT_POST_DEPOT_MGMT 
        SET    MONEY_DEPOT_STUS_CD = '001',
        	   MONEY_DEPOT_TREAT_YMD = null
      	WHERE  MONEY_DEPOT_TREAT_YMD = TO_CHAR(SYSDATE, 'YYYYMMDD')
        AND    MONEY_DEPOT_STUS_CD = '002'
	</update>
	<!-- 취급소 입금내역관리 현금입금상태코드 업데이트 END -->	
	
	<!-- ST_ADJ_STATUS insert -->
	<insert id="insertAdjStatus" parameterClass="java.util.HashMap">		
        INSERT INTO ST_ADJ_STATUS
			   (
			   ADJ_DATE, 
			   ADJ_DATE_SEQ, 
			   ADJ_STATUS, 
			   USEYN, 
			   WORK_DATE
			   )
		VALUES (
			   TO_CHAR(SYSDATE, 'YYYYMMDD')
			 , (SELECT NVL(MAX(ADJ_DATE_SEQ)+1, 0) FROM ST_ADJ_STATUS WHERE ADJ_DATE = TO_CHAR(SYSDATE, 'YYYYMMDD'))
			 , #adj_status#		/* '2' CM_COMN_CD CD_GRP_ID = 'TRANSF_STUS_CD' */
			 , 'Y'
			 , SYSDATE
			   )
	</insert>
	<!-- ST_ADJ_STATUS insert END -->	
	
	<!-- ST_STATUS_HISTORY insert -->
	<insert id="insertAdjStatusHistory" parameterClass="java.util.HashMap">	
		INSERT INTO ST_ADJ_STATUS_HISTORY
			   (
			   ADJ_DATE, 
			   ADJ_DATE_SEQ, 
			   ADJ_STATUS, 
			   USEYN, 
			   WORK_DATE
			   )
        VALUES (
        		TO_CHAR(SYSDATE, 'YYYYMMDD') 
        	 , (SELECT NVL(MAX(ADJ_DATE_SEQ)+1, 0) FROM ST_ADJ_STATUS_HISTORY WHERE ADJ_DATE = TO_CHAR(SYSDATE, 'YYYYMMDD'))
        	 , #adj_status#				
        	 , #adj_status_use_yn#
        	 , SYSDATE
			   )	
	</insert>
	<!-- ST_STATUS_HISTORY insert END -->	
		
	<!-- 정산실행 이체결과반영 취소 가능상태 체크 (AS-IS retriveAdjStatusChkCnt2_2) -->	   
	<select id="selectAdjStepOneCancelCnt" parameterClass="java.util.HashMap" resultClass="commMap">					
 		SELECT (SELECT COUNT(*) FROM ST_ADJ_STATUS WHERE ADJ_DATE = TO_CHAR(SYSDATE, 'YYYYMMDD') AND ADJ_STATUS IN ('3', '4', '5', '6', '7')) AS CONDITION_ADJ_STATUS_CNT,
			   (SELECT COUNT(*) FROM ST_ADJ_STATUS WHERE ADJ_DATE = TO_CHAR(SYSDATE, 'YYYYMMDD') AND ADJ_STATUS ='2') CURRENT_ADJ_STATUS_CNT
		FROM   DUAL
	</select>  
	
	<!-- step01 - 이체결과반영 반영취소(AS-IS : retrieveSuppPoregiTrfAmtListCancel -->
	<select id="selectSuppPoregiTrfAmtListCancel" parameterClass="java.util.HashMap" resultClass="commMap">		
		SELECT   TRANSF_REQ_YMD
				,TRANSF_DATA_SEQ
				,TRANSF_DATA_DIV_CD
				,TRANSF_RSLT_PFNC_CD
				,TRANSF_AMT
				,TRANSF_RSLT_CONT
				,LAST_REG_DATE
		FROM     ST_SUPP_POREGI_TRF_AMT A           
		WHERE    A.TRANSF_REQ_YMD   = #adj_base_work_day#
		ORDER BY TRANSF_DATA_SEQ
	</select>
	<!-- step01 - 이체결과반영 반영취소 -->	
	
	<!-- 이체결과반영 반영취소 ST_SUPP_POREGI_TR_AMT UPDATE -->
	<update id="updateSuppPoregipoTrfAmtCancel" parameterClass="java.util.HashMap">		
		UPDATE  ST_SUPP_POREGI_TRF_AMT A SET 
				A.TRANSF_RSLT_PFNC_CD = ''
			  , A.TRANSF_RSLT_CONT = ''
			  , A.TRANSF_DATA_FRWD_STUS_CD = '02'
			  , A.TRANSF_DATA_FRWD_YMD = ''
		WHERE   A.TRANSF_REQ_YMD   = #adj_base_work_day#
		AND     A.TRANSF_DATA_FRWD_YMD = TO_CHAR(SYSDATE,'YYYYMMDD')
		AND     A.TRANSF_DATA_SEQ  = #transf_data_seq#	
	</update>
	<!-- 이체결과반영 반영취소 ST_SUPP_POREGI_TR_AMT UPDATE END -->	
	
	<!-- IFR_SUPP_POREGI_TRF_AMT 'N' UPDATE - 취소처리 -->
	<update id="updateIfrSuppPoregipoTrfAmtCancel" parameterClass="java.util.HashMap">
		UPDATE IFR_SUPP_POREGI_TRF_AMT SET 
			   USE_YN = 'N'
		WHERE  TRANSF_REQ_YMD = #adj_base_work_day#
		AND    USE_YN = 'Y'
	</update>
	<!-- IFR_SUPP_POREGI_TRF_AMT 'N' UPDATE - 취소처리 -->		
	
	<select id="selectIfrCtrtFeeTransfListCancel" parameterClass="java.util.HashMap" resultClass="commMap">	
		SELECT  TRANSF_REQ_YMD
			  , TRANSF_DATA_SEQ
			  , TRANSF_DATA_DIV_CD
			  , TRANSF_RSLT_PFNC_CD
			  , TRANSF_AMT
			  , TRANSF_RSLT_CONT
			  , LAST_REG_DATE
		FROM    IFR_CTRT_FEE_TRANSF
		WHERE   TRANSF_REQ_YMD = #adj_base_work_day#
		ORDER BY TRANSF_DATA_SEQ	
	</select>
	
	<!-- CTRT_FEE_TRANSF UPDATE (PHA006 처리) 반영취소 -->
	<update id="updateCtrtFeeTransfCancel" parameterClass="java.util.HashMap">	
		UPDATE ST_CTRT_FEE_TRANSF A SET 
	           A.TRANSF_RSLT_PFNC_CD = ''
             , A.TRANSF_RSLT_CONT   = ''
             , A.TRANSF_DATA_FRWD_STUS_CD = '02'
             , A.TRANSF_DATA_FRWD_YMD = ''
             , LAST_REG_DATE = SYSDATE
		WHERE  A.TRANSF_REQ_YMD   = #adj_base_work_day#
		AND    A.TRANSF_DATA_SEQ  = #transf_data_seq#	
	</update>	
	<!-- CTRT_FEE_TRANSF UPDATE (PHA006 처리) 반영취소 END -->	
	
	<!-- IFR_CTRT_FEE_TRANSF UPDATE (PHA006 처리) 반영취소-->
	<update id="updateIfrCtrtFeeTransfCancel" parameterClass="java.util.HashMap">		
		UPDATE IFR_CTRT_FEE_TRANSF SET 
		       USE_YN='N'
		WHERE  TRANSF_REQ_YMD = #adj_base_work_day#
		AND    USE_YN = 'Y'
	</update>
	<!-- IFR_CTRT_FEE_TRANSF UPDATE (PHA006 처리) 반영취소 END -->	
	
	<!--이체결과 반영취소 ADJ_STATUS 삭제-->
	<delete id="deleteAdjStatus" parameterClass="java.util.HashMap">
		DELETE FROM ST_ADJ_STATUS
		WHERE  ADJ_DATE = TO_CHAR(SYSDATE, 'YYYYMMDD')
		AND    ADJ_STATUS = #adj_status#	
	</delete>
	<!--이체결과 반영취소 ADJ_STATUS 삭제 END -->
	
	<!-- 입금내역반영 step two ADJ_STATUS CHECK -->	   
	<select id="selectAdjStatusChkStepTwo" parameterClass="java.util.HashMap" resultClass="commMap">	
		SELECT (SELECT COUNT(*) FROM ST_ADJ_STATUS WHERE ADJ_DATE = TO_CHAR(SYSDATE, 'YYYYMMDD') AND ADJ_STATUS IN('2')) CONDITION_ADJ_STATUS_CNT_TWO,
			   (SELECT COUNT(*) FROM ST_ADJ_STATUS WHERE ADJ_DATE = TO_CHAR(SYSDATE, 'YYYYMMDD') AND ADJ_STATUS ='3') CURRENT_ADJ_STATUS_CNT_TWO
		FROM   DUAL
	</select>  
	<!-- 입금내역반영 step two ADJ_STATUS CHECK END -->		

	<!-- 이체결과 반영시 PHB001 요청데이타가 있는지 체크 카운트 -->		
	<select id="selectaAdjIfrRecevPoDeptAmtFileSeq" parameterClass="java.util.HashMap" resultClass="int">
		SELECT NVL(MAX(TRANSF_FILE_SEQ),0) AS TRANSF_FILE_SEQ
		FROM   IFR_RECEV_PO_DEP_AMT 
		WHERE  TRANSF_REQ_YMD = #adj_base_work_day#
	</select>	
	
	<!-- 접수국 입금내역 반영대상 조회 , 우체국 코드 검증 PHB000 -->
	<select id="selectAdjIfrRecevPoDeptAmtList" parameterClass="java.util.HashMap" resultClass="commMap">
	<![CDATA[	
		SELECT TRANSF_REQ_YMD
			 , TRANSF_DATA_SEQ 
			 , DEPOT_ECODE
			 , DEPOT_CNT
			 , DEPOT_AMT
			 , DEPOT_HMS
			 , DEPOT_CONT
			 , LAST_REG_DATE
			 , (SELECT REGIPOCD FROM  PICMT0060 BB WHERE BB.EDPSCD=AA.DEPOT_ECODE AND BB.USEYN='Y' AND BB.DSCDPOYN='N' AND BB.PODIVCD NOT IN ('16')) AS REGIPOCD  /* TO-BE 에서 MERGE */
			 , (
			   SELECT count(1) AS CNT
			   FROM PICMT0060 CC
			   WHERE CC.EDPSCD = AA.DEPOT_ECODE
			   AND USEYN = 'Y'
			   AND DSCDPOYN = 'N'
			   AND PODIVCD NOT IN ('16')	/*	우체국구분코드 SYSTEM_CODE P48  16:운송거점 */				
			   ) AS ECODE_CNT			/* TO-BE 에서 MERGE */									
		FROM   IFR_RECEV_PO_DEP_AMT AA
		WHERE  TRANSF_REQ_YMD  = #adj_base_work_day#
		AND    TRANSF_FILE_SEQ = #transf_file_seq#
		AND    TRANSF_DATA_SEQ > 0
		AND    DEPOT_CNT <> 89903
		AND    DEPOT_CNT <> 99997
		AND    DEPOT_CNT <> 99991
		AND    DEPOT_CNT <> 99996
		AND    DEPOT_CNT <> 99993
		AND    DEPOT_CNT <> 99995
		AND    DEPOT_CNT <> 99992
		AND    DEPOT_CNT <> 99994
		AND    DEPOT_CNT <> 99998
		ORDER BY TRANSF_DATA_SEQ
		]]>		
	</select>
	<!-- 접수국 입금내역 반영대상 조회 PHB000 END -->
	
	<!-- STEP2 등기국용 기호 검증-->
	<select id="selectAdjPICMT0060Cnt" parameterClass="java.util.HashMap" resultClass="int">
		<![CDATA[	
		SELECT COUNT(1) AS CNT
		FROM   PICMT0060
		WHERE  EDPSCD = #depot_ecode#
		AND    USEYN = 'Y'
		AND    DSCDPOYN = 'N'
		AND    PODIVCD NOT IN ('16')	/*	우체국구분코드 SYSTEM_CODE P48  16:운송거점 */
	]]>		
	</select>
	<!-- STEP2 등기국용 기호 검증 END-->	

	<!-- STEP2 입금내역반영 BUY_COMP_DEPOT_INFO INSERT -->
	<insert id="insertBuyCompDepotInfoAmt" parameterClass="java.util.HashMap">	
		INSERT INTO ST_BUY_COMP_DEPOT_INFO
		(
			  BUY_COMP_DEPOT_YMD
			, BUY_COMP_REQ_YMD
			, PAYMETHOD
			, BUY_COMP_CD
			, MEMBER_NO
			, BUY_COMP_DEPOT_AMT
			, CARD_DEPOT_STUS_CD
			, CARD_DEPOT_TREAT_YMD
		)
		VALUES 
		(
			  #transf_req_ymd#
			, #transf_req_ymd# 
			, '1'
			, '998'
			, '998'
			, #depot_amt#
			, '001'
			, NULL
		)
	</insert>	
	<!-- STEP2 입금내역반영 BUY_COMP_DEPOT_INFO INSERT -->
	
	<!-- STEP2 입금내역반영 RECEV_PO_DEP_AMT INSERT -->
	<insert id="insertRecevPoDeptAmt" parameterClass="java.util.HashMap">	
		INSERT INTO ST_RECEV_PO_DEP_AMT 
		(          
			  DEPOT_YMD
			, RECEV_PO_REGI_PO_CD
			, DEPOT_SEQ
			, DEPOT_AMT
			, DEPOT_HMS
			, DEPOT_CNT
			, WRKER_ID
			, EDPS_CD
			, MONEY_DEPOT_STUS_CD
			, MONEY_DEPOT_TREAT_YMD
		  )
		VALUES
		(   
			  #transf_req_ymd#
			, #regipocd#
			, #transf_data_seq#
			, #depot_amt#
			, #depot_hms#
			, #depot_cnt#
			, 'procedure'
			, #depot_ecode#
			, '001'            
			, TO_CHAR(SYSDATE, 'YYYYMMDD') 
		)   
	</insert>	
	<!-- STEP2 입금내역반영 RECEV_PO_DEP_AMT INSERT -->	
	
	<!-- 정산실행 입금내역 반영 취소 가능상태 체크 (AS-IS retriveAdjStatusChkCnt3_2) -->	   
	<select id="selectAdjStepTwoCancelCnt" parameterClass="java.util.HashMap" resultClass="commMap">					
 		SELECT  ( 
				SELECT COUNT(*)
				FROM ST_ADJ_STATUS
				WHERE ADJ_DATE = TO_CHAR(SYSDATE, 'YYYYMMDD')
				AND ADJ_STATUS IN ('4', '5', '6', '7')
				) AS CONDITION_ADJ_STATUS_CNT,
				(
				SELECT COUNT(*)
				FROM ST_ADJ_STATUS
				WHERE ADJ_DATE = TO_CHAR(SYSDATE, 'YYYYMMDD')
  				AND ADJ_STATUS ='3'
				) CURRENT_ADJ_STATUS_CNT
		FROM    DUAL
	</select>  	
	
	<!-- 입금내역 반영취소 ST_BUY_COMP_DEPOT_INFO DELETE 삭제-->
	<delete id="deleteBuyCompDepotInfoAmt" parameterClass="java.util.HashMap">
		DELETE FROM ST_BUY_COMP_DEPOT_INFO 
		WHERE  BUY_COMP_DEPOT_YMD = #adj_base_work_day# 
		AND    PAYMETHOD ='1'
		AND    BUY_COMP_CD = '998'
		AND    CARD_DEPOT_STUS_CD = '001'
	</delete>
	<!-- 입금내역 반영취소 ST_BUY_COMP_DEPOT_INFO DELETE 삭제 END -->	
	
	<!-- 입금내역 반영취소 ST_RECEV_PO_DEP_AMT DELETE 삭제-->
	<delete id="deleteRecevPoDeptAmt" parameterClass="java.util.HashMap">
		DELETE FROM ST_RECEV_PO_DEP_AMT 
		WHERE  MONEY_DEPOT_STUS_CD='001'
		AND    DEPOT_AMT > 0
		AND    DEPOT_YMD = #adj_base_work_day# 
	</delete>
	<!-- 입금내역 반영취소 ST_RECEV_PO_DEP_AMT DELETE 삭제 END -->	
	
	<!-- STEP3 입금내역 결과 서머리-->
	<select id="selectAdjReceiveResultSummary" parameterClass="java.util.HashMap" resultClass="commMap">	  
    <![CDATA[
        SELECT 
               1
             , SUM(DECODE(AMT_TYPE, 'CASH_NON_TREAT', TYPED_AMT, 0)) AS CASH_NON_TREAT
             , SUM(DECODE(AMT_TYPE, 'CASH_INCOME_AMT', TYPED_AMT, 0)) AS CASH_INCOME_AMT
             , SUM(DECODE(AMT_TYPE, 'CASH_FORCE_TREAT', TYPED_AMT, 0)) AS CASH_FORCE_TREAT
             , SUM(DECODE(AMT_TYPE, 'CASH_BASE_MATCHED_AMT1', TYPED_AMT, 0)) AS CASH_BASE_MATCHED_AMT1
             , SUM(DECODE(AMT_TYPE, 'CASH_BASE_MATCHED_AMT2', TYPED_AMT, 0)) AS CASH_BASE_MATCHED_AMT2
             , SUM(DECODE(AMT_TYPE, 'CASH_ORD_NON_TREAT', TYPED_AMT, 0)) AS CASH_ORD_NON_TREAT
             , SUM(DECODE(AMT_TYPE, 'CASH_BASE_NON_MATCHED', TYPED_AMT, 0)) AS CASH_BASE_NON_MATCHED
             , SUM(DECODE(AMT_TYPE, 'CARD_NON_TREAT', TYPED_AMT, 0)) AS CARD_NON_TREAT
             , SUM(DECODE(AMT_TYPE, 'CARD_INCOME_AMT', TYPED_AMT, 0)) AS CARD_INCOME_AMT
             , SUM(DECODE(AMT_TYPE, 'CARD_BASE_MATCHED_AMT1', TYPED_AMT, 0)) AS CARD_BASE_MATCHED_AMT1
             , SUM(DECODE(AMT_TYPE, 'CARD_BASE_MATCHED_AMT2', TYPED_AMT, 0)) AS CARD_BASE_MATCHED_AMT2
             , SUM(DECODE(AMT_TYPE, 'CARD_ORD_NON_TREAT', TYPED_AMT, 0)) AS CARD_ORD_NON_TREAT
             , SUM(DECODE(AMT_TYPE, 'CARD_BASE_NON_MATCHED', TYPED_AMT, 0)) AS CARD_BASE_NON_MATCHED
        FROM
        (
          SELECT 'DUMMY' AS AMT_TYPE, 0 AS TYPED_AMT FROM DUAL
          UNION ALL
          /* 기준일 기준 전일까지 현금입금 미처리금액 */
          SELECT 
                 'CASH_NON_TREAT' AS AMT_TYPE
               , SUM(CASH_NON_TREAT) AS CASH_NON_TREAT
          FROM
          (
            SELECT NVL(SUM(A.DEPOT_AMT), 0) AS CASH_NON_TREAT
            FROM   ST_RECEV_PO_DEP_AMT A
            WHERE  A.DEPOT_YMD < #adj_work_cal_ymd#
            AND    A.MONEY_DEPOT_STUS_CD='001'
            UNION ALL
            SELECT NVL(SUM(A.DEPOT_AMT), 0) AS CASH_NON_TREAT  
            FROM   ST_RECEV_PO_DEP_AMT A
            WHERE  A.DEPOT_YMD < #adj_work_cal_ymd#
            AND    A.MONEY_DEPOT_STUS_CD='002'
            AND    A.MONEY_DEPOT_TREAT_YMD > #adj_work_cal_ymd#
          )
          UNION ALL
          /* 기준일 기준 당일 현금입금금액 */
          SELECT 'CASH_INCOME_AMT' AS AMT_TYPE
                , NVL(SUM(A.DEPOT_AMT), 0) AS CASH_INCOME_AMT
          FROM    ST_RECEV_PO_DEP_AMT A
          WHERE   A.DEPOT_YMD = #adj_work_cal_ymd#
          UNION ALL
          /* 조회일 기준 초과입금 처리액 조회 */ 
          SELECT 
                 'CASH_FORCE_TREAT' AS AMT_TYPE
                , SUM(CASH_FORCE_TREAT) AS CASH_ORD_NON_TREAT
          FROM
              (
	            SELECT NVL(SUM(A.DEPOT_AMT), 0) AS CASH_FORCE_TREAT
	            FROM   ST_RECEV_PO_DEP_NO_CHG A
	            WHERE  1=1
	            AND    A.TRANSF_DATA_DIV_CD = '06'
	            AND    A.TRANSF_REQ_YMD <= #adj_date#
	            AND    A.MONEY_DEPOT_STUS_CD = '001'
	            UNION ALL
	            SELECT NVL(SUM(A.DEPOT_AMT), 0) AS CASH_FORCE_TREAT
	            FROM   ST_RECEV_PO_DEP_NO_CHG A
	            WHERE  1=1
	            AND    A.TRANSF_DATA_DIV_CD = '06'
	            AND    A.TRANSF_REQ_YMD <= #adj_date#
	            AND    A.MONEY_DEPOT_STUS_CD IN('003', '004')
	            AND    MONEY_TRANSF_TREAT_YMD = #adj_date#
        	)
          UNION ALL
          /* 조회일 기준 당일 대사완료금액 1 */
          SELECT 'CASH_BASE_MATCHED_AMT1' AS AMT_TYPE
                , NVL(SUM(A.DEPOT_AMT), 0) AS CASH_BASE_MATCHED_AMT1
          FROM    ST_RECEV_PO_DEP_AMT A
          WHERE   A.MONEY_DEPOT_STUS_CD='002'
          AND     A.MONEY_DEPOT_TREAT_YMD = #adj_date#
          UNION ALL
          /* 조회일 기준 당일 대사완료금액 2 */
          SELECT /*+ INDEX(B ST_RECEV_PO_ADJ_COMPARE_IX01) */
                 'CASH_BASE_MATCHED_AMT2' AS AMT_TYPE
                , NVL(SUM(B.MONEY_SETL_AMT * DECODE(RECEV_ADJ_TRGT_DIV_CD, '01', 1, '02', -1, 0)), 0) AS CASH_BASE_MATCHED_AMT2
          FROM    ST_RECEV_PO_ADJ_COMPARE B
          WHERE   B.MONEY_DEPOT_STUS_CD='002'
          AND     B.MONEY_DEPOT_TREAT_YMD= #adj_date#
          /*AND B.RECEV_PO_ADJ_TRGT_YMD > '조회일_기준_최종_정산일' --튜닝*/
          UNION ALL
          /* 기준일 기준 미처리 접수금액 */
          SELECT  
                  'CASH_ORD_NON_TREAT' AS AMT_TYPE
                , SUM(CASH_ORD_NON_TREAT) AS CASH_ORD_NON_TREAT
          FROM
          (
            SELECT /*+ INDEX(B ST_RECEV_PO_ADJ_COMPARE_IX01) */
                   NVL(SUM(B.MONEY_SETL_AMT * DECODE(B.RECEV_ADJ_TRGT_DIV_CD, '01', 1, '02', -1, 0)) , 0) AS CASH_ORD_NON_TREAT
            FROM   ST_RECEV_PO_ADJ_COMPARE B
            WHERE  B.RECEV_PO_ADJ_TRGT_YMD <= #adj_work_cal_ymd#
            AND    B.MONEY_DEPOT_STUS_CD='001'
            UNION ALL
            SELECT NVL(SUM(B.MONEY_SETL_AMT * DECODE(B.RECEV_ADJ_TRGT_DIV_CD, '01', 1, '02', -1, 0)), 0) AS CASH_ORD_NON_TREAT
            FROM   ST_RECEV_PO_ADJ_COMPARE B
            WHERE  B.RECEV_PO_ADJ_TRGT_YMD <= #adj_work_cal_ymd#
            AND    B.MONEY_DEPOT_STUS_CD='002'
            AND    B.MONEY_DEPOT_TREAT_YMD > #adj_date#
          )
          UNION ALL
          /* 조회일 기준 당일미처리 입금금액 */
          SELECT 
                 'CASH_BASE_NON_MATCHED' AS AMT_TYPE
               , SUM(CASH_BASE_NON_MATCHED) AS CASH_BASE_NON_MATCHED
          FROM
          (
            SELECT NVL(SUM(A.DEPOT_AMT), 0) AS CASH_BASE_NON_MATCHED 
            FROM   ST_RECEV_PO_DEP_AMT A
            WHERE  A.DEPOT_YMD <= #adj_work_cal_ymd#
            AND    A.MONEY_DEPOT_STUS_CD='001'
            UNION ALL
            SELECT NVL(SUM(A.DEPOT_AMT), 0) AS CASH_BASE_NON_MATCHED 
            FROM   ST_RECEV_PO_DEP_AMT A
            WHERE  A.DEPOT_YMD <= #adj_work_cal_ymd#
            AND    A.MONEY_DEPOT_STUS_CD='002'
            AND    A.MONEY_DEPOT_TREAT_YMD > #adj_date#
          )
          UNION ALL
          /* 기준일 기준 전일까지 결제수단별 입금 미처리금액 */
          SELECT 
                 'CARD_NON_TREAT' AS AMT_TYPE
               , SUM(CARD_NON_TREAT) AS CARD_NON_TREAT
          FROM
          (
	          SELECT NVL(SUM(A.BUY_COMP_DEPOT_AMT), 0) AS CARD_NON_TREAT
	          FROM   ST_BUY_COMP_DEPOT_INFO A
	          WHERE  A.BUY_COMP_REQ_YMD < #adj_work_cal_ymd#
	          AND    A.CARD_DEPOT_STUS_CD='001'
	          AND    A.BUY_COMP_CD != '998'
	          UNION ALL
	          SELECT NVL(SUM(A.BUY_COMP_DEPOT_AMT), 0) AS CARD_NON_TREAT  
	          FROM   ST_BUY_COMP_DEPOT_INFO A
	          WHERE  A.BUY_COMP_REQ_YMD < #adj_work_cal_ymd#
	          AND    A.CARD_DEPOT_STUS_CD = '002'
	          AND    A.CARD_DEPOT_TREAT_YMD > #adj_work_cal_ymd#
	          AND    A.BUY_COMP_CD != '998'
          )
          UNION ALL
          /* 기준일 기준 당일 현금입금금액 */
          SELECT 'CARD_INCOME_AMT' AS AMT_TYPE
               , NVL(SUM(A.BUY_COMP_DEPOT_AMT), 0) AS CARD_INCOME_AMT
          FROM   ST_BUY_COMP_DEPOT_INFO A
          WHERE  A.BUY_COMP_REQ_YMD = #adj_work_cal_ymd#
          AND    A.BUY_COMP_CD != '998'
          UNION ALL
          /* 조회일 기준 당일 대사완료금액 1 */
          SELECT 'CARD_BASE_MATCHED_AMT1' AS AMT_TYPE
               , NVL(SUM(A.BUY_COMP_DEPOT_AMT), 0) AS CARD_BASE_MATCHED_AMT1
          FROM   ST_BUY_COMP_DEPOT_INFO A
          WHERE  A.CARD_DEPOT_STUS_CD='002'
          AND    A.CARD_DEPOT_TREAT_YMD = #adj_date#
          AND    A.BUY_COMP_CD != '998'
          UNION ALL
          /* 조회일 기준 당일 대사완료금액 2 */
          SELECT 'CARD_BASE_MATCHED_AMT2' AS AMT_TYPE
               , NVL(SUM(B.RECEV_AMT - B.FEE_AMT), 0) AS CARD_BASE_MATCHED_AMT2
          FROM   ST_PAYMETHOD_ADJ_COMPARE B
          WHERE  B.DEPOT_STUS_CD='002'
          AND    B.DEPOT_TREAT_YMD= #adj_date#
          /* AND B.PAYMETHOD_ADJ_TRGT_YMD > '조회일_기준_최종_정산일' --튜닝 */
          UNION ALL
          /* 기준일 기준 미처리 접수금액 */ 
          SELECT 
                 'CARD_ORD_NON_TREAT' AS AMT_TYPE
               , SUM(CARD_ORD_NON_TREAT) AS CARD_ORD_NON_TREAT
          FROM
          (
	          SELECT NVL(SUM(B.RECEV_AMT - FEE_AMT) , 0) AS CARD_ORD_NON_TREAT
	          FROM   ST_PAYMETHOD_ADJ_COMPARE B
	          WHERE  B.PAYMETHOD_ADJ_TRGT_YMD <= #adj_work_cal_ymd#
	          AND    B.DEPOT_STUS_CD='001'
	          UNION ALL
	          SELECT NVL(SUM(B.RECEV_AMT - FEE_AMT), 0) AS CARD_ORD_NON_TREAT
	          FROM   ST_PAYMETHOD_ADJ_COMPARE B
	          WHERE  B.PAYMETHOD_ADJ_TRGT_YMD <= #adj_work_cal_ymd#
	          AND    B.DEPOT_STUS_CD='002'
	          AND    B.DEPOT_TREAT_YMD > #adj_date#
          )
          UNION ALL
          /* 조회일 기준 당일미처리 입금금액 */
          SELECT 
                 'CARD_BASE_NON_MATCHED' AS AMT_TYPE
               , SUM(CARD_BASE_NON_MATCHED) AS CARD_BASE_NON_MATCHED
          FROM
          (
	          SELECT NVL(SUM(A.BUY_COMP_DEPOT_AMT), 0) AS CARD_BASE_NON_MATCHED 
	          FROM   ST_BUY_COMP_DEPOT_INFO A
	          WHERE  A.BUY_COMP_REQ_YMD <= #adj_work_cal_ymd#
	          AND    A.CARD_DEPOT_STUS_CD='001'
	          AND    A.BUY_COMP_CD != '998'
	          UNION ALL
	          SELECT NVL(SUM(A.BUY_COMP_DEPOT_AMT), 0) AS CARD_BASE_NON_MATCHED 
	          FROM   ST_BUY_COMP_DEPOT_INFO A
	          WHERE  A.BUY_COMP_REQ_YMD <= #adj_work_cal_ymd#
	          AND    A.CARD_DEPOT_STUS_CD='V002'
	          AND    A.CARD_DEPOT_TREAT_YMD > #adj_date#
	          AND    A.BUY_COMP_CD != '998'
          )
        )
    ]]>
	</select>
	<!-- STEP3 입금내역 결과 서머리 END -->	    
    	
	<!-- 입금대사반영 step three ADJ_STATUS CHECK -->	   
	<select id="selectAdjStatusChkStepThree" parameterClass="java.util.HashMap" resultClass="commMap">	
		SELECT  ( 
				SELECT COUNT(*)
				FROM   ST_ADJ_STATUS
				WHERE  ADJ_DATE = TO_CHAR(SYSDATE, 'YYYYMMDD')
				AND    ADJ_STATUS IN('3')
				) CONDITION_ADJ_STATUS_CNT_THREE,
				(
				SELECT COUNT(*)
				FROM   ST_ADJ_STATUS
				WHERE  ADJ_DATE = TO_CHAR(SYSDATE, 'YYYYMMDD')
				AND    ADJ_STATUS ='4'
				) CURRENT_ADJ_STATUS_CNT_THREE
		FROM DUAL
	</select>  
	<!-- 입금내역반영 step three ADJ_STATUS CHECK END -->		    	
    	
    	
	<!--현금 입금내역 대사처리-->
	<select id="selectSettleReceiveResult1_1" parameterClass="java.util.HashMap" resultClass="commMap">	  
    <![CDATA[
    	SELECT X.RECEV_PO_REGI_PO_CD
        FROM   (
               SELECT /*+ INDEX(B ST_RECEV_PO_ADJ_COMPARE_IX01) */
                      B.RECEV_PO_REGI_PO_CD, NVL(SUM(B.MONEY_SETL_AMT * DECODE(RECEV_ADJ_TRGT_DIV_CD, '01', 1, '02', -1, 0)), 0) SUMAMT 
               FROM   ST_RECEV_PO_ADJ_COMPARE B
               WHERE  B.MONEY_DEPOT_STUS_CD='001'
               GROUP BY B.RECEV_PO_REGI_PO_CD
               ) X,
               (
               SELECT A.RECEV_PO_REGI_PO_CD,NVL(SUM(A.DEPOT_AMT), 0) SUMAMT 
               FROM   ST_RECEV_PO_DEP_AMT A
               WHERE  A.MONEY_DEPOT_STUS_CD='001'
               GROUP BY A.RECEV_PO_REGI_PO_CD
               ) Y
    	WHERE  X.RECEV_PO_REGI_PO_CD = Y.RECEV_PO_REGI_PO_CD
        AND    X.SUMAMT = Y.SUMAMT
    ]]>  
    </select>  	
    
    <!--현금 입금내역 대사처리	selectSettleReceiveResult1_1 loop 처리 -->
	<update id="updateSettleReceiveResult1_2" parameterClass="java.util.HashMap">		
        UPDATE ST_RECEV_PO_ADJ_COMPARE 
        SET    MONEY_DEPOT_STUS_CD = '002'
             , MONEY_DEPOT_TREAT_YMD = TO_CHAR(SYSDATE, 'YYYYMMDD')
        WHERE  RECEV_PO_REGI_PO_CD = #recev_po_regi_po_cd#
        AND    MONEY_DEPOT_STUS_CD = '001'
	</update>   
	
    <!--현금 입금내역 대사처리	selectSettleReceiveResult1_1 loop 처리 -->
	<update id="updateSettleReceiveResult1_3" parameterClass="java.util.HashMap">		
        UPDATE ST_RECEV_PO_DEP_AMT 
        SET    MONEY_DEPOT_STUS_CD = '002'
             , MONEY_DEPOT_TREAT_YMD = TO_CHAR(SYSDATE, 'YYYYMMDD')
        WHERE  RECEV_PO_REGI_PO_CD = #recev_po_regi_po_cd#
        AND    MONEY_DEPOT_STUS_CD = '001'
	</update>  	
	
    <!--현금 입금내역 대사처리	selectSettleReceiveResult1_1 loop 처리(취급소) -->
	<update id="updateSettleReceiveResult1_4" parameterClass="java.util.HashMap">		
        UPDATE ST_TREAT_POST_DEPOT_MGMT SET 
			   MONEY_DEPOT_STUS_CD = '002'
			 , MONEY_DEPOT_TREAT_YMD = TO_CHAR(SYSDATE, 'YYYYMMDD')
        WHERE  MONEY_DEPOT_STUS_CD = '001'
        AND    DEPOT_PO_REGI_PO_CD = RECEV_PO_REGI_PO_CD
        AND    DEPOT_PO_REGI_PO_CD = #recev_po_regi_po_cd#
	</update>  	 
	
	<!-- 현금 입금내역 대사처리 (금융국+취급국) --> 
	<select id="selectSettleReceiveResult1_1_1" parameterClass="java.util.HashMap" resultClass="commMap">	  	
		SELECT X.RECEV_PO_REGI_PO_CD
		FROM 
	    	(
	        SELECT 
	               A.RECEV_PO_REGI_PO_CD
	             , NVL(SUM(A.DEPOT_AMT), 0) SUMAMT
	        FROM ST_RECEV_PO_DEP_AMT A
	        WHERE A.MONEY_DEPOT_STUS_CD='001'
	        GROUP BY A.RECEV_PO_REGI_PO_CD
	        ) X ,
	        (
	        SELECT RECEV_PO_REGI_PO_CD, SUM(SUMAMT) AS SUMAMT
	        FROM
	           (
	               SELECT /*+ INDEX(B ST_RECEV_PO_ADJ_COMPARE_IX01) */
	                      B.RECEV_PO_REGI_PO_CD
	                    , NVL(SUM(B.MONEY_SETL_AMT * DECODE(RECEV_ADJ_TRGT_DIV_CD, '01', 1, '02', -1, 0)), 0) SUMAMT 
	               FROM   ST_RECEV_PO_ADJ_COMPARE B
	               WHERE  B.MONEY_DEPOT_STUS_CD='001'
	               AND    B.RECEV_PO_REGI_PO_CD NOT IN (
	                                 SELECT /*+ INDEX(B ST_RECEV_PO_ADJ_COMPARE_IX01) USE_NL(B A) */
	                                        A.RECEV_PO_REGI_PO_CD
	                                 FROM   ST_TREAT_POST_DEPOT_MGMT A, ST_RECEV_PO_ADJ_COMPARE B
	                                 WHERE  B.MONEY_DEPOT_STUS_CD='001'
	                                 AND    A.RECEV_PO_REGI_PO_CD = B.RECEV_PO_REGI_PO_CD
	                                 AND    A.SELL_CLOSE_YMD = B.RECEV_PO_ADJ_TRGT_YMD
	                                 GROUP BY A.RECEV_PO_REGI_PO_CD
	                              )
	               GROUP BY B.RECEV_PO_REGI_PO_CD
	               UNION ALL
	               SELECT DEPOT_PO_REGI_PO_CD, SUMAMT
	               FROM
	                 (
	                 SELECT /*+ INDEX(B ST_RECEV_PO_ADJ_COMPARE_IX01) USE_NL(B A) */
	                        A.DEPOT_PO_REGI_PO_CD
	                      , NVL(SUM(B.MONEY_SETL_AMT * DECODE(RECEV_ADJ_TRGT_DIV_CD, '01', 1, '02', -1, 0)), 0) SUMAMT
	                 FROM   ST_TREAT_POST_DEPOT_MGMT A, ST_RECEV_PO_ADJ_COMPARE B
	                 WHERE B.MONEY_DEPOT_STUS_CD='001'
	                 AND   A.RECEV_PO_REGI_PO_CD = B.RECEV_PO_REGI_PO_CD
	                 AND   A.SELL_CLOSE_YMD = B.RECEV_PO_ADJ_TRGT_YMD
	                 AND   A.RECEV_PO_REGI_PO_CD IN
	                            (
	                            SELECT A.RECEV_PO_REGI_PO_CD
	                            FROM ST_TREAT_POST_DEPOT_MGMT A
	                            WHERE A.MONEY_DEPOT_STUS_CD='001'
	                            GROUP BY A.RECEV_PO_REGI_PO_CD
	                            HAVING COUNT(DISTINCT DEPOT_PO_REGI_PO_CD) = 1
	                            )
	                 GROUP BY A.DEPOT_PO_REGI_PO_CD
	                 )A
	             )
	        GROUP BY RECEV_PO_REGI_PO_CD
	        ) Y
    	WHERE  X.RECEV_PO_REGI_PO_CD = Y.RECEV_PO_REGI_PO_CD
    	AND    X.SUMAMT = Y.SUMAMT
	</select>                
	<!-- 현금 입금내역 대사처리 (금융국+취급국) -->  
	
    <!--현금 입금내역 대사처리	settleReceiveResult1_1_1 loop 처리(금융국+취급국) -->
	<update id="updateSettleReceiveResult1_2_1" parameterClass="java.util.HashMap">	
        UPDATE ST_RECEV_PO_ADJ_COMPARE SET 
        	   MONEY_DEPOT_STUS_CD = '002'
          	 , MONEY_DEPOT_TREAT_YMD = TO_CHAR(SYSDATE, 'YYYYMMDD')
        WHERE  MONEY_DEPOT_STUS_CD = '001'
        AND    RECEV_PO_REGI_PO_CD IN
          				(
                         SELECT B.RECEV_PO_REGI_PO_CD
                         FROM   ST_TREAT_POST_DEPOT_MGMT A, ST_RECEV_PO_ADJ_COMPARE B
                         WHERE  B.MONEY_DEPOT_STUS_CD='001'
                         AND    A.RECEV_PO_REGI_PO_CD = B.RECEV_PO_REGI_PO_CD
                         AND    A.SELL_CLOSE_YMD = B.RECEV_PO_ADJ_TRGT_YMD
                         AND    A.DEPOT_PO_REGI_PO_CD = #recev_po_regi_po_cd#
						)		
	</update>  	 	  
	
    <!--현금 입금내역 대사처리	settleReceiveResult1_1_1 loop 처리(금융국+취급국) -->
	<update id="updateSettleReceiveResult1_2_2" parameterClass="java.util.HashMap">	
		UPDATE ST_TREAT_POST_DEPOT_MGMT SET 
			   MONEY_DEPOT_STUS_CD = '002'
			 , MONEY_DEPOT_TREAT_YMD = TO_CHAR(SYSDATE, 'YYYYMMDD')
		WHERE  MONEY_DEPOT_STUS_CD = '001'
		AND    DEPOT_PO_REGI_PO_CD = #recev_po_regi_po_cd#
	</update>  	 	 
	
	<!-- 현금 입금내역 대사처리 (비금융국) --> 
	<select id="selectSettleReceiveResult1_1_2" parameterClass="java.util.HashMap" resultClass="commMap">	  	
		SELECT  X.RECEV_PO_REGI_PO_CD
		FROM    (
		         SELECT A.RECEV_PO_REGI_PO_CD
		              , NVL(SUM(A.DEPOT_AMT), 0) SUMAMT
		         FROM   ST_RECEV_PO_DEP_AMT A
		         WHERE  A.MONEY_DEPOT_STUS_CD='001'
		         GROUP BY A.RECEV_PO_REGI_PO_CD
		        ) X ,
		        (
		         SELECT /*+ INDEX(B ST_RECEV_PO_ADJ_COMPARE_IX01) USE_NL(B A) */
		                    A.DEPOT_PO_REGI_PO_CD 
		                    , NVL(SUM(B.MONEY_SETL_AMT * DECODE(RECEV_ADJ_TRGT_DIV_CD, '01', 1, '02', -1, 0)), 0) SUMAMT
		         FROM ST_TREAT_POST_DEPOT_MGMT A, ST_RECEV_PO_ADJ_COMPARE B
		         WHERE B.MONEY_DEPOT_STUS_CD='001'
		         AND A.RECEV_PO_REGI_PO_CD = B.RECEV_PO_REGI_PO_CD
		         AND A.SELL_CLOSE_YMD = B.RECEV_PO_ADJ_TRGT_YMD
		         AND A.RECEV_PO_REGI_PO_CD IN(
		                            SELECT A.RECEV_PO_REGI_PO_CD
		                            FROM ST_TREAT_POST_DEPOT_MGMT A
		                            WHERE A.MONEY_DEPOT_STUS_CD='001'
		                            GROUP BY A.RECEV_PO_REGI_PO_CD
		                            HAVING COUNT(DISTINCT DEPOT_PO_REGI_PO_CD) = 1
		                       )
		         GROUP BY A.DEPOT_PO_REGI_PO_CD
		        ) Y
		WHERE   X.RECEV_PO_REGI_PO_CD = Y.DEPOT_PO_REGI_PO_CD
		AND     X.SUMAMT = Y.SUMAMT
	</select>                
	<!-- 현금 입금내역 대사처리 (비금융국) -->	       
	
	<!-- 현금 입금내역 대사처리 금융국 일별 -->	 
	<select id="selectSettleReceiveResult2_1" parameterClass="java.util.HashMap" resultClass="commMap">	 	   	
		SELECT X.RECEV_PO_REGI_PO_CD, X.YMD
		FROM
		  (
		      SELECT /*+ INDEX(B ST_RECEV_PO_ADJ_COMPARE_IX01) */
		             B.RECEV_PO_REGI_PO_CD, B.RECEV_PO_ADJ_TRGT_YMD YMD
		           , NVL(SUM(B.MONEY_SETL_AMT * DECODE(RECEV_ADJ_TRGT_DIV_CD, '01', 1, '02', -1, 0)), 0) SUMAMT
		      FROM   ST_RECEV_PO_ADJ_COMPARE B
		      WHERE  B.MONEY_DEPOT_STUS_CD='001'
		      GROUP BY B.RECEV_PO_REGI_PO_CD, B.RECEV_PO_ADJ_TRGT_YMD
		  ) X,
		  (
		      SELECT A.RECEV_PO_REGI_PO_CD
		           , A.DEPOT_YMD YMD, SUM(A.DEPOT_AMT) SUMAMT
		      FROM   ST_RECEV_PO_DEP_AMT A
		      WHERE  A.MONEY_DEPOT_STUS_CD='001'
		      GROUP BY A.RECEV_PO_REGI_PO_CD, A.DEPOT_YMD
		  ) Y
		WHERE X.RECEV_PO_REGI_PO_CD = Y.RECEV_PO_REGI_PO_CD
		AND   X.YMD = Y.YMD
		AND   X.SUMAMT = Y.SUMAMT	
	</select>		         
	<!-- 현금 입금내역 대사처리 금융국 일별 END -->	 
	
    <!--현금 입금내역 대사처리	settleReceiveResult2_1 loop 처리 일별 금융국 -->
	<update id="updateSettleReceiveResult2_2" parameterClass="java.util.HashMap">	
		UPDATE ST_RECEV_PO_ADJ_COMPARE SET 
			   MONEY_DEPOT_STUS_CD = '002'
			 , MONEY_DEPOT_TREAT_YMD = TO_CHAR(SYSDATE, 'YYYYMMDD')
		WHERE  RECEV_PO_REGI_PO_CD = #recev_po_regi_po_cd#
		AND    RECEV_PO_ADJ_TRGT_YMD = #ymd#
		AND    MONEY_DEPOT_STUS_CD = '001'
	</update> 
	
    <!--현금 입금내역 대사처리	settleReceiveResult2_1 loop 처리 일별 금융국 -->
	<update id="updateSettleReceiveResult2_3" parameterClass="java.util.HashMap">	
		UPDATE ST_RECEV_PO_DEP_AMT SET 
			   MONEY_DEPOT_STUS_CD = '002'
			 , MONEY_DEPOT_TREAT_YMD = TO_CHAR(SYSDATE, 'YYYYMMDD')
		WHERE  RECEV_PO_REGI_PO_CD = #recev_po_regi_po_cd#
		AND    DEPOT_YMD = #ymd#
		AND    MONEY_DEPOT_STUS_CD = '001'
	</update>  	 	
	
	<!-- 현금 입금내역 대사처리 금융국+비금융국 일별 -->	 
	<select id="selectSettleReceiveResult2_1_1" parameterClass="java.util.HashMap" resultClass="commMap">	 	   	
		SELECT  X.RECEV_PO_REGI_PO_CD, X.DEPOT_YMD AS YMD
		FROM    (
		        SELECT A.RECEV_PO_REGI_PO_CD
		             , A.DEPOT_YMD
		             , NVL(SUM(A.DEPOT_AMT), 0) SUMAMT
		        FROM   ST_RECEV_PO_DEP_AMT A
		        WHERE  A.MONEY_DEPOT_STUS_CD='001'
		        GROUP BY A.RECEV_PO_REGI_PO_CD, A.DEPOT_YMD
		        ) X ,
		        (
		        SELECT RECEV_PO_REGI_PO_CD
		             , RECEV_PO_ADJ_TRGT_YMD
		             , SUM(SUMAMT) AS SUMAMT
		        FROM
		        (
		              SELECT /*+ INDEX(B ST_RECEV_PO_ADJ_COMPARE_IX01) */
		                     B.RECEV_PO_REGI_PO_CD
		                   , B.RECEV_PO_ADJ_TRGT_YMD
		                   , NVL(SUM(B.MONEY_SETL_AMT * DECODE(RECEV_ADJ_TRGT_DIV_CD, '01', 1, '02', -1, 0)), 0) SUMAMT 
		              FROM   ST_RECEV_PO_ADJ_COMPARE B
		              WHERE  B.MONEY_DEPOT_STUS_CD='001'
		              AND    (B.RECEV_PO_REGI_PO_CD, B.RECEV_PO_ADJ_TRGT_YMD) NOT IN (
		                                  SELECT /*+ INDEX(B ST_RECEV_PO_ADJ_COMPARE_IX01) USE_NL(B A) */
		                                         A.RECEV_PO_REGI_PO_CD
		                                       , ( SELECT MIN(WORKCALEYMD) AS WORKCALEYMD FROM PIEMT0160 WHERE RCOCD = '00' AND HOLDAYYN = 'N' AND WORKCALEYMD > A.SELL_CLOSE_YMD ) AS SELL_CLOSE_YMD
		                                  FROM   ST_TREAT_POST_DEPOT_MGMT A, ST_RECEV_PO_ADJ_COMPARE B
		                                  WHERE  B.MONEY_DEPOT_STUS_CD='001'
		                                  AND    A.RECEV_PO_REGI_PO_CD = B.RECEV_PO_REGI_PO_CD
		                                  AND    A.SELL_CLOSE_YMD = B.RECEV_PO_ADJ_TRGT_YMD
		                                 GROUP BY A.RECEV_PO_REGI_PO_CD, A.SELL_CLOSE_YMD
		                              )
		              GROUP BY B.RECEV_PO_REGI_PO_CD, B.RECEV_PO_ADJ_TRGT_YMD
		              UNION ALL
		              SELECT /*+ INDEX(B ST_RECEV_PO_ADJ_COMPARE_IX01) USE_NL(B A) */
		                     A.DEPOT_PO_REGI_PO_CD
		               	   , ( SELECT MIN(WORKCALEYMD) AS WORKCALEYMD FROM PIEMT0160 WHERE RCOCD = '00' AND HOLDAYYN = 'N' AND WORKCALEYMD > A.SELL_CLOSE_YMD ) AS SELL_CLOSE_YMD
		                   , NVL(SUM(B.MONEY_SETL_AMT * DECODE(RECEV_ADJ_TRGT_DIV_CD, '01', 1, '02', -1, 0)), 0) SUMAMT
		              FROM   ST_TREAT_POST_DEPOT_MGMT A, ST_RECEV_PO_ADJ_COMPARE B
		              WHERE  B.MONEY_DEPOT_STUS_CD='001'
		              AND    A.RECEV_PO_REGI_PO_CD = B.RECEV_PO_REGI_PO_CD
		              AND    A.SELL_CLOSE_YMD = B.RECEV_PO_ADJ_TRGT_YMD
		             GROUP BY A.DEPOT_PO_REGI_PO_CD, A.SELL_CLOSE_YMD
		          )
		          GROUP BY RECEV_PO_REGI_PO_CD, RECEV_PO_ADJ_TRGT_YMD
		          HAVING SUM(SUMAMT) > 0
		        ) Y
		WHERE   X.RECEV_PO_REGI_PO_CD = Y.RECEV_PO_REGI_PO_CD
		AND     X.SUMAMT = Y.SUMAMT
		AND     X.DEPOT_YMD = Y.RECEV_PO_ADJ_TRGT_YMD
	</select>		         
	<!-- 현금 입금내역 대사처리 금융국+비금융국 일별 END -->	 		
	
    <!--현금 입금내역 대사처리	settleReceiveResult2_1_1 loop 처리 일별 금융국+비금융국 -->
	<update id="updateSettleReceiveResult2_2_1" parameterClass="java.util.HashMap">	
		UPDATE ST_RECEV_PO_ADJ_COMPARE SET 
			   MONEY_DEPOT_STUS_CD = '002'
 			 , MONEY_DEPOT_TREAT_YMD = TO_CHAR(SYSDATE, 'YYYYMMDD')
		WHERE  MONEY_DEPOT_STUS_CD = '001'
		AND    (RECEV_PO_REGI_PO_CD, RECEV_PO_ADJ_TRGT_YMD) IN (
				                 SELECT B.RECEV_PO_REGI_PO_CD, B.RECEV_PO_ADJ_TRGT_YMD
				                 FROM   ST_TREAT_POST_DEPOT_MGMT A, ST_RECEV_PO_ADJ_COMPARE B
				                 WHERE  B.MONEY_DEPOT_STUS_CD='001'
				                 AND    A.RECEV_PO_REGI_PO_CD = B.RECEV_PO_REGI_PO_CD
				                 AND    A.SELL_CLOSE_YMD = B.RECEV_PO_ADJ_TRGT_YMD
				                 AND    A.DEPOT_PO_REGI_PO_CD = #recev_po_regi_po_cd#
				                 AND    (SELECT MIN(WORKCALEYMD) AS WORKCALEYMD FROM PIEMT0160 WHERE RCOCD = '00' AND HOLDAYYN = 'N' AND WORKCALEYMD > A.SELL_CLOSE_YMD ) = #ymd#
		  				)
	</update>  	
	
    <!--현금 입금내역 대사처리	settleReceiveResult2_1_1 loop 처리 일별 금융국+비금융국 -->
	<update id="updateSettleReceiveResult2_2_2" parameterClass="java.util.HashMap">	
    <![CDATA[		
		UPDATE ST_TREAT_POST_DEPOT_MGMT A SET 
			   MONEY_DEPOT_STUS_CD = '002'
		WHERE  MONEY_DEPOT_STUS_CD = '001'
		AND    DEPOT_PO_REGI_PO_CD = #recev_po_regi_po_cd#
		AND    (SELECT MIN(WORKCALEYMD) AS WORKCALEYMD FROM PIEMT0160 WHERE RCOCD = '00' AND HOLDAYYN = 'N' AND WORKCALEYMD > A.SELL_CLOSE_YMD ) = #ymd#
    ]]>				   
	</update>  
	
	<!-- 현금 입금내역 대사처리 비금융국 일별 -->	 
	<select id="selectSettleReceiveResult2_1_2" parameterClass="java.util.HashMap" resultClass="commMap">	
    <![CDATA[		 	   	
		SELECT X.RECEV_PO_REGI_PO_CD, X.DEPOT_YMD AS YMD
	    FROM (
	          SELECT A.RECEV_PO_REGI_PO_CD
			   	   , A.DEPOT_YMD, NVL(SUM(A.DEPOT_AMT), 0) SUMAMT
	          FROM   ST_RECEV_PO_DEP_AMT A
	          WHERE  A.MONEY_DEPOT_STUS_CD='001'
	          GROUP BY A.RECEV_PO_REGI_PO_CD, A.DEPOT_YMD
	         ) X ,
	         (
	          SELECT /*+ INDEX(B ST_RECEV_PO_ADJ_COMPARE_IX01) USE_NL(B A) */
	                 A.DEPOT_PO_REGI_PO_CD
	               , ( SELECT MIN(WORKCALEYMD) AS WORKCALEYMD FROM PIEMT0160 WHERE RCOCD = '00' AND HOLDAYYN = 'N' AND WORKCALEYMD > A.SELL_CLOSE_YMD ) AS SELL_CLOSE_YMD
	               , NVL(SUM(B.MONEY_SETL_AMT * DECODE(RECEV_ADJ_TRGT_DIV_CD, '01', 1, '02', -1, 0)), 0) SUMAMT
	          FROM   ST_TREAT_POST_DEPOT_MGMT A, ST_RECEV_PO_ADJ_COMPARE B
	          WHERE  B.MONEY_DEPOT_STUS_CD='001'
	          AND    A.RECEV_PO_REGI_PO_CD = B.RECEV_PO_REGI_PO_CD
	          AND    A.SELL_CLOSE_YMD = B.RECEV_PO_ADJ_TRGT_YMD
	          GROUP BY A.DEPOT_PO_REGI_PO_CD, A.SELL_CLOSE_YMD
	         ) Y
	    WHERE X.RECEV_PO_REGI_PO_CD = Y.DEPOT_PO_REGI_PO_CD
	    AND   X.SUMAMT = Y.SUMAMT
	    AND   X.DEPOT_YMD = Y.SELL_CLOSE_YMD
    ]]>				    
	</select>		         
	<!-- 현금 입금내역 대사처리 비금융국 일별 END -->	
	
    <!--현금 입금내역 대사처리 updateSettleReceiveResult3_1	-->
	<update id="updateSettleReceiveResult3_1" parameterClass="java.util.HashMap">	
		UPDATE ST_RECEV_PO_ADJ_COMPARE SET 
			   MONEY_DEPOT_STUS_CD = '002'
		     , MONEY_DEPOT_TREAT_YMD = TO_CHAR(SYSDATE, 'YYYYMMDD')
		WHERE  RECEV_PO_REGI_PO_CD IN(
								  SELECT B.RECEV_PO_REGI_PO_CD
								  FROM   ST_RECEV_PO_ADJ_COMPARE B
								  WHERE  B.MONEY_DEPOT_STUS_CD='001'
								  GROUP BY B.RECEV_PO_REGI_PO_CD
								  HAVING SUM(B.MONEY_SETL_AMT * DECODE(B.RECEV_ADJ_TRGT_DIV_CD, '01', 1, '02', -1, 0)) = 0
								  )
		AND    MONEY_DEPOT_STUS_CD = '001' 
	</update>  	 
	
    <!--현금 입금내역 대사처리 updateSettleReceiveResult3_2	-->
	<update id="updateSettleReceiveResult3_2" parameterClass="java.util.HashMap">	
		UPDATE ST_RECEV_PO_DEP_AMT SET 
			   MONEY_DEPOT_STUS_CD = '002'
		     , MONEY_DEPOT_TREAT_YMD = TO_CHAR(SYSDATE, 'YYYYMMDD')
		WHERE  RECEV_PO_REGI_PO_CD IN(
								      SELECT A.RECEV_PO_REGI_PO_CD
								      FROM   ST_RECEV_PO_DEP_AMT A
								      WHERE  A.MONEY_DEPOT_STUS_CD='001'
								      GROUP BY A.RECEV_PO_REGI_PO_CD
								      HAVING SUM(A.DEPOT_AMT) = 0
						             )
		AND    MONEY_DEPOT_STUS_CD = '001'
	</update>  		
	
    <!--현금 입금내역 대사처리 updateSettleReceiveResult4_1	-->
	<update id="updateSettleReceiveResult4_1" parameterClass="java.util.HashMap">	
    <![CDATA[	
        UPDATE OD_PMT_CASH SET 
			   DEPOT_STUS_CD = '002'
			 , DEPOT_TREAT_YMD = TO_CHAR(SYSDATE, 'YYYYMMDD')
        WHERE (ORDER_ID, SETL_SEQ) IN(
				                SELECT A.ORDER_ID
								     , A.SETL_SEQ
				                FROM   OD_ORDER_SETL A
									 , ST_RECEV_PO_ADJ_COMPARE B
				                WHERE  A.CLOSE_RECEV_YN='N'
				                AND    A.JUNG_DATE = B.RECEV_PO_ADJ_TRGT_YMD
				                AND    A.RECEV_PO_REGIPOCD = B.RECEV_PO_REGI_PO_CD
				                AND    B.MONEY_DEPOT_STUS_CD='002'
				                AND    A.USE_YN ='Y'
				                AND    B.MONEY_DEPOT_TREAT_YMD=TO_CHAR(SYSDATE, 'YYYYMMDD')
            					UNION ALL
                				SELECT A.ORDER_ID
								     , A.SETL_SEQ
                				FROM   OD_ORDER_SETL A, ST_RECEV_PO_ADJ_COMPARE B
                			    WHERE  A.CLOSE_RECEV_YN='Y'
                  				AND    A.USE_YN ='Y'
                  				AND    A.JUNG_DATE = (
													  SELECT MAX(X.WORKCALEYMD)
													  FROM   PIEMT0160 X
													  WHERE  X.WORKCALEYMD < B.RECEV_PO_ADJ_TRGT_YMD
													  AND    X.RCOCD = '00'
													  AND    X.HOLDAYYN='N'
                                     				  )
                  				AND    A.RECEV_PO_REGIPOCD = B.RECEV_PO_REGI_PO_CD
                  				AND    B.MONEY_DEPOT_STUS_CD='002'
                  				AND    B.MONEY_DEPOT_TREAT_YMD=TO_CHAR(SYSDATE, 'YYYYMMDD')
        )
        AND    DEPOT_STUS_CD = '001'
    ]]>			
	</update>  		
	
   <!--현금 입금내역 대사처리 updateSettleReceiveResult4_2	-->					
	<delete id="deleteSettleReceiveResult4_2" parameterClass="java.util.HashMap">	
		DELETE ST_RECEV_PO_DEP_NO_TRT 
		WHERE  Y_TREAT_OCCUR_YMD = TO_CHAR(SYSDATE, 'YYYYMMDD')
	</delete>  	
	
    <!--현금 입금내역 대사처리 updateSettleReceiveResult4_3	-->
	<insert id="updateSettleReceiveResult4_3" parameterClass="java.util.HashMap">	
		INSERT INTO ST_RECEV_PO_DEP_NO_TRT
			(
				  Y_TREAT_OCCUR_YMD
				, RECEV_PO_REGI_PO_CD
				, ADJ_TRGT_YMD
				, DEPOT_AMT
				, MONEY_RECEV_AMT
			)
			(
				  SELECT TO_CHAR(SYSDATE, 'YYYYMMDD') AS Y_TREAT_OCCUR_YMD
				       , RECEV_PO_REGI_PO_CD
				       , YMD
				       , SUM(DEPOTAMT)
				       , SUM(MAMT)
				  FROM 
					   (
			             SELECT B.RECEV_PO_REGI_PO_CD
			                  , B.RECEV_PO_ADJ_TRGT_YMD YMD
			                  , SUM(B.MONEY_SETL_AMT * DECODE(B.RECEV_ADJ_TRGT_DIV_CD, '01', 1, '02', -1, 0)) MAMT
			                  , 0 DEPOTAMT 
			             FROM   ST_RECEV_PO_ADJ_COMPARE B
			             WHERE  B.MONEY_DEPOT_STUS_CD='001'
			             GROUP BY B.RECEV_PO_REGI_PO_CD, B.RECEV_PO_ADJ_TRGT_YMD
			             UNION ALL
			             SELECT A.RECEV_PO_REGI_PO_CD
			                  , A.DEPOT_YMD YMD, 0 MAMT
			                  , SUM(A.DEPOT_AMT) DEPOTAMT 
			             FROM   ST_RECEV_PO_DEP_AMT A
			             WHERE  A.MONEY_DEPOT_STUS_CD='001'
			             GROUP BY A.RECEV_PO_REGI_PO_CD, A.DEPOT_YMD
					   ) X
		      	 GROUP BY X.RECEV_PO_REGI_PO_CD, X.YMD
			)
	</insert> 
	
	<!-- 현금 입금내역 대사처리 비금융국 일별 -->	 
	<select id="selectSuppAdjustDaySettled" parameterClass="java.util.HashMap" resultClass="commMap">	
    <![CDATA[	
	    /* 공급정산 대상일자 확정여부 및 시작, 종료일자를 조회 */
	    SELECT 1
	         , IS_TARGET_SETTLED
	         , IS_SUPP_DAY_STR
	         , LAST_SUPP_ADJ_FIN_DATE
	         , ADJ_START_DAY
	         , ADJ_END_DAY
	         , ADJ_CONFIRM_DAY
	         , NEW_NEXT_START_DAY
	         , IS_CTRT_TRANSF_SUPP_ADJ
	         , SUPP_ADJ_YN
	    FROM
	    (
	           SELECT  GBN
			         , IS_TARGET_SETTLED
			         , IS_SUPP_DAY_STR
			         , LAST_SUPP_ADJ_FIN_DATE
			         , ADJ_START_DAY
			         , ADJ_END_DAY
			         , ADJ_CONFIRM_DAY
			         , NEW_NEXT_START_DAY
			         , CASE WHEN TO_CHAR(TO_DATE(SUBSTR(TO_CHAR(ADD_MONTHS(TO_DATE(ADJ_START_DAY, 'YYYYMMDD'), 1), 'YYYYMMDD'), 1, 6)||01, 'YYYYMMDD') - 1, 'YYYYMMDD') BETWEEN ADJ_START_DAY AND ADJ_END_DAY THEN 'Y'
			                ELSE 'N'
			           END AS IS_CTRT_TRANSF_SUPP_ADJ
			         , SUPP_ADJ_YN
			   FROM
			      (
			           SELECT TO_CHAR(TO_DATE(LAST_SUPP_ADJ_FIN_DATE, 'YYYY/MM/DD'), 'YYYYMMDD') AS LAST_SUPP_ADJ_FIN_DATE
			                , TO_CHAR(TO_DATE(LAST_SUPP_ADJ_FIN_DATE, 'YYYY/MM/DD') + 1, 'YYYYMMDD') AS ADJ_START_DAY
			           FROM
			              (
						  SELECT MAX(END_DAY) AS LAST_SUPP_ADJ_FIN_DATE
						  FROM   ST_HISTORY_ADJUST
						  WHERE  SUPP_ADJ_YN = 'Y'
			        	  )
			      ) A,
			      (
			           SELECT GBN
			                , IS_TARGET_SETTLED
				            , IS_SUPP_DAY_STR
				            , ADJ_END_DAY
				            , ADJ_CONFIRM_DAY
				            , NEW_NEXT_START_DAY
				            , SUPP_ADJ_YN
			           FROM
			              (
			          		SELECT GBN
					             , IS_TARGET_SETTLED
					             , IS_SUPP_DAY_STR
					             , ADJ_END_DAY
					             , ADJ_CONFIRM_DAY
					             , NEW_NEXT_START_DAY
					             , SUPP_ADJ_YN
					          FROM
			          			 (
			          			 SELECT 1 AS GBN
						             , 'Y' AS IS_TARGET_SETTLED
						             , 'IS_SUPP_DAY_SETTLED' AS IS_SUPP_DAY_STR
						             , TO_CHAR(TO_DATE(END_DAY, 'YYYY/MM/DD'), 'YYYYMMDD') AS ADJ_END_DAY
						             , TO_CHAR(TO_DATE(CONFIRM_DAY, 'YYYY/MM/DD'), 'YYYYMMDD') AS ADJ_CONFIRM_DAY
						             , TO_CHAR(TO_DATE(END_DAY, 'YYYY/MM/DD')+1, 'YYYYMMDD') AS NEW_NEXT_START_DAY
						             , NVL(SUPP_ADJ_YN, 'B') AS SUPP_ADJ_YN
			          			 FROM
			          			    (
									 SELECT CONFIRM_DAY, END_DAY, SUPP_ADJ_YN
									 FROM ST_HISTORY_ADJUST
									 WHERE CONFIRM_DAY > (
														SELECT MAX(END_DAY) AS LAST_SUPP_ADJ_FIN_DATE
														FROM ST_HISTORY_ADJUST
														WHERE SUPP_ADJ_YN = 'Y'
			            								  )
			            		 AND NVL(SUPP_ADJ_YN, 'S') NOT IN('C', 'Y')
			            		 ORDER BY CONFIRM_DAY DESC, END_DAY DESC
			                     )
			           		  WHERE ROWNUM <= 1
			          		  UNION ALL
			          		  SELECT 2 AS GBN
					              , 'N' AS IS_TARGET_SETTLED
					              , 'NOT_SUPP_DAY_SETTLED' AS IS_SUPP_DAY_STR
					              , '' AS ADJ_END_DAY
					              , '' AS ADJ_CONFIRM_DAY
					              , '' AS NEW_NEXT_START_DAY
					              , '' AS SUPP_ADJ_YN
			          		  FROM  DUAL
			          	   )
			          ORDER BY GBN
			         )
			      WHERE ROWNUM <= 1
			   )B
		)
    ]]>		    
    </select>	 
    
    <!-- 후납고지 체크	supp_comp_later_pay -->	 
	<select id="selectSuppCompLaterPay" parameterClass="java.util.HashMap" resultClass="int">
		SELECT COUNT(*) AS CNT
		FROM   SUPP_COMP_LATER_PAY
		WHERE  RECEV_YM = SUBSTR(#adj_start_day#, 0, 6)	
	</select>	    
    
    
	<!-- 결제수단별 입금대사 반영 2-1 -->	 
	<select id="selectSettleBuyCompResult2_1" parameterClass="java.util.HashMap" resultClass="commMap">	
    <![CDATA[	
    	/* BUY_COMP_DEPOT_INFO 사용되지 않음으로 처리되지 않음 */
		SELECT X.PAYMETHOD, X.BUY_COMP_CD, X.MEMBER_NO, X.PAYMETHOD_ADJ_TRGT_YMD AS YMD
		FROM 
			(
			SELECT PAYMETHOD
				 , BUY_COMP_CD
				 , MEMBER_NO
				 , PAYMETHOD_ADJ_TRGT_YMD
				 , SUM(RECEV_AMT  - FEE_AMT) AS SUMAMT 
			FROM   ST_PAYMETHOD_ADJ_COMPARE B
			WHERE  B.DEPOT_STUS_CD='001'
		  	AND    B.PAYMETHOD NOT IN('K', 'P', 'R', 'CF', 'DF', 'OF', 'BF', 'KM', 'PM', 'RM','AF','IF')
		  	AND    B.PAYMETHOD_ADJ_TRGT_YMD < TO_CHAR(SYSDATE, 'YYYYMMDD')
			GROUP BY PAYMETHOD, BUY_COMP_CD, MEMBER_NO, PAYMETHOD_ADJ_TRGT_YMD
			UNION ALL
			SELECT B.PAYMETHOD
				 , BUY_COMP_CD
				 , MEMBER_NO
				 , PAYMETHOD_ADJ_TRGT_YMD
				 , SUM(B.RECEV_AMT) SUMAMT 
			FROM   ST_PAYMETHOD_ADJ_COMPARE B
		    WHERE  NVL(B.DEPOT_STUS_CD, '001') = '001'
			AND    B.PAYMETHOD IN('K', 'P', 'R', 'CF', 'DF', 'OF', 'BF', 'KM', 'PM', 'RM','AF','IF')
			AND    'IS_SUPP_DAY_SETTLED' = #is_supp_day_str#
			AND    PAYMETHOD_ADJ_TRGT_YMD BETWEEN #adj_start_day# AND #adj_end_day#
			AND    B.PAYMETHOD_ADJ_TRGT_YMD < TO_CHAR(SYSDATE, 'YYYYMMDD')
			/* 우체국쇼핑과 생활마트는 	ST_PAYMETHOD_ADJ_COMPARE 에 들어오고 전통시장 구별 방안 추가 요망*/					
			GROUP BY B.PAYMETHOD, BUY_COMP_CD, MEMBER_NO, PAYMETHOD_ADJ_TRGT_YMD
			) X,
			(
			SELECT A.PAYMETHOD
				 , BUY_COMP_CD
				 , MEMBER_NO
				 , BUY_COMP_REQ_YMD
				 , SUM(A.BUY_COMP_DEPOT_AMT) SUMAMT 
			FROM   ST_BUY_COMP_DEPOT_INFO A
			WHERE  A.CARD_DEPOT_STUS_CD='001'
			AND    A.BUY_COMP_REQ_YMD < TO_CHAR(SYSDATE, 'YYYYMMDD')
			GROUP BY A.PAYMETHOD, BUY_COMP_CD, MEMBER_NO, BUY_COMP_REQ_YMD
			) Y
 		WHERE  X.PAYMETHOD = Y.PAYMETHOD
		AND    X.BUY_COMP_CD = Y.BUY_COMP_CD
		AND    X.MEMBER_NO = Y.MEMBER_NO
		AND    X.PAYMETHOD_ADJ_TRGT_YMD = Y.BUY_COMP_REQ_YMD
		AND    X.SUMAMT = Y.SUMAMT 
    ]]>		    
    </select>	
    
	<!-- 결제수단별 입금대사 반영 2-2 -->
	<update id="updateSettleBuyCompResult2_2" parameterClass="java.util.HashMap">	
    <![CDATA[	
		UPDATE ST_PAYMETHOD_ADJ_COMPARE SET 
			   DEPOT_STUS_CD = '002'
			 , DEPOT_TREAT_YMD = TO_CHAR(SYSDATE, 'YYYYMMDD')
		WHERE  PAYMETHOD = #paymethod#  
		AND    BUY_COMP_CD = #buy_comp_cd#
		AND    MEMBER_NO = #member_no# 
		AND    PAYMETHOD_ADJ_TRGT_YMD = #ymd#
		AND    DEPOT_STUS_CD = '001'
    ]]>			
	</update>  
	
	<!-- 결제수단별 입금대사 반영 2-3  -->
	<update id="updateSettleBuyCompResult2_3" parameterClass="java.util.HashMap">	
    <![CDATA[
    	/* BUY_COMP_DEPOT_INFO 더이상 사용되지 않음 */
		UPDATE ST_BUY_COMP_DEPOT_INFO SET 
			   CARD_DEPOT_STUS_CD = '002'
			 , CARD_DEPOT_TREAT_YMD = TO_CHAR(SYSDATE, 'YYYYMMDD')
		WHERE  PAYMETHOD = #paymethod#  
		AND    BUY_COMP_CD = #buy_comp_cd#
		AND    MEMBER_NO = #member_no# 
		AND    BUY_COMP_REQ_YMD = #ymd#
		AND    NVL(CARD_DEPOT_STUS_CD, '001') = '001'
    ]]>			
	</update>  	
	
	<!-- 결제수단별 입금대사 반영 3-1  -->
	<update id="updateSettleBuyCompResult3_1" parameterClass="java.util.HashMap">	
    <![CDATA[
		UPDATE ST_PAYMETHOD_ADJ_COMPARE SET 
			   DEPOT_STUS_CD = '002'
			 , DEPOT_TREAT_YMD = TO_CHAR(SYSDATE, 'YYYYMMDD')
		WHERE  (PAYMETHOD, BUY_COMP_CD) IN (
									        SELECT PAYMETHOD
										    	 , BUY_COMP_CD
										    FROM   ST_PAYMETHOD_ADJ_COMPARE B
									        WHERE  B.DEPOT_STUS_CD='001'
										    GROUP BY PAYMETHOD, BUY_COMP_CD
										    HAVING SUM(B.RECEV_AMT) = 0
											)
		AND    DEPOT_STUS_CD = '001'
    ]]>			
	</update>  	
	
	<!-- 결제수단별 입금대사 반영 3-2  -->
	<update id="updateSettleBuyCompResult3_2" parameterClass="java.util.HashMap">	
    <![CDATA[
    	/* BUY_COMP_DEPOT_INFO 더이상 사용되지 않음 */    
		UPDATE ST_BUY_COMP_DEPOT_INFO SET 
			   CARD_DEPOT_STUS_CD = '002'
			 , CARD_DEPOT_TREAT_YMD = TO_CHAR(SYSDATE, 'YYYYMMDD')
		WHERE  (PAYMETHOD, BUY_COMP_CD) IN 
										(
									    SELECT PAYMETHOD, BUY_COMP_CD
										FROM   ST_BUY_COMP_DEPOT_INFO A
									    WHERE  A.CARD_DEPOT_STUS_CD='001'
										GROUP BY PAYMETHOD, BUY_COMP_CD
										HAVING SUM(A.BUY_COMP_DEPOT_AMT) = 0
										)
		AND    NVL(CARD_DEPOT_STUS_CD, '001') = '001'
    ]]>			
	</update> 		
	
   <!--현금 입금내역 대사처리 deleteSettleReceiveResult4_7	-->					
	<delete id="deleteSettleBuyCompResult4_7" parameterClass="java.util.HashMap">	
		DELETE ST_PAYMETHOD_DEPOT_NO_TRT 
		WHERE  Y_TREAT_OCCUR_YMD = TO_CHAR(SYSDATE, 'YYYYMMDD')
	</delete>  		
	
   <!--현금 입금내역 대사처리 insertSettleBuyCompResult4_8	-->					
	<insert id="insertSettleBuyCompResult4_8" parameterClass="java.util.HashMap">	
    <![CDATA[	
		INSERT INTO ST_PAYMETHOD_DEPOT_NO_TRT
			(
				Y_TREAT_OCCUR_YMD
				, PAYMETHOD
				, BUY_COMP_CD
				, ADJ_TRGT_YMD
				, RECEV_AMT
				, DEPOT_AMT
			)
			(
    			SELECT TO_CHAR(SYSDATE, 'YYYYMMDD') AS Y_TREAT_OCCUR_YMD
				       , PAYMETHOD
				       , BUY_COMP_CD
				       , YMD
				       , SUM(RECEV_AMT)
				       , SUM(DEPOTAMT)
    			FROM 
    					(
						SELECT PAYMETHOD
							 , BUY_COMP_CD
						 	 , B.PAYMETHOD_ADJ_TRGT_YMD YMD
							 , SUM(B.RECEV_AMT - FEE_AMT) RECEV_AMT
							 , 0 DEPOTAMT 
						FROM   ST_PAYMETHOD_ADJ_COMPARE B
						WHERE  B.DEPOT_STUS_CD = '001'
						GROUP BY B.PAYMETHOD, BUY_COMP_CD, B.PAYMETHOD_ADJ_TRGT_YMD
						UNION ALL
						SELECT A.PAYMETHOD
							 , A.BUY_COMP_CD
							 , A.BUY_COMP_REQ_YMD YMD
							 , 0 AS RECEV_AMT
							 , SUM(A.BUY_COMP_DEPOT_AMT) DEPOTAMT 
						FROM   ST_BUY_COMP_DEPOT_INFO A
						WHERE  A.CARD_DEPOT_STUS_CD = '001'
						AND    A.BUY_COMP_CD != '998'
						GROUP BY A.PAYMETHOD, A.BUY_COMP_CD, A.BUY_COMP_REQ_YMD
						) X
				GROUP BY X.PAYMETHOD, X.BUY_COMP_CD, X.YMD
			)
    ]]>				
	</insert>  			
	    	 			
	<!-- 정산실행 입금내역 반영 취소 가능상태 체크 (AS-IS retriveAdjStatusChkCnt4_2) -->	   
	<select id="selectAdjStepThreeCancelCnt" parameterClass="java.util.HashMap" resultClass="commMap">					
 		SELECT
				( 
				SELECT COUNT(*)
				FROM ST_ADJ_STATUS
				WHERE ADJ_DATE = TO_CHAR(SYSDATE, 'YYYYMMDD')
				AND ADJ_STATUS IN ('5', '6', '7')
				) AS CONDITION_ADJ_STATUS_CNT,
				(
				SELECT COUNT(*)
				FROM ST_ADJ_STATUS
				WHERE ADJ_DATE = TO_CHAR(SYSDATE, 'YYYYMMDD')
  				AND ADJ_STATUS ='4'
				) CURRENT_ADJ_STATUS_CNT
		FROM 	DUAL
	</select>  	
	
	<!-- 현금 입금대사 반영취소 1-2  -->
	<update id="updateSettleReceiveResultCancel1_2" parameterClass="java.util.HashMap">	
    <![CDATA[
		UPDATE ST_RECEV_PO_ADJ_COMPARE SET 
			   MONEY_DEPOT_STUS_CD = '001'
			 , MONEY_DEPOT_TREAT_YMD = null
		WHERE  MONEY_DEPOT_TREAT_YMD = TO_CHAR(SYSDATE, 'YYYYMMDD')	   
    ]]>			
	</update> 	
	
	<!-- 현금 입금대사 반영취소 1-3  -->
	<update id="updateSettleReceiveResultCancel1_3" parameterClass="java.util.HashMap">	
    <![CDATA[
		UPDATE ST_RECEV_PO_DEP_AMT SET 
			   MONEY_DEPOT_STUS_CD = '001'
			 , MONEY_DEPOT_TREAT_YMD = null
		WHERE  MONEY_DEPOT_TREAT_YMD = TO_CHAR(SYSDATE, 'YYYYMMDD')   
    ]]>			
	</update> 
	
	<!-- 현금 입금대사 반영취소 4-1  -->
	<update id="updateSettleReceiveResultCancel4_1" parameterClass="java.util.HashMap">	
    <![CDATA[
		UPDATE OD_PMT_CASH SET 
			   DEPOT_STUS_CD = '001'
			 , DEPOT_TREAT_YMD =null
		WHERE  DEPOT_TREAT_YMD = TO_CHAR(SYSDATE, 'YYYYMMDD')     
    ]]>			
	</update> 		
	
	<!-- 현금 입금대사 반영취소  4-2  -->
	<delete id="deleteSettleReceiveResultCancel4_2" parameterClass="java.util.HashMap">	
    <![CDATA[
        DELETE ST_RECEV_PO_DEP_NO_TRT 
        WHERE  Y_TREAT_OCCUR_YMD = TO_CHAR(SYSDATE, 'YYYYMMDD')
    ]]>			
	</delete> 	   			
 	 		
	<!-- 결제수단별 입금대사 반영취소 1-2  -->
	<update id="updateSettleBuyCompResultCancel1_2" parameterClass="java.util.HashMap">	
    <![CDATA[
		UPDATE ST_PAYMETHOD_ADJ_COMPARE SET 
			   DEPOT_STUS_CD = '001'
			 , DEPOT_TREAT_YMD = null
		WHERE  DEPOT_TREAT_YMD = TO_CHAR(SYSDATE, 'YYYYMMDD')
    ]]>			
	</update> 
	 	 		
	<!-- 결제수단별 입금대사 반영취소 1-3  -->
	<update id="updateSettleBuyCompResultCancel1_3" parameterClass="java.util.HashMap">	
    <![CDATA[
		/* ST_BUY_COMP_DEPOT_INFO 더이상 사용되지 않음 */     
		UPDATE ST_BUY_COMP_DEPOT_INFO SET 
			   CARD_DEPOT_STUS_CD = '001'
		  	 , CARD_DEPOT_TREAT_YMD = null
		WHERE  CARD_DEPOT_TREAT_YMD = TO_CHAR(SYSDATE, 'YYYYMMDD')
		AND    BUY_COMP_CD != '998'
    ]]>			
	</update> 
	
	<!-- 결제수단별 입금대사 반영취소  4-7  -->
	<delete id="deleteSettleBuyCompResultCancel4_7" parameterClass="java.util.HashMap">	
    <![CDATA[
		DELETE ST_PAYMETHOD_DEPOT_NO_TRT
		WHERE  Y_TREAT_OCCUR_YMD = TO_CHAR(SYSDATE, 'YYYYMMDD')
    ]]>			
	</delete> 	
	
	<!-- step4 공급업체 정산 서머리 -->	 
	<select id="selectAdjRetrieveSuppAdjustmentList" parameterClass="java.util.HashMap" resultClass="commMap">	
    <![CDATA[	
		SELECT 1
		, TRANSF_DATA_DIV_CD
		, TRANSF_DATA_DIV_NM
		, TRANSF_AMT
		, VORDER
		FROM
			(
				SELECT 1
				     , B.COMN_CD_ID AS TRANSF_DATA_DIV_CD
				     , B.COMN_CD_NM AS TRANSF_DATA_DIV_NM
				     , NVL(SUM(TRANSF_AMT), 0) AS TRANSF_AMT
				     , MAX(B.CD_VAL1) AS VORDER
				FROM   (    
						SELECT 1
							 , TRANSF_DATA_DIV_CD
							 , NVL(SUM(TRANSF_AMT), 0) AS TRANSF_AMT
						FROM   ST_SUPP_POREGI_TRF_AMT A
						WHERE  1=1
						AND    TRANSF_REQ_YMD = #adj_date#
						GROUP BY TRANSF_DATA_DIV_CD
						UNION ALL
						SELECT 1
						     , TRANSF_DATA_DIV_CD
						     , NVL(SUM(TRANSF_AMT), 0) AS TRANSF_AMT
					    FROM   ST_CTRT_FEE_TRANSF A
					    WHERE  1=1
					    AND    TRANSF_REQ_YMD = #adj_date#
						GROUP BY TRANSF_DATA_DIV_CD
						) A, CM_COMN_CD B
				WHERE 1=1
				AND B.CD_GRP_ID='TRANSF_DATA_DIV_CD'
				AND B.COMN_CD_ID = A.TRANSF_DATA_DIV_CD(+)
				GROUP BY TRANSF_DATA_DIV_CD, B.COMN_CD_ID, B.COMN_CD_NM
			)
		ORDER BY VORDER, TRANSF_DATA_DIV_CD
    ]]>		    
    </select>		
    
	<!-- 공급업체 정산반영 step4 three ADJ_STATUS CHECK -->	   
	<select id="selectAdjStatusChkStepFour" parameterClass="java.util.HashMap" resultClass="commMap">	
		SELECT
				( 
				SELECT COUNT(*)
				FROM ST_ADJ_STATUS
				WHERE ADJ_DATE = TO_CHAR(SYSDATE, 'YYYYMMDD')
				AND ADJ_STATUS IN('4')
				) CONDITION_ADJ_STATUS_CNT_FOUR,
				(
				SELECT COUNT(*)
				FROM ST_ADJ_STATUS
				WHERE ADJ_DATE = TO_CHAR(SYSDATE, 'YYYYMMDD')
				AND ADJ_STATUS ='5'
				) CURRENT_ADJ_STATUS_CNT_FOUR,
				(
				SELECT COUNT(*)
				FROM ST_ADJ_STATUS
				WHERE ADJ_DATE = TO_CHAR(SYSDATE, 'YYYYMMDD')
				AND ADJ_STATUS ='6'
				) CURRENT_REFUND_CNT_FOUR			
		FROM 	DUAL
	</select>      
	
	<!-- 지원단 실제 센터입금액 -->	   
	<select id="selectIncommCenterAmt1" parameterClass="java.util.HashMap" resultClass="String">	
		SELECT NVL(SUM(DEPOT_AMT),0) AS DEPOT_AMT 
		FROM   IFR_RECEV_PO_DEP_AMT 
		WHERE  TRANSF_REQ_YMD >= #adj_confirm_day#
		AND    DEPOT_CNT IN (89903, 99991, 99992, 99993, 99994, 99995, 99996, 99997, 9997, 99998)		 	
	</select>   
	
	<!-- ST_ADJ_GOODS 현금 금액 -->	   <!-- SM 문의 결과 예전 epost 기준으로 한다함 -->
	<select id="selectIncommCenterAmt2" parameterClass="java.util.HashMap" resultClass="String">	
    <![CDATA[
    	SELECT SUM(CENTER_AMT- MINUS_CENTER_AMT) AS CENTER_AMT
        FROM
        (
            SELECT  NVL(
                        SUM ( 
                                CASE WHEN COMPLETE_DATE < '20130121'
                                    THEN SETTLE_AMOUNT - AMOUNT_CASH - DELIV_CERT_AMOUNT - CONG_CARD_AMOUNT - DECODE(PAVLN_DIV_CD, '02', 0, FEE_AMOUNT) - AMOUNT_COUPON_BIZ
                                    ELSE SETTLE_AMOUNT - AMOUNT_CASH - DELIV_CERT_AMOUNT - CONG_CARD_AMOUNT - FEE_AMOUNT - AMOUNT_COUPON_BIZ
                                END 
                            )
                        , 0) AS CENTER_AMT,
                        0 AS MINUS_CENTER_AMT
            FROM    ST_ADJ_GOODS A 
            WHERE   COMPLETE_DATE BETWEEN #adj_start_day# AND #adj_end_day# 
            AND     PAVLN_DIV_CD IN ('01', '02', '04', '07')
            AND     GOODS_CANCEL_YN='N'
            UNION ALL
            SELECT  0 AS CENTER_AMT,
                         SUM (NVL(AMOUNT_CASH,0)) AS MINUS_CENTER_AMT
            FROM    ST_ADJ_GOODS A 
            WHERE   COMPLETE_DATE BETWEEN #adj_start_day# AND #adj_end_day#
            AND     PAVLN_DIV_CD IN ('03','05', '09')
            AND     ORDER_MDA_DIV_CD = '05'
            AND     GOODS_CANCEL_YN='N'
        )
	]]>	
<!-- 	SELECT SUM(CENTER_AMT) AS CENTER_AMT -->
<!--     	FROM -->
<!--     	( -->
<!-- 			SELECT  NVL( -->
<!-- 						SUM (  -->
<!-- 								CASE WHEN COMPLETE_DATE < '20130121' -->
<!-- 									THEN SETTLE_AMOUNT - AMOUNT_CASH - DELIV_CERT_AMOUNT - CONG_CARD_AMOUNT - DECODE(PAVLN_DIV_CD, '02', 0, FEE_AMOUNT) - AMOUNT_COUPON_BIZ -->
<!-- 									ELSE SETTLE_AMOUNT - AMOUNT_CASH - DELIV_CERT_AMOUNT - CONG_CARD_AMOUNT - FEE_AMOUNT - AMOUNT_COUPON_BIZ -->
<!-- 								END  -->
<!-- 							) -->
<!-- 						, 0) AS CENTER_AMT -->
<!-- 			FROM    ST_ADJ_GOODS A  -->
<!-- 			WHERE   COMPLETE_DATE BETWEEN #adj_start_day# AND #adj_end_day# -->
<!-- 			AND     PAVLN_DIV_CD IN ('01', '02', '04', '07') -->
<!-- 			AND     GOODS_CANCEL_YN='N' -->
<!-- 			UNION ALL -->
<!-- 			SELECT  NVL(SUM (NVL(AMOUNT_CARD_POSTNET,0) - NVL(FEE_AMOUNT,0)), 0) AS CENTER_AMT -->
<!-- 			FROM    ST_ADJ_GOODS A  -->
<!-- 			WHERE   COMPLETE_DATE BETWEEN #adj_start_day# AND #adj_end_day# -->
<!-- 			AND     PAVLN_DIV_CD IN ('03','05', '09') -->
<!-- 			AND     ORDER_MDA_DIV_CD = '05' -->
<!-- 			AND     GOODS_CANCEL_YN='N' -->
<!-- 		) -->
		
				 	
<!-- 	UNION ALL -->
<!-- 			SELECT  NVL(SUM (NVL(KAKAO_WICKET_SETL_AMT,0) - NVL(FEE_AMOUNT,0)), 0) AS CENTER_AMT -->
<!-- 			FROM    ST_ADJ_GOODS A  -->
<!-- 			WHERE   COMPLETE_DATE BETWEEN #ADJ_START_DAY# AND #ADJ_END_DAY# -->
<!-- 			AND     PAVLN_DIV_CD IN ('03','05', '09') -->
<!-- 			AND     ORDER_MDA_DIV_CD = '05' -->
<!-- 			AND     GOODS_CANCEL_YN='N' -->
	</select>   
	
	<!-- 주문내역중 취소요청 처리중인건 조회 -->	   
	<select id="selectCanReqProgressCnt" parameterClass="java.util.HashMap" resultClass="String">	
    <![CDATA[		
    	/* 정산대상 기간 내의 주문취소 요청 처리중인 건수 조회 */
		SELECT NVL(COUNT(1), 0) AS CAN_REQ_CNT 
        FROM   OD_ORDER_MAST A, OD_ORDER_ITM B
        WHERE  A.ORDER_ID = B.ORDER_ID
        AND    A.APPR_DATE BETWEEN TO_DATE(#adj_start_day#, 'YYYYMMDD') AND TO_DATE(#adj_end_day#, 'YYYYMMDD') + .99999
        AND    B.PAVLN_DIV_CD IN ('01', '02', '03', '04', '05', '07', '09', '99')
        AND    B.ORDER_STUS_CD IN ('O05', 'O08')
        AND    B.GOODS_CANCEL_YN = 'N' 
	]]>
	</select>  	
	
	<!-- 주문내역중 반품 취소요청 처리중인건 조회[정산확정전에 처리되어야 함] -->	   
	<select id="selectRefundReqProgressCnt" parameterClass="java.util.HashMap" resultClass="String">	
    <![CDATA[		
    	/* 정산대상 기간 내의 반품취소 요청 처리중인 건수 조회 */
		SELECT COUNT(*) AS RET_CNT
		FROM   OD_ORDER_ITM A, OD_ORDER_MAST D, OD_RET_INTERFACE RET
		WHERE  1=1
		AND    A.ORDER_ID = D.ORDER_ID
		AND    A.ORDER_ID = RET.ORDER_ID
		AND    A.ORDER_ITM_ID = RET.ORDER_ITM_ID
		AND    A.DC_APPLY_PRC + NVL(A.OPTN_GOODS_APPLY_PRC,0) + NVL(A.SEND_PRC,0)  >  0
		AND    RET.TREAT_STUS_CD <> '004'              /* 반품취소 */
		AND    D.APPR_DATE BETWEEN TO_DATE(#adj_start_day#, 'YYYYMMDD') AND TO_DATE(#adj_end_day#, 'YYYYMMDD') + .99999
		AND    A.GOODS_CANCEL_YN = 'N'  
		AND    RET.CLAIM_DIV_CD = '001'  
		AND    RET.TREAT_STUS_CD IN ('002','003')      /* CM_COMN_CD : RETRNGD_STUS_CD 002 반품확인,  003 반품처리완료 */       
		AND    RET.RETRNGD_REFUND_METH_CD = '05'
	]]>			 	
	</select>  	
	
	<!-- 정산대상 기간 내의 접수국 입금 미처리 금액 조회 -->	   
	<select id="selectAdjRecevPoNoTreat" parameterClass="java.util.HashMap" resultClass="String">	
    <![CDATA[		
		/* 정산대상 기간 내의 접수국 입금 미처리 금액 조회 */ 
		SELECT NVL(SUM(MONEY_SETL_AMT), 0) AS RECEV_PO_NO_TREAT_AMT 
		FROM   ST_RECEV_PO_ADJ_COMPARE
		WHERE  1=1
		AND    MONEY_DEPOT_STUS_CD != '002'
		AND    RECEV_PO_ADJ_TRGT_YMD BETWEEN #adj_start_day# AND #adj_end_day#
	]]>			 	
	</select>  	
	
	<!-- MAX SEQ 조회 -->	   	
	<select id="selectSuppAmtSeq" parameterClass="java.util.HashMap" resultClass="int">	
		SELECT NVL(MAX(TRANSF_DATA_SEQ),0) AS TRANSF_DATA_SEQ
			FROM ST_SUPP_POREGI_TRF_AMT
		WHERE TRANSF_REQ_YMD=TO_CHAR(SYSDATE,'YYYYMMDD')  
	</select>  	
	
	<!-- 공급정산을 위한 카드환불 정리 목록조회 반품환불(카드)건은 반품금액 공급국 이체  -->	   
	<select id="selectChangeCardRefundMethodList" parameterClass="java.util.HashMap" resultClass="commMap">	
    <![CDATA[		
        SELECT    RET.CLAIM_REQ_SEQ
                , RET.CLAIM_REQ_NO
                , RET.SEND_REQ_NO
                , RET.GOODS_CD
                , RET.GOODS_SEQ
                , DECODE(A.PAVLN_DIV_CD, '02', D.RECEVPO_RGISTPOCD, A.SUPPO_RGIST_POCD) AS SUPPO_RGISTPO_CD        /* 공급국등기용국기호 제철은 접수국 */
                , RET.RETRNGD_REFUND_METH_CD                                                                       /* 반품환불방법코드*/
                , RET.TREAT_STUS_CD
                , RET.CLAIM_TREAT_AMT                                                                              /* 클레임처리금액 */
                , A.ORDER_ITM_ID
                , ( SELECT SPA.ACC_SEED_NO FROM ST_POST_ACCNO SPA WHERE RET.SUPPO_RGISTPO_CD=SPA.PO_REGI_PO_CD AND ACC_NO_DIV_CD = '01' ) AS ACC_NO        /* 후납소포대금 및 반품환불계좌 */
        FROM      OD_ORDER_ITM A
                , OD_ORDER_MAST D
                , OD_RET_INTERFACE RET
        WHERE     1=1
        AND       A.ORDER_ID = D.ORDER_ID
        AND       A.ORDER_ID = RET.ORDER_ID
        AND       A.ORDER_ITM_ID = RET.ORDER_ITM_ID
        AND       A.PAVLN_DIV_CD IN ('01', '02', '04', '07')    /* 01 프리미엄 02 제철 03 생활마트 04 꽃배달 05 전통시장 07 해외배송 08 패션B2B 09 패션B2C 99 기타 */
        AND       D.APPR_DATE BETWEEN TO_DATE(#adj_start_day#, 'YYYYMMDD') AND TO_DATE(#adj_end_day#, 'YYYYMMDD') + .99999
        AND       A.GOODS_CANCEL_YN = 'N'  
        AND       RET.CLAIM_DIV_CD = '001'                         /* 반품환불 */
        AND       RET.TREAT_STUS_CD = '002'                        /* CM_COMN_CD : RETRNGD_STUS_CD 002 반품확인,  003 반품처리완료 */       
        AND 	  RET.POSA_ACC_TRANSF_STUS_CD IN ('001')           /*미이체상태 002:존재하지 않는다*/
        AND       RET.RETRNGD_REFUND_METH_CD = '03'                /* 03: 신용카드결제취소 */
        AND       A.ORDER_STUS_CD IN ('O04', 'D02', 'D03')   /* 주문상태 AS-IS 주문확인, 배송확인후, 배송완료일경우만 -  주문확인, 배송완료, 배송확인후(꾳배달) 3,4,5*/
	]]>			 	
	</select>  		
		
	
	<!-- 카드환불 정리 이체요청 -->		
	<insert id="insertChangeCardRefundMethod" parameterClass="java.util.HashMap">		
    <![CDATA[
		INSERT INTO ST_SUPP_POREGI_TRF_AMT
			(  
				  SUPP_PO_REGI_PO_CD
				, TRANSF_REQ_YMD
				, TRANSF_DATA_SEQ
				, SUPP_PO_ACC_SEED_NO
				, TRANSF_AMT
				, TRANSF_DATA_DIV_CD
				, TRANSF_DATA_FRWD_STUS_CD
				, TRANSF_DATA_FRWD_YMD
				, STRT_ADJ_PERIOD_YMD
				, END_ADJ_PERIOD_YMD
				, LAST_REG_PRSN_ID
				, LAST_REG_DATE
				, CLOSE_YN
				, CLOSE_YMD
				, GOODS_CNT
			)
            VALUES
            ( 
            	  #suppo_rgistpo_cd#
            	, TO_CHAR(SYSDATE,'YYYYMMDD')
            	, #v_transf_data_seq# 
            	, #acc_no#
            	, #claim_treat_amt#
            	, '11'
            	, '01'
            	, #adj_start_day#
            	, #adj_end_day#
            	, TO_CHAR(SYSDATE,'YYYYMMDD')
            	, 'batch'
            	, SYSDATE
            	, 'N'
            	, ''
            	, 0
			)
    ]]>
	</insert>	
	
	<!-- 공급정산을 위한 카드환불 정리  -->
	<update id="updateChangeCardRefundMethod" parameterClass="java.util.HashMap">		
    <![CDATA[
		UPDATE OD_RET_INTERFACE A 
		SET    A.RETRNGD_REFUND_METH_CD = '02'
			 , A.POSA_ACC_TRANSF_STUS_CD = '004'
			 , A.POSA_ACC_TRANSF_TREAT_YMD = TO_CHAR(SYSDATE,'YYYYMMDD')
		WHERE  A.POSA_ACC_TRANSF_STUS_CD IN ('001')
		AND    A.RETRNGD_REFUND_METH_CD = '03'
		AND    A.ORDER_ITM_ID = #order_itm_id#
		AND    A.CLAIM_REQ_SEQ = #claim_req_seq#
    ]]>		 	
 	</update>	
 	
 	<!-- 정산대상 기간 내의 ORDER_ITM, ADJ_GOODS 가 일치하지 않는 건이 있는지 조회 -->
 	<select id="selectOrderItmMinusAdjGoods" parameterClass="java.util.HashMap" resultClass="int">	
	<![CDATA[ 	
        SELECT COUNT(*) AS DIFF_CNT
        FROM
		(	
		SELECT 
		    COMPLETE_DATE
		    , SUPP_PO_REGI_PO_CD
		    , SUPP_COMP_CD
		    , GOODS_CODE
		    , CANCEL_YN
		    , SHOP_ID
		    , RECV_TYPE
		    , NVL(SUM(SETTLE_AMOUNT), 0) AS SETTLE_AMOUNT
		/*  , NVL(SUM(FEE_AMOUNT), 0) AS FEE_AMOUNT */
		    , NVL(SUM(AMOUNT_CASH), 0) AS AMOUNT_CASH
		    , NVL(SUM(AMOUNT_ACCOUNT), 0) AS AMOUNT_ACCOUNT
		    , NVL(SUM(AMOUNT_BANKTOWN), 0) AS AMOUNT_BANKTOWN
		    , NVL(SUM(AMOUNT_OTHER_BANKTOWN), 0) AS AMOUNT_OTHER_BANKTOWN
		    , NVL(SUM(AMOUNT_CARD_POSTNET), 0) AS AMOUNT_CARD_POSTNET
		    , NVL(SUM(AMOUNT_CARD_EPOST), 0) AS AMOUNT_CARD_EPOST
		    , NVL(SUM(AMOUNT_ONURI), 0) AS AMOUNT_ONURI
		    , NVL(SUM(AMOUNT_CARD_OVERSEA), 0) AS AMOUNT_CARD_OVERSEA
		    , NVL(SUM(AMOUNT_SP), 0) AS AMOUNT_SP
		    , NVL(SUM(AMOUNT_RM), 0) AS AMOUNT_RM
		    , NVL(SUM(AMOUNT_COUPON_CSF), 0) AS AMOUNT_COUPON_CSF
		    , NVL(SUM(AMOUNT_COUPON_BIZ), 0) AS AMOUNT_COUPON_BIZ
		    , NVL(SUM(AMOUNT_MULTIGIFT), 0) AS AMOUNT_MULTIGIFT
		    , NVL(SUM(AMOUNT_CYBERPASS), 0) AS AMOUNT_CYBERPASS
		    , NVL(SUM(GOODS_CNT), 0) AS GOODS_CNT
		    , NVL(SUM(GOODS_AMOUNT), 0) AS GOODS_AMOUNT
		    , NVL(SUM(RET_CNT), 0) AS RET_CNT
		    , NVL(SUM(RET_AMOUNT), 0) AS RET_AMOUNT
		    , NVL(SUM(DELIV_DONE_CANCEL_CNT), 0) AS RET_CNT
		    , NVL(SUM(DELIV_DONE_CANCEL_AMOUNT), 0) AS RET_AMOUNT
		    , NVL(SUM(DEFICIT_CNT), 0) AS DEFICIT_CNT
		    , NVL(SUM(DEFICIT_AMOUNT), 0) AS DEFICIT_AMOUNT
		    , NVL(SUM(DELIV_CERT_AMOUNT), 0) AS DELIV_CERT_AMOUNT
		    , NVL(SUM(CONG_CARD_AMOUNT), 0) AS CONG_CARD_AMOUNT
		/*  , NVL(SUM(IMMEDIATE_PRCL_PRC), 0) AS IMMEDIATE_PRCL_PRC */
		/*  , NVL(SUM(LATER_PRCL_PRC), 0) AS LATER_PRCL_PRC */
		    , NVL(SUM(CSF_FEE), 0) AS CSF_FEE
		    , NVL(SUM(PO_FEE), 0) AS PO_FEE
		    , NVL(SUM(MART_FEE), 0) AS MART_FEE
		    , NVL(SUM(REFUND_CARD_SETL_FEE), 0) AS REFUND_CARD_SETL_FEE
		    , NVL(SUM(DEFICIT_CARD_SETL_FEE), 0) AS DEFICIT_CARD_SETL_FEE
		    , NVL(SUM(REFUND_GOODS_AMT), 0) AS REFUND_GOODS_AMT
		    , NVL(SUM(REFUND_CSF_FEE), 0) AS REFUND_CSF_FEE
		    , NVL(SUM(AMOUNT_OKCASH),0) AS AMOUNT_OKCASH
		    , NVL(SUM(AMOUNT_KAKAO),0) AS AMOUNT_KAKAO
		    , NVL(SUM(AMOUNT_MOBILE),0) AS AMOUNT_MOBILE                                   
			, NVL(SUM(AMOUNT_WALLET), 0) AS AMOUNT_WALLET
			, NVL(SUM(AMOUNT_POSTMPAY), 0) AS AMOUNT_POSTMPAY
			, NVL(SUM(AMOUNT_SYRUP_PAY), 0) AS AMOUNT_SYRUP_PAY
			, NVL(SUM(AMOUNT_NAVER_PAY), 0) AS AMOUNT_NAVER_PAY
			, NVL(SUM(AMOUNT_PAYNOW), 0) AS AMOUNT_PAYNOW
			, NVL(SUM(AMOUNT_PAYCO), 0) AS AMOUNT_PAYCO
			, NVL(SUM(AMOUNT_BANK_KAKAO), 0) AS AMOUNT_BANK_KAKAO
			, NVL(SUM(AMOUNT_RPAY), 0) AS AMOUNT_RPAY
			, NVL(SUM(AMOUNT_PAYPAL), 0) AS AMOUNT_PAYPAL /*신규 결제수단 추가부분 끝*/
		FROM
		(
	          SELECT 
                    TO_CHAR(A.APPR_DATE, 'YYYYMMDD') AS COMPLETE_DATE, 
                     B.SUPPO_RGIST_POCD AS SUPP_PO_REGI_PO_CD, 
                     B.SUPP_COMP_ID AS SUPP_COMP_CD,  
                     B.GOODS_CD AS    GOODS_CODE, 
                     B.GOODS_CANCEL_YN AS CANCEL_YN,
                     B.PAVLN_DIV_CD AS SHOP_ID,
                     NVL(A.ORDER_MDA_DIV_CD, '01') AS RECV_TYPE,
                     SUM((B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) + NVL(C.DELIV_CERT_FEE, 0) + NVL(C.CONG_CARD_FEE, 0)) AS SETTLE_AMOUNT,
                     SUM(NVL(C.FEE_AMT, 0)) AS FEE_AMOUNT,
                     SUM(DECODE(A.SETL_MEAN_CD,'15', NVL(B.CASH_BILL_AMT, 0), '17', NVL(B.CASH_BILL_AMT, 0), 0)) AS AMOUNT_CASH,
                     SUM(DECODE(A.SETL_MEAN_CD,'01',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0), 0))  AMOUNT_ACCOUNT,                                    
                     SUM(DECODE(A.SETL_MEAN_CD,'05',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0),
                                  '16',DECODE(A.PO_FNC_YN,'P',NVL(C.TRANS_AMT,0),0), 0))  AMOUNT_BANKTOWN,                                    
                     SUM(DECODE(A.SETL_MEAN_CD,'04',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0),
                                  '17',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0) - NVL(B.CASH_BILL_AMT,0), 0))  AMOUNT_CARD_POSTNET,
                     SUM(DECODE(A.SETL_MEAN_CD,'02',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0),
                                   '16',NVL(C.CARD_AMT1,0)+NVL(C.CARD_AMT2,0), 0)) AMOUNT_CARD_EPOST,                                                 
                     SUM(DECODE(A.SETL_MEAN_CD,'03',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0), 0)) AMOUNT_CARD_OVERSEA,
                     SUM(DECODE(A.SETL_MEAN_CD,'08',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0),
                                  '16',NVL(C.ONNURI_AMT,0),0)) AMOUNT_ONURI, 
                     SUM(B.PREMI_CUST_PNT_SETL_AMT) AS AMOUNT_SP,
                     SUM(B.PNT_USE_AMT) AS AMOUNT_RM,
                     SUM(DECODE(B.CP_CMP_CD1,'1',B.CPN_DC_AMT1, 0) + DECODE(B.CP_CMP_CD2,'1',B.CPN_DC_AMT2, 0)) AMOUNT_COUPON_CSF,        /* 쿠폰발행처코드-진흥원 */
                     SUM(DECODE(B.CP_CMP_CD1,'2',B.CPN_DC_AMT1, 0) + DECODE(B.CP_CMP_CD2,'2',B.CPN_DC_AMT2, 0)) AMOUNT_COUPON_BIZ          /* 쿠폰발행처코드-공급업체 */,
                     SUM(DECODE(B.CP_CMP_CD1,'3',B.CPN_DC_AMT1, 0) + DECODE(B.CP_CMP_CD2,'3',B.CPN_DC_AMT2, 0)) AMOUNT_COUPON_THANK,        /* 쿠폰유형코드*/
                     SUM(NVL(B.OKCASH_USE_AMT,0)) AS AMOUNT_OKCASH,
                     SUM(DECODE(A.SETL_MEAN_CD,'28',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0), 0)) AMOUNT_MULTIGIFT,
                     SUM(DECODE(A.SETL_MEAN_CD,'12',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0), 0)) AMOUNT_CYBERPASS,
                     SUM(1) GOODS_CNT,
                     SUM((B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0))) AS GOODS_AMOUNT,
                     SUM(CASE WHEN B.RETRNGD_YN = 'Y' THEN 1 ELSE 0 END) AS RET_CNT,    /* 반품여부 OD_ORDER_ITM/RETRNGD_YN */
                     SUM(CASE WHEN B.RETRNGD_YN = 'Y' THEN (B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) ELSE 0 END) AS RET_AMOUNT,
                     0 AS DELIV_DONE_CANCEL_CNT,
                     0 AS DELIV_DONE_CANCEL_AMOUNT,
                     SUM(CASE WHEN B.DEFICIT_YN = 'Y' THEN 1 ELSE 0 END) AS DEFICIT_CNT,    /* 조정여부 OD_ORDER_ITM.ADJ_YN */
                     SUM(CASE WHEN B.DEFICIT_YN = 'Y' THEN (B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) ELSE 0 END) AS DEFICIT_AMOUNT,
                     SUM(NVL(C.DELIV_CERT_FEE, 0)) AS DELIV_CERT_AMOUNT,
                     SUM(NVL(C.CONG_CARD_FEE, 0)) AS CONG_CARD_AMOUNT,
                     SUM(NVL(B.IMMPMN_PRCL_AMT, 0)) AS IMMEDIATE_PRCL_PRC,    /* 즉납 소포금액*/
                     SUM(NVL(B.AFTPMN_PRCL_AMT, 0)) AS LATER_PRCL_PRC,            /* 후납 소포금액 */
                     SUM(CASE WHEN B.RETRNGD_YN = 'Y' THEN 0 WHEN B.DEFICIT_YN = 'Y' THEN 0 ELSE NVL(C.POSA_FEE, 0) END) AS CSF_FEE,    /* 진흥원 수수료*/
                     SUM(CASE WHEN B.RETRNGD_YN = 'Y' THEN 0 WHEN B.DEFICIT_YN = 'Y' THEN 0 ELSE NVL(C.OUTSID_COPRTN_SHOPMALL_FEE, 0) END) AS EXT_MALL_FEE,    /* 외부_쇼핑몰_수수료 OD_ORDER_MAST.COPRTN_SHOPMALL_FEE(제휴쇼핑몰수수료-데이터 있음) OR OD_ORDER_FEE.OUTSID_COPRTN_SHOPMALL_FEE(외부제휴쇼핑몰수수료-데이터 없음) */
                     SUM(CASE WHEN B.RETRNGD_YN = 'Y' THEN 0 WHEN B.DEFICIT_YN = 'Y'  THEN 0 WHEN B.PAVLN_DIV_CD != '92' THEN NVL(C.FLWR_DELIV_FEE, 0) ELSE 0 END) AS PO_FEE,
                     SUM(CASE WHEN B.RETRNGD_YN = 'Y' THEN 0 WHEN B.DEFICIT_YN = 'Y'  THEN 0 WHEN B.PAVLN_DIV_CD = '92' THEN NVL(C.FLWR_DELIV_FEE, 0) ELSE 0 END) AS MART_FEE,
                     SUM(CASE WHEN B.RETRNGD_YN = 'Y' THEN NVL(C.RETRNGD_CARD_REFUND_FEE, 0) ELSE 0 END) AS REFUND_CARD_SETL_FEE,
                     SUM(CASE WHEN B.DEFICIT_YN = 'Y' THEN NVL(C.DEFICIT_CARD_SETL_FEE, 0) ELSE 0 END) AS DEFICIT_CARD_SETL_FEE, 
                     0 AS REFUND_GOODS_AMT, 
                     0 AS REFUND_CSF_FEE , 
                     SUM(DECODE(A.SETL_MEAN_CD,'20',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0), 0)) AMOUNT_KAKAO,
                     SUM(DECODE(A.SETL_MEAN_CD,'13',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0), 0)) AMOUNT_MOBILE,
                     SUM(DECODE(A.SETL_MEAN_CD,'06',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0),
                                  '16',DECODE(A.PO_FNC_YN,'P',0,NVL(C.TRANS_AMT,0)), 0)) AMOUNT_OTHER_BANKTOWN,                                    
                     SUM(DECODE(A.SETL_MEAN_CD,'10',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0), 0)) AMOUNT_WALLET,
                     SUM(DECODE(A.SETL_MEAN_CD,'21',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0), 0)) AMOUNT_POSTMPAY,
                     SUM(DECODE(A.SETL_MEAN_CD,'22',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0), 0)) AMOUNT_SYRUP_PAY,
                     SUM(DECODE(A.SETL_MEAN_CD,'23',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0), 0)) AMOUNT_NAVER_PAY,
                     SUM(DECODE(A.SETL_MEAN_CD,'24',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0), 0)) AMOUNT_PAYNOW,
                     SUM(DECODE(A.SETL_MEAN_CD,'25',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0), 0)) AMOUNT_PAYCO,
                     SUM(DECODE(A.SETL_MEAN_CD,'26',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0), 0)) AMOUNT_BANK_KAKAO,
                     SUM(DECODE(A.SETL_MEAN_CD,'27',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0), 0)) AMOUNT_RPAY,
                     SUM(DECODE(A.SETL_MEAN_CD,'07',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0), 0)) AMOUNT_PAYPAL
                     , 0 AS ADJAFTER_NETCANCEL_REVAMT
                     , 0 AS ADJAFTER_NETCANCEL_REVFEE
                FROM OD_ORDER_MAST A, OD_ORDER_ITM B, OD_ORDER_FEE C
                WHERE 1 = 1
                AND A.ORDER_ID = B.ORDER_ID
                AND B.ORDER_ITM_ID = C.ORDER_ITM_ID
                AND B.PAVLN_DIV_CD IN('01','02','03','04','05','07','09','99')                                
                AND A.APPR_DATE BETWEEN TO_DATE(#adj_start_day#,'YYYYMMDD') AND TO_DATE(#adj_end_day#,'YYYYMMDD')+.99999 
                AND NOT ( B.GOODS_CANCEL_YN = 'Y' AND NVL(B.AFTPMN_PRCL_AMT, 0) > 0)
                GROUP BY TO_CHAR(A.APPR_DATE, 'YYYYMMDD'), B.SUPPO_RGIST_POCD, B.SUPP_COMP_ID,  B.GOODS_CD, B.GOODS_CANCEL_YN, B.PAVLN_DIV_CD, A.ORDER_MDA_DIV_CD 
                UNION ALL
                SELECT 
                      TO_CHAR(A.APPR_DATE, 'YYYYMMDD') AS COMPLETE_DATE 
                    , B.SUPPO_RGIST_POCD AS SUPP_PO_REGI_PO_CD 
                    , B.SUPP_COMP_ID AS SUPP_COMP_CD
                    , B.GOODS_CD AS GOODS_CODE
                    , 'N' AS CANCEL_YN
                    , B.PAVLN_DIV_CD AS SHOP_ID
                    , NVL(A.ORDER_MDA_DIV_CD, '01') AS RECV_TYPE
                    , 0 AS SETTLE_AMOUNT
                    , 0 AS FEE_AMOUNT
                    , 0 AS AMOUNT_CASH
                    , 0 AS AMOUNT_ACCOUNT
                    , 0 AS AMOUNT_BANKTOWN
                    , 0 AS AMOUNT_CARD_POSTNET
                    , 0 AS AMOUNT_CARD_EPOST
                    , 0 AS AMOUNT_CARD_OVERSEA
                    , 0 AS AMOUNT_ONURI
                    , 0 AS AMOUNT_SP
                    , 0 AS AMOUNT_RM
                    , 0 AS AMOUNT_COUPON_CSF
                    , 0 AS AMOUNT_COUPON_BIZ
                    , 0 AS AMOUNT_COUPON_THANK
                    , 0 AS AMOUNT_OKCASH
                    , 0 AS AMOUNT_MULTIGIFT
                    , 0 AS AMOUNT_CYBERPASS
                    , 0 AS GOODS_CNT
                    , 0 AS GOODS_AMOUNT
                    , 0 AS RET_CNT
                    , 0 AS RET_AMOUNT
                    , NVL(SUM(1), 0) AS DELIV_DONE_CANCEL_CNT
                    , SUM(NVL(B.DC_APPLY_PRC, 0) + NVL(B.OPTN_GOODS_APPLY_PRC, 0) + NVL(B.SEND_PRC, 0)) AS DELIV_DONE_CANCEL_AMOUNT
                    , 0 AS DEFICIT_CNT
                    , 0 AS DEFICIT_AMOUNT
                    , 0 AS DELIV_CERT_AMOUNT
                    , 0 AS CONG_CARD_AMOUNT
                    , 0 AS IMMEDIATE_PRCL_PRC
                    , SUM(NVL(B.AFTPMN_PRCL_AMT, 0)) AS LATER_PRCL_PRC
                    , 0 AS CSF_FEE
                    , 0 AS EXT_MALL_FEE
                    , 0 AS PO_FEE
                    , 0 AS MART_FEE
                    , 0 AS REFUND_CARD_SETL_FEE
                    , 0 AS DEFICIT_CARD_SETL_FEE
                    , 0 AS REFUND_GOODS_AMT
                    , 0 AS REFUND_CSF_FEE
                    , 0 AS AMOUNT_KAKAO
                    , 0 AS AMOUNT_MOBILE
                    , 0 AS AMOUNT_OTHER_BANKTOWN                                    
				    , 0 AS AMOUNT_WALLET
				    , 0 AS AMOUNT_POSTMPAY
				    , 0 AS AMOUNT_SYRUP_PAY
				    , 0 AS AMOUNT_NAVER_PAY
				    , 0 AS AMOUNT_PAYNOW
				    , 0 AS AMOUNT_PAYCO
				    , 0 AS AMOUNT_BANK_KAKAO
				    , 0 AS AMOUNT_RPAY
				    , 0 AS AMOUNT_PAYPAL
				    , 0 AS ADJAFTER_NETCANCEL_REVAMT
				    , 0 AS ADJAFTER_NETCANCEL_REVFEE
                FROM OD_ORDER_MAST A, OD_ORDER_ITM B
                WHERE 1 = 1
                AND A.ORDER_ID = B.ORDER_ID                              
                AND B.PAVLN_DIV_CD IN('01','02','03','04','05','07','09','99')
                AND A.APPR_DATE BETWEEN TO_DATE(#adj_start_day#,'YYYYMMDD') AND TO_DATE(#adj_end_day#,'YYYYMMDD')+.99999
                AND ( B.GOODS_CANCEL_YN = 'Y'  AND NVL(B.AFTPMN_PRCL_AMT, 0) > 0)
                GROUP BY TO_CHAR(A.APPR_DATE, 'YYYYMMDD'), B.SUPPO_RGIST_POCD, B.SUPP_COMP_ID,  B.GOODS_CD, B.GOODS_CANCEL_YN, B.PAVLN_DIV_CD, A.ORDER_MDA_DIV_CD 
                UNION ALL
                SELECT 
                      A.CLAIM_CONF_YMD AS COMPLETE_DATE
                      , C.SUPPO_RGIST_POCD AS SUPP_PO_REGI_PO_CD
                      , C.SUPP_COMP_ID AS SUPP_COMP_CD
                      , C.GOODS_CD AS GOODS_CODE
                      , 'N' AS CANCEL_YN
                      , C.PAVLN_DIV_CD AS SHOP_ID
                      , NVL(B.ORDER_MDA_DIV_CD, '01') AS RECV_TYPE
                      , 0 AS SETTLE_AMOUNT
                      , 0 AS FEE_AMOUNT
                      , 0 AS AMOUNT_CASH
                      , 0 AS AMOUNT_ACCOUNT
                      , 0 AS AMOUNT_BANKTOWN
                      , 0 AS AMOUNT_CARD_POSTNET
                      , 0 AS AMOUNT_CARD_EPOST
                      , 0 AS AMOUNT_CARD_OVERSEA
                      , 0 AS AMOUNT_ONURI
                      , 0 AS AMOUNT_SP
                      , 0 AS AMOUNT_RM
                      , 0 AS AMOUNT_COUPON_CSF
                      , 0 AS AMOUNT_COUPON_BIZ
                      , 0 AS AMOUNT_COUPON_THANK
                      , 0 AS AMOUNT_OKCASH
                      , 0 AS AMOUNT_MULTIGIFT
                      , 0 AS AMOUNT_CYBERPASS
                      , 0 AS GOODS_CNT
                      , 0 AS GOODS_AMOUNT
                      , 0 AS RET_CNT
                      , 0 AS RET_AMOUNT
                      , 0 AS DELIV_DONE_CANCEL_CNT
                      , 0 AS DELIV_DONE_CANCEL_AMOUNT
                      , 0 AS DEFICIT_CNT
                      , 0 AS DEFICIT_AMOUNT
                      , 0 AS DELIV_CERT_AMOUNT
                      , 0 AS CONG_CARD_AMOUNT
                      , 0 AS IMMEDIATE_PRCL_PRC
                      , 0 AS LATER_PRCL_PRC
                      , 0 AS CSF_FEE
                      , 0 AS EXT_MALL_FEE
                      , 0 AS PO_FEE
                      , 0 AS MART_FEE
                      , 0 AS REFUND_CARD_SETL_FEE
                      , 0 AS DEFICIT_CARD_SETL_FEE
                      , SUM(NVL(A.CLAIM_TREAT_AMT, 0)) AS REFUND_GOODS_AMT
                      , SUM(NVL(A.REFUND_RETRNGD_CSF_FEE, 0)) AS REFUND_CSF_FEE
                      , 0 AS AMOUNT_KAKAO
                      , 0 AS AMOUNT_MOBILE
                      , 0 AS AMOUNT_OTHER_BANKTOWN                                    
				      , 0 AS AMOUNT_WALLET
				      , 0 AS AMOUNT_POSTMPAY
				      , 0 AS AMOUNT_SYRUP_PAY
				      , 0 AS AMOUNT_NAVER_PAY
				      , 0 AS AMOUNT_PAYNOW
				      , 0 AS AMOUNT_PAYCO
				      , 0 AS AMOUNT_BANK_KAKAO
				      , 0 AS AMOUNT_RPAY
				      , 0 AS AMOUNT_PAYPAL
				      , SUM(CASE WHEN RETRNGD_REFUND_METH_CD IN ('07','09') AND PAVLN_DIV_CD IN ('01','02','04','07','99') THEN NVL(A.CLAIM_TREAT_AMT, 0) ELSE 0 END) ADJAFTER_NETCANCEL_REVAMT
				      , SUM(CASE WHEN RETRNGD_REFUND_METH_CD IN ('07','09') AND PAVLN_DIV_CD IN ('01','02','04','07','99') THEN NVL(D.FEE_AMT, 0) ELSE 0 END) ADJAFTER_NETCANCEL_REVFEE
                  FROM OD_RET_INTERFACE A, OD_ORDER_MAST B, OD_ORDER_ITM C, OD_ORDER_FEE D
                  WHERE 1 = 1
                  AND A.ORDER_ID = B.ORDER_ID
                  AND A.ORDER_ITM_ID = C.ORDER_ITM_ID    /* 조인조건 확인 */
                  AND B.ORDER_ID = C.ORDER_ID
                  AND C.ORDER_ITM_ID= D.ORDER_ITM_ID
                  AND A.CLAIM_CONF_YMD BETWEEN #adj_start_day# AND #adj_end_day#                                
                  AND C.PAVLN_DIV_CD IN('01','02','03','04','05','07','09','99')
                  AND C.GOODS_CANCEL_YN = 'N' 
                  AND (( A.RETRNGD_REFUND_METH_CD IN ('04','06','08') AND A.POSA_ACC_TRANSF_TRGT_YN = 'Y' ) OR ( A.RETRNGD_REFUND_METH_CD IN ('07','09'))) /*POSA_ACC_TRANSF_TRGT_YN: 진흥원계좌이체대상여부, RETRNGD_REFUND_METH_CD : 04 정산후현금, 06 제외매장정산후현금,07정산후카드,08제외매장정산후현금(창구),09정산후카드(창구)*/
                  AND A.TREAT_STUS_CD <> '004'
                  GROUP BY A.CLAIM_CONF_YMD, C.SUPPO_RGIST_POCD, C.SUPP_COMP_ID, C.GOODS_CD, C.PAVLN_DIV_CD, B.ORDER_MDA_DIV_CD
		)
		GROUP BY COMPLETE_DATE, SUPP_PO_REGI_PO_CD, SUPP_COMP_CD, GOODS_CODE, CANCEL_YN, SHOP_ID, RECV_TYPE  
		MINUS
		SELECT 
	            COMPLETE_DATE
	            , SUPP_PO_REGI_PO_CD
	            , SUPP_COMP_ID
	            , GOODS_CD
	            , GOODS_CANCEL_YN
	            , PAVLN_DIV_CD AS SHOP_ID
	            , ORDER_MDA_DIV_CD AS RECV_TYPE
	            , SETTLE_AMOUNT
	            /* , FEE_AMOUNT */
	            , AMOUNT_CASH
	            , AMOUNT_ACCOUNT
	            , AMOUNT_BANKTOWN
	            , AMOUNT_OTHER_BANKTOWN
	            , AMOUNT_CARD_POSTNET
	            , AMOUNT_CARD_EPOST
	            , AMOUNT_ONURI
	            , AMOUNT_CARD_OVERSEA
	            , AMOUNT_SP
	            , AMOUNT_RM
	            , AMOUNT_COUPON_CSF
	            , AMOUNT_COUPON_BIZ
	            , AMOUNT_MULTIGIFT
	            , AMOUNT_CYBERPASS
	            , GOODS_CNT
	            , GOODS_AMOUNT
	            , RET_CNT
	            , RET_AMOUNT
	            , DELIV_DONE_CANCEL_CNT
	            , DELIV_DONE_CANCEL_AMOUNT
	            , DEFICIT_CNT
	            , DEFICIT_AMOUNT
	            , DELIV_CERT_AMOUNT
	            , CONG_CARD_AMOUNT
	            /*    , IMMEDIATE_PRCL_PRC */
	            /*      , LATER_PRCL_PRC */
	            , CSF_FEE
	            , PO_FEE
	            , MART_FEE
	            , REFUND_CARD_SETL_FEE
	            , DEFICIT_CARD_SETL_FEE
	            , REFUND_GOODS_AMT
	            , REFUND_CSF_FEE
	            , AMOUNT_OKCASH
	            , AMOUNT_KAKAO
	            , AMOUNT_MOBILE
	            , AMOUNT_WALLET
				, AMOUNT_POSTMPAY
				, AMOUNT_SYRUP_PAY
				, AMOUNT_NAVER_PAY
				, AMOUNT_PAYNOW
				, AMOUNT_PAYCO
				, AMOUNT_BANK_KAKAO
				, AMOUNT_RPAY
				, AMOUNT_PAYPAL
		FROM ST_ADJ_GOODS
		WHERE COMPLETE_DATE BETWEEN #adj_start_day# AND #adj_end_day#    
		AND    PAVLN_DIV_CD IN ('01', '02', '03', '04', '05', '07', '09', '99')
		AND    GOODS_CD <> '99'
		)		             	
    ]]>									
 	</select>			
 	
	<!-- 정산대상 기간 내의 ORDER_ITM, ADJ_GOODS 가 일치하지 않는 건이 있는지 조회 -->
 	<select id="selectAdjGoodsMinusOrderItm" parameterClass="java.util.HashMap" resultClass="int">	
	<![CDATA[ 	
        SELECT COUNT(*) AS DIFF_CNT
        FROM
		(	
		SELECT 
	            COMPLETE_DATE
	            , SUPP_PO_REGI_PO_CD
	            , SUPP_COMP_ID
	            , GOODS_CD
	            , GOODS_CANCEL_YN
	            , PAVLN_DIV_CD AS SHOP_ID
	            , ORDER_MDA_DIV_CD AS RECV_TYPE
	            , SETTLE_AMOUNT
	            /* , FEE_AMOUNT */
	            , AMOUNT_CASH
	            , AMOUNT_ACCOUNT
	            , AMOUNT_BANKTOWN
	            , AMOUNT_OTHER_BANKTOWN
	            , AMOUNT_CARD_POSTNET
	            , AMOUNT_CARD_EPOST
	            , AMOUNT_ONURI
	            , AMOUNT_CARD_OVERSEA
	            , AMOUNT_SP
	            , AMOUNT_RM
	            , AMOUNT_COUPON_CSF
	            , AMOUNT_COUPON_BIZ
	            , AMOUNT_MULTIGIFT
	            , AMOUNT_CYBERPASS
	            , GOODS_CNT
	            , GOODS_AMOUNT
	            , RET_CNT
	            , RET_AMOUNT
	            , DELIV_DONE_CANCEL_CNT
	            , DELIV_DONE_CANCEL_AMOUNT
	            , DEFICIT_CNT
	            , DEFICIT_AMOUNT
	            , DELIV_CERT_AMOUNT
	            , CONG_CARD_AMOUNT
	            /*    , IMMEDIATE_PRCL_PRC */
	            /*      , LATER_PRCL_PRC */
	            , CSF_FEE
	            , PO_FEE
	            , MART_FEE
	            , REFUND_CARD_SETL_FEE
	            , DEFICIT_CARD_SETL_FEE
	            , REFUND_GOODS_AMT
	            , REFUND_CSF_FEE
	            , AMOUNT_OKCASH
	            , AMOUNT_KAKAO
	            , AMOUNT_MOBILE
	            , AMOUNT_WALLET
				, AMOUNT_POSTMPAY
				, AMOUNT_SYRUP_PAY
				, AMOUNT_NAVER_PAY
				, AMOUNT_PAYNOW
				, AMOUNT_PAYCO
				, AMOUNT_BANK_KAKAO
				, AMOUNT_RPAY
				, AMOUNT_PAYPAL
		FROM ST_ADJ_GOODS
		WHERE COMPLETE_DATE BETWEEN #adj_start_day# AND #adj_end_day#    
		AND    PAVLN_DIV_CD IN ('01', '02', '03', '04', '05', '07', '09', '99')
		AND    GOODS_CD <> '99'
		MINUS
		SELECT 
		    COMPLETE_DATE
		    , SUPP_PO_REGI_PO_CD
		    , SUPP_COMP_CD
		    , GOODS_CODE
		    , CANCEL_YN
		    , SHOP_ID
		    , RECV_TYPE
		    , NVL(SUM(SETTLE_AMOUNT), 0) AS SETTLE_AMOUNT
		/*  , NVL(SUM(FEE_AMOUNT), 0) AS FEE_AMOUNT */
		    , NVL(SUM(AMOUNT_CASH), 0) AS AMOUNT_CASH
		    , NVL(SUM(AMOUNT_ACCOUNT), 0) AS AMOUNT_ACCOUNT
		    , NVL(SUM(AMOUNT_BANKTOWN), 0) AS AMOUNT_BANKTOWN
		    , NVL(SUM(AMOUNT_OTHER_BANKTOWN), 0) AS AMOUNT_OTHER_BANKTOWN
		    , NVL(SUM(AMOUNT_CARD_POSTNET), 0) AS AMOUNT_CARD_POSTNET
		    , NVL(SUM(AMOUNT_CARD_EPOST), 0) AS AMOUNT_CARD_EPOST
		    , NVL(SUM(AMOUNT_ONURI), 0) AS AMOUNT_ONURI
		    , NVL(SUM(AMOUNT_CARD_OVERSEA), 0) AS AMOUNT_CARD_OVERSEA
		    , NVL(SUM(AMOUNT_SP), 0) AS AMOUNT_SP
		    , NVL(SUM(AMOUNT_RM), 0) AS AMOUNT_RM
		    , NVL(SUM(AMOUNT_COUPON_CSF), 0) AS AMOUNT_COUPON_CSF
		    , NVL(SUM(AMOUNT_COUPON_BIZ), 0) AS AMOUNT_COUPON_BIZ
		    , NVL(SUM(AMOUNT_MULTIGIFT), 0) AS AMOUNT_MULTIGIFT
		    , NVL(SUM(AMOUNT_CYBERPASS), 0) AS AMOUNT_CYBERPASS
		    , NVL(SUM(GOODS_CNT), 0) AS GOODS_CNT
		    , NVL(SUM(GOODS_AMOUNT), 0) AS GOODS_AMOUNT
		    , NVL(SUM(RET_CNT), 0) AS RET_CNT
		    , NVL(SUM(RET_AMOUNT), 0) AS RET_AMOUNT
		    , NVL(SUM(DELIV_DONE_CANCEL_CNT), 0) AS RET_CNT
		    , NVL(SUM(DELIV_DONE_CANCEL_AMOUNT), 0) AS RET_AMOUNT
		    , NVL(SUM(DEFICIT_CNT), 0) AS DEFICIT_CNT
		    , NVL(SUM(DEFICIT_AMOUNT), 0) AS DEFICIT_AMOUNT
		    , NVL(SUM(DELIV_CERT_AMOUNT), 0) AS DELIV_CERT_AMOUNT
		    , NVL(SUM(CONG_CARD_AMOUNT), 0) AS CONG_CARD_AMOUNT
		/*  , NVL(SUM(IMMEDIATE_PRCL_PRC), 0) AS IMMEDIATE_PRCL_PRC */
		/*  , NVL(SUM(LATER_PRCL_PRC), 0) AS LATER_PRCL_PRC */
		    , NVL(SUM(CSF_FEE), 0) AS CSF_FEE
		    , NVL(SUM(PO_FEE), 0) AS PO_FEE
		    , NVL(SUM(MART_FEE), 0) AS MART_FEE
		    , NVL(SUM(REFUND_CARD_SETL_FEE), 0) AS REFUND_CARD_SETL_FEE
		    , NVL(SUM(DEFICIT_CARD_SETL_FEE), 0) AS DEFICIT_CARD_SETL_FEE
		    , NVL(SUM(REFUND_GOODS_AMT), 0) AS REFUND_GOODS_AMT
		    , NVL(SUM(REFUND_CSF_FEE), 0) AS REFUND_CSF_FEE
		    , NVL(SUM(AMOUNT_OKCASH),0) AS AMOUNT_OKCASH
		    , NVL(SUM(AMOUNT_KAKAO),0) AS AMOUNT_KAKAO
		    , NVL(SUM(AMOUNT_MOBILE),0) AS AMOUNT_MOBILE                                   
			, NVL(SUM(AMOUNT_WALLET), 0) AS AMOUNT_WALLET
			, NVL(SUM(AMOUNT_POSTMPAY), 0) AS AMOUNT_POSTMPAY
			, NVL(SUM(AMOUNT_SYRUP_PAY), 0) AS AMOUNT_SYRUP_PAY
			, NVL(SUM(AMOUNT_NAVER_PAY), 0) AS AMOUNT_NAVER_PAY
			, NVL(SUM(AMOUNT_PAYNOW), 0) AS AMOUNT_PAYNOW
			, NVL(SUM(AMOUNT_PAYCO), 0) AS AMOUNT_PAYCO
			, NVL(SUM(AMOUNT_BANK_KAKAO), 0) AS AMOUNT_BANK_KAKAO
			, NVL(SUM(AMOUNT_RPAY), 0) AS AMOUNT_RPAY
			, NVL(SUM(AMOUNT_PAYPAL), 0) AS AMOUNT_PAYPAL /*신규 결제수단 추가부분 끝*/
		FROM
		(
	          SELECT 
                    TO_CHAR(A.APPR_DATE, 'YYYYMMDD') AS COMPLETE_DATE, 
                    B.SUPPO_RGIST_POCD AS SUPP_PO_REGI_PO_CD, 
                    B.SUPP_COMP_ID AS SUPP_COMP_CD,  
                    B.GOODS_CD AS    GOODS_CODE, 
                    B.GOODS_CANCEL_YN AS CANCEL_YN,
                    B.PAVLN_DIV_CD AS SHOP_ID,
                    NVL(A.ORDER_MDA_DIV_CD, '01') AS RECV_TYPE,
                    SUM((B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) + NVL(C.DELIV_CERT_FEE, 0) + NVL(C.CONG_CARD_FEE, 0)) AS SETTLE_AMOUNT,
                    SUM(NVL(C.FEE_AMT, 0)) AS FEE_AMOUNT,
                    SUM(DECODE(A.SETL_MEAN_CD,'15', NVL(B.CASH_BILL_AMT, 0), '17', NVL(B.CASH_BILL_AMT, 0), 0)) AS AMOUNT_CASH,
                    SUM(DECODE(A.SETL_MEAN_CD,'01',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0), 0))  AMOUNT_ACCOUNT,                                    
                    SUM(DECODE(A.SETL_MEAN_CD,'05',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0),
                                 '16',DECODE(A.PO_FNC_YN,'P',NVL(C.TRANS_AMT,0),0), 0))  AMOUNT_BANKTOWN,                                    
                    SUM(DECODE(A.SETL_MEAN_CD,'04',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0),
                                 '17',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0) - NVL(B.CASH_BILL_AMT,0), 0))  AMOUNT_CARD_POSTNET,
                    SUM(DECODE(A.SETL_MEAN_CD,'02',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0),
                                  '16',NVL(C.CARD_AMT1,0)+NVL(C.CARD_AMT2,0), 0)) AMOUNT_CARD_EPOST,                                                 
                    SUM(DECODE(A.SETL_MEAN_CD,'03',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0), 0)) AMOUNT_CARD_OVERSEA,
                    SUM(DECODE(A.SETL_MEAN_CD,'08',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0),
                                 '16',NVL(C.ONNURI_AMT,0),0)) AMOUNT_ONURI, 
                    SUM(B.PREMI_CUST_PNT_SETL_AMT) AS AMOUNT_SP,
                    SUM(B.PNT_USE_AMT) AS AMOUNT_RM,
                    SUM(DECODE(B.CP_CMP_CD1,'1',B.CPN_DC_AMT1, 0) + DECODE(B.CP_CMP_CD2,'1',B.CPN_DC_AMT2, 0)) AMOUNT_COUPON_CSF,        /* 쿠폰발행처코드-진흥원 */
                    SUM(DECODE(B.CP_CMP_CD1,'2',B.CPN_DC_AMT1, 0) + DECODE(B.CP_CMP_CD2,'2',B.CPN_DC_AMT2, 0)) AMOUNT_COUPON_BIZ          /* 쿠폰발행처코드-공급업체 */,
                    SUM(DECODE(B.CP_CMP_CD1,'3',B.CPN_DC_AMT1, 0) + DECODE(B.CP_CMP_CD2,'3',B.CPN_DC_AMT2, 0)) AMOUNT_COUPON_THANK,        /* 쿠폰유형코드*/
                    SUM(NVL(B.OKCASH_USE_AMT,0)) AS AMOUNT_OKCASH,
                    SUM(DECODE(A.SETL_MEAN_CD,'28',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0), 0)) AMOUNT_MULTIGIFT,
                    SUM(DECODE(A.SETL_MEAN_CD,'12',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0), 0)) AMOUNT_CYBERPASS,
                    SUM(1) GOODS_CNT,
                    SUM((B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0))) AS GOODS_AMOUNT,
                    SUM(CASE WHEN B.RETRNGD_YN = 'Y' THEN 1 ELSE 0 END) AS RET_CNT,    /* 반품여부 OD_ORDER_ITM/RETRNGD_YN */
                    SUM(CASE WHEN B.RETRNGD_YN = 'Y' THEN (B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) ELSE 0 END) AS RET_AMOUNT,
                    0 AS DELIV_DONE_CANCEL_CNT,
                    0 AS DELIV_DONE_CANCEL_AMOUNT,
                    SUM(CASE WHEN B.DEFICIT_YN = 'Y' THEN 1 ELSE 0 END) AS DEFICIT_CNT,    /* 조정여부 OD_ORDER_ITM.ADJ_YN */
                    SUM(CASE WHEN B.DEFICIT_YN = 'Y' THEN (B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) ELSE 0 END) AS DEFICIT_AMOUNT,
                    SUM(NVL(C.DELIV_CERT_FEE, 0)) AS DELIV_CERT_AMOUNT,
                    SUM(NVL(C.CONG_CARD_FEE, 0)) AS CONG_CARD_AMOUNT,
                    SUM(NVL(B.IMMPMN_PRCL_AMT, 0)) AS IMMEDIATE_PRCL_PRC,    /* 즉납 소포금액*/
                    SUM(NVL(B.AFTPMN_PRCL_AMT, 0)) AS LATER_PRCL_PRC,            /* 후납 소포금액 */
                    SUM(CASE WHEN B.RETRNGD_YN = 'Y' THEN 0 WHEN B.DEFICIT_YN = 'Y' THEN 0 ELSE NVL(C.POSA_FEE, 0) END) AS CSF_FEE,    /* 진흥원 수수료*/
                    SUM(CASE WHEN B.RETRNGD_YN = 'Y' THEN 0 WHEN B.DEFICIT_YN = 'Y' THEN 0 ELSE NVL(C.OUTSID_COPRTN_SHOPMALL_FEE, 0) END) AS EXT_MALL_FEE,    /* 외부_쇼핑몰_수수료 OD_ORDER_MAST.COPRTN_SHOPMALL_FEE(제휴쇼핑몰수수료-데이터 있음) OR OD_ORDER_FEE.OUTSID_COPRTN_SHOPMALL_FEE(외부제휴쇼핑몰수수료-데이터 없음) */
                    SUM(CASE WHEN B.RETRNGD_YN = 'Y' THEN 0 WHEN B.DEFICIT_YN = 'Y'  THEN 0 WHEN B.PAVLN_DIV_CD != '92' THEN NVL(C.FLWR_DELIV_FEE, 0) ELSE 0 END) AS PO_FEE,
                    SUM(CASE WHEN B.RETRNGD_YN = 'Y' THEN 0 WHEN B.DEFICIT_YN = 'Y'  THEN 0 WHEN B.PAVLN_DIV_CD = '92' THEN NVL(C.FLWR_DELIV_FEE, 0) ELSE 0 END) AS MART_FEE,
                    SUM(CASE WHEN B.RETRNGD_YN = 'Y' THEN NVL(C.RETRNGD_CARD_REFUND_FEE, 0) ELSE 0 END) AS REFUND_CARD_SETL_FEE,
                    SUM(CASE WHEN B.DEFICIT_YN = 'Y' THEN NVL(C.DEFICIT_CARD_SETL_FEE, 0) ELSE 0 END) AS DEFICIT_CARD_SETL_FEE, 
                    0 AS REFUND_GOODS_AMT, 
                    0 AS REFUND_CSF_FEE , 
                    SUM(DECODE(A.SETL_MEAN_CD,'20',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0), 0)) AMOUNT_KAKAO,
                    SUM(DECODE(A.SETL_MEAN_CD,'13',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0), 0)) AMOUNT_MOBILE,
                    SUM(DECODE(A.SETL_MEAN_CD,'06',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0),
                                 '16',DECODE(A.PO_FNC_YN,'P',0,NVL(C.TRANS_AMT,0)), 0)) AMOUNT_OTHER_BANKTOWN,                                    
                    SUM(DECODE(A.SETL_MEAN_CD,'10',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0), 0)) AMOUNT_WALLET,
                    SUM(DECODE(A.SETL_MEAN_CD,'21',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0), 0)) AMOUNT_POSTMPAY,
                    SUM(DECODE(A.SETL_MEAN_CD,'22',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0), 0)) AMOUNT_SYRUP_PAY,
                    SUM(DECODE(A.SETL_MEAN_CD,'23',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0), 0)) AMOUNT_NAVER_PAY,
                    SUM(DECODE(A.SETL_MEAN_CD,'24',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0), 0)) AMOUNT_PAYNOW,
                    SUM(DECODE(A.SETL_MEAN_CD,'25',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0), 0)) AMOUNT_PAYCO,
                    SUM(DECODE(A.SETL_MEAN_CD,'26',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0), 0)) AMOUNT_BANK_KAKAO,
                    SUM(DECODE(A.SETL_MEAN_CD,'27',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0), 0)) AMOUNT_RPAY,
                    SUM(DECODE(A.SETL_MEAN_CD,'07',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0), 0)) AMOUNT_PAYPAL
                    , 0 AS ADJAFTER_NETCANCEL_REVAMT
                    , 0 AS ADJAFTER_NETCANCEL_REVFEE
                FROM OD_ORDER_MAST A, OD_ORDER_ITM B, OD_ORDER_FEE C
                WHERE 1 = 1
                AND A.ORDER_ID = B.ORDER_ID
                AND B.ORDER_ITM_ID = C.ORDER_ITM_ID
                AND B.PAVLN_DIV_CD IN('01','02','03','04','05','07','09','99')                                
                AND A.APPR_DATE BETWEEN TO_DATE(#adj_start_day#,'YYYYMMDD') AND TO_DATE(#adj_end_day#,'YYYYMMDD')+.99999 
                AND NOT ( B.GOODS_CANCEL_YN = 'Y' AND NVL(B.AFTPMN_PRCL_AMT, 0) > 0)
                GROUP BY TO_CHAR(A.APPR_DATE, 'YYYYMMDD'), B.SUPPO_RGIST_POCD, B.SUPP_COMP_ID,  B.GOODS_CD, B.GOODS_CANCEL_YN, B.PAVLN_DIV_CD, A.ORDER_MDA_DIV_CD 
                UNION ALL
                SELECT 
                      TO_CHAR(A.APPR_DATE, 'YYYYMMDD') AS COMPLETE_DATE 
                    , B.SUPPO_RGIST_POCD AS SUPP_PO_REGI_PO_CD 
                    , B.SUPP_COMP_ID AS SUPP_COMP_CD
                    , B.GOODS_CD AS GOODS_CODE
                    , 'N' AS CANCEL_YN
                    , B.PAVLN_DIV_CD AS SHOP_ID
                    , NVL(A.ORDER_MDA_DIV_CD, '01') AS RECV_TYPE
                    , 0 AS SETTLE_AMOUNT
                    , 0 AS FEE_AMOUNT
                    , 0 AS AMOUNT_CASH
                    , 0 AS AMOUNT_ACCOUNT
                    , 0 AS AMOUNT_BANKTOWN
                    , 0 AS AMOUNT_CARD_POSTNET
                    , 0 AS AMOUNT_CARD_EPOST
                    , 0 AS AMOUNT_CARD_OVERSEA
                    , 0 AS AMOUNT_ONURI
                    , 0 AS AMOUNT_SP
                    , 0 AS AMOUNT_RM
                    , 0 AS AMOUNT_COUPON_CSF
                    , 0 AS AMOUNT_COUPON_BIZ
                    , 0 AS AMOUNT_COUPON_THANK
                    , 0 AS AMOUNT_OKCASH
                    , 0 AS AMOUNT_MULTIGIFT
                    , 0 AS AMOUNT_CYBERPASS
                    , 0 AS GOODS_CNT
                    , 0 AS GOODS_AMOUNT
                    , 0 AS RET_CNT
                    , 0 AS RET_AMOUNT
                    , NVL(SUM(1), 0) AS DELIV_DONE_CANCEL_CNT
                    , SUM(NVL(B.DC_APPLY_PRC, 0) + NVL(B.OPTN_GOODS_APPLY_PRC, 0) + NVL(B.SEND_PRC, 0)) AS DELIV_DONE_CANCEL_AMOUNT
                    , 0 AS DEFICIT_CNT
                    , 0 AS DEFICIT_AMOUNT
                    , 0 AS DELIV_CERT_AMOUNT
                    , 0 AS CONG_CARD_AMOUNT
                    , 0 AS IMMEDIATE_PRCL_PRC
                    , SUM(NVL(B.AFTPMN_PRCL_AMT, 0)) AS LATER_PRCL_PRC
                    , 0 AS CSF_FEE
                    , 0 AS EXT_MALL_FEE
                    , 0 AS PO_FEE
                    , 0 AS MART_FEE
                    , 0 AS REFUND_CARD_SETL_FEE
                    , 0 AS DEFICIT_CARD_SETL_FEE
                    , 0 AS REFUND_GOODS_AMT
                    , 0 AS REFUND_CSF_FEE
                    , 0 AS AMOUNT_KAKAO
                    , 0 AS AMOUNT_MOBILE
                    , 0 AS AMOUNT_OTHER_BANKTOWN                                    
				    , 0 AS AMOUNT_WALLET
				    , 0 AS AMOUNT_POSTMPAY
				    , 0 AS AMOUNT_SYRUP_PAY
				    , 0 AS AMOUNT_NAVER_PAY
				    , 0 AS AMOUNT_PAYNOW
				    , 0 AS AMOUNT_PAYCO
				    , 0 AS AMOUNT_BANK_KAKAO
				    , 0 AS AMOUNT_RPAY
				    , 0 AS AMOUNT_PAYPAL
				    , 0 AS ADJAFTER_NETCANCEL_REVAMT
				    , 0 AS ADJAFTER_NETCANCEL_REVFEE
                FROM OD_ORDER_MAST A, OD_ORDER_ITM B
                WHERE 1 = 1
                AND A.ORDER_ID = B.ORDER_ID                              
                AND B.PAVLN_DIV_CD IN('01','02','03','04','05','07','09','99')
                AND A.APPR_DATE BETWEEN TO_DATE(#adj_start_day#,'YYYYMMDD') AND TO_DATE(#adj_end_day#,'YYYYMMDD')+.99999
                AND ( B.GOODS_CANCEL_YN = 'Y'  AND NVL(B.AFTPMN_PRCL_AMT, 0) > 0)
                GROUP BY TO_CHAR(A.APPR_DATE, 'YYYYMMDD'), B.SUPPO_RGIST_POCD, B.SUPP_COMP_ID,  B.GOODS_CD, B.GOODS_CANCEL_YN, B.PAVLN_DIV_CD, A.ORDER_MDA_DIV_CD 
                UNION ALL
                SELECT 
                      A.CLAIM_CONF_YMD AS COMPLETE_DATE
                      , C.SUPPO_RGIST_POCD AS SUPP_PO_REGI_PO_CD
                      , C.SUPP_COMP_ID AS SUPP_COMP_CD
                      , C.GOODS_CD AS GOODS_CODE
                      , 'N' AS CANCEL_YN
                      , C.PAVLN_DIV_CD AS SHOP_ID
                      , NVL(B.ORDER_MDA_DIV_CD, '01') AS RECV_TYPE
                      , 0 AS SETTLE_AMOUNT
                      , 0 AS FEE_AMOUNT
                      , 0 AS AMOUNT_CASH
                      , 0 AS AMOUNT_ACCOUNT
                      , 0 AS AMOUNT_BANKTOWN
                      , 0 AS AMOUNT_CARD_POSTNET
                      , 0 AS AMOUNT_CARD_EPOST
                      , 0 AS AMOUNT_CARD_OVERSEA
                      , 0 AS AMOUNT_ONURI
                      , 0 AS AMOUNT_SP
                      , 0 AS AMOUNT_RM
                      , 0 AS AMOUNT_COUPON_CSF
                      , 0 AS AMOUNT_COUPON_BIZ
                      , 0 AS AMOUNT_COUPON_THANK
                      , 0 AS AMOUNT_OKCASH
                      , 0 AS AMOUNT_MULTIGIFT
                      , 0 AS AMOUNT_CYBERPASS
                      , 0 AS GOODS_CNT
                      , 0 AS GOODS_AMOUNT
                      , 0 AS RET_CNT
                      , 0 AS RET_AMOUNT
                      , 0 AS DELIV_DONE_CANCEL_CNT
                      , 0 AS DELIV_DONE_CANCEL_AMOUNT
                      , 0 AS DEFICIT_CNT
                      , 0 AS DEFICIT_AMOUNT
                      , 0 AS DELIV_CERT_AMOUNT
                      , 0 AS CONG_CARD_AMOUNT
                      , 0 AS IMMEDIATE_PRCL_PRC
                      , 0 AS LATER_PRCL_PRC
                      , 0 AS CSF_FEE
                      , 0 AS EXT_MALL_FEE
                      , 0 AS PO_FEE
                      , 0 AS MART_FEE
                      , 0 AS REFUND_CARD_SETL_FEE
                      , 0 AS DEFICIT_CARD_SETL_FEE
                      , SUM(NVL(A.CLAIM_TREAT_AMT, 0)) AS REFUND_GOODS_AMT
                      , SUM(NVL(A.REFUND_RETRNGD_CSF_FEE, 0)) AS REFUND_CSF_FEE
                      , 0 AS AMOUNT_KAKAO
                      , 0 AS AMOUNT_MOBILE
                      , 0 AS AMOUNT_OTHER_BANKTOWN                                    
				      , 0 AS AMOUNT_WALLET
				      , 0 AS AMOUNT_POSTMPAY
				      , 0 AS AMOUNT_SYRUP_PAY
				      , 0 AS AMOUNT_NAVER_PAY
				      , 0 AS AMOUNT_PAYNOW
				      , 0 AS AMOUNT_PAYCO
				      , 0 AS AMOUNT_BANK_KAKAO
				      , 0 AS AMOUNT_RPAY
				      , 0 AS AMOUNT_PAYPAL
				      , SUM(CASE WHEN RETRNGD_REFUND_METH_CD IN ('07','09') AND PAVLN_DIV_CD IN ('01','02','04','07','99') THEN NVL(A.CLAIM_TREAT_AMT, 0) ELSE 0 END) ADJAFTER_NETCANCEL_REVAMT
				      , SUM(CASE WHEN RETRNGD_REFUND_METH_CD IN ('07','09') AND PAVLN_DIV_CD IN ('01','02','04','07','99') THEN NVL(D.FEE_AMT, 0) ELSE 0 END) ADJAFTER_NETCANCEL_REVFEE
                  FROM OD_RET_INTERFACE A, OD_ORDER_MAST B, OD_ORDER_ITM C, OD_ORDER_FEE D
                  WHERE 1 = 1
                  AND A.ORDER_ID = B.ORDER_ID
                  AND A.ORDER_ITM_ID = C.ORDER_ITM_ID    /* 조인조건 확인 */
                  AND B.ORDER_ID = C.ORDER_ID
                  AND C.ORDER_ITM_ID= D.ORDER_ITM_ID
                  AND A.CLAIM_CONF_YMD BETWEEN #adj_start_day# AND #adj_end_day#                                
                  AND C.PAVLN_DIV_CD IN('01','02','03','04','05','07','09','99')
                  AND C.GOODS_CANCEL_YN = 'N' 
                  AND (( A.RETRNGD_REFUND_METH_CD IN ('04','06','08') AND A.POSA_ACC_TRANSF_TRGT_YN = 'Y' ) OR ( A.RETRNGD_REFUND_METH_CD IN ('07','09'))) /*POSA_ACC_TRANSF_TRGT_YN: 진흥원계좌이체대상여부, RETRNGD_REFUND_METH_CD : 04 정산후현금, 06 제외매장정산후현금,07정산후카드,08제외매장정산후현금(창구),09정산후카드(창구)*/
                  AND A.TREAT_STUS_CD <> '004'
                  GROUP BY A.CLAIM_CONF_YMD, C.SUPPO_RGIST_POCD, C.SUPP_COMP_ID, C.GOODS_CD, C.PAVLN_DIV_CD, B.ORDER_MDA_DIV_CD
		)
		GROUP BY COMPLETE_DATE, SUPP_PO_REGI_PO_CD, SUPP_COMP_CD, GOODS_CODE, CANCEL_YN, SHOP_ID, RECV_TYPE  
		)		             	
    ]]>									
 	</select>			 
 	
	<!-- 공급정산 결과반영 -->	   
	<select id="selectAdjSuppPoCtrtFeeList" parameterClass="java.util.HashMap" resultClass="commMap">	
	<![CDATA[ 	
		SELECT 
				( SELECT NVL(MAX(TRANSF_DATA_SEQ),0) FROM ST_CTRT_FEE_ADJ WHERE TRANSF_REQ_YMD=TO_CHAR(SYSDATE,'YYYYMMDD')) + ROWNUM AS TRANSF_DATA_SEQ 
				, SUPP_PO_REGI_PO_CD
				, TRANSF_REQ_YMD
				, SUPP_PO_ACC_NO as SUPP_PO_ACC_NO 
				, TRANSF_AMT
				, TRANSF_RSLT_PFNC_CD
				, TRANSF_RSLT_CONT
				, TRANSF_DATA_DIV_CD
				, TRANSF_DATA_FRWD_STUS_CD
				, TRANSF_DATA_FRWD_YMD
				, STRT_ADJ_PERIOD_YMD
				, END_ADJ_PERIOD_YMD
				, CLOSE_YN
				, CLOSE_YMD
				, GOODS_CNT
				, LAST_REG_PRSN_ID
				, LAST_REG_DATE
			FROM
				(
					SELECT 1
						 , SUPP_PO_REGI_PO_CD AS SUPP_PO_REGI_PO_CD
						 , TO_CHAR(SYSDATE,'YYYYMMDD') AS TRANSF_REQ_YMD
						 , (SELECT EDPSCD||'00000000' FROM PICMT0060 WHERE REGIPOCD = A.SUPP_PO_REGI_PO_CD AND USEYN='Y' AND ROWNUM=1) AS SUPP_PO_ACC_NO
						 , SUM(PO_FEE) AS TRANSF_AMT
						 , NULL AS TRANSF_RSLT_PFNC_CD
						 , NULL AS TRANSF_RSLT_CONT
						 , '08' AS TRANSF_DATA_DIV_CD
						 , '01' AS TRANSF_DATA_FRWD_STUS_CD
						 , '' AS TRANSF_DATA_FRWD_YMD
						 , #adj_start_day# AS STRT_ADJ_PERIOD_YMD
						 , #adj_end_day# AS END_ADJ_PERIOD_YMD
						 , 'N' AS CLOSE_YN
						 , '' AS CLOSE_YMD
						 , SUM(GOODS_CNT) AS GOODS_CNT
						 , 'batch' AS LAST_REG_PRSN_ID
						 , SYSDATE AS LAST_REG_DATE
					FROM   ST_ADJ_GOODS A
					WHERE  1=1
					AND    COMPLETE_DATE BETWEEN #adj_start_day# AND #adj_end_day#
					AND    GOODS_CANCEL_YN = 'N'
					GROUP BY SUPP_PO_REGI_PO_CD
					HAVING SUM(PO_FEE) > 0
				)    
    ]]>									
 	</select>	
 	
	<!-- 공급정산 결과반영 위탁수수료 인서트 -->		
	<insert id="insertAdjSuppPoCtrtFee" parameterClass="java.util.HashMap">		
    <![CDATA[ 	
		/* 위탁수수료 인서트[08] */
		INSERT INTO ST_CTRT_FEE_ADJ
			(
				TRANSF_DATA_SEQ
			  , SUPP_PO_REGI_PO_CD
			  , TRANSF_REQ_YMD
			  , SUPP_PO_ACC_SEED_NO
			  , TRANSF_AMT
			  , TRANSF_RSLT_PFNC_CD
			  , TRANSF_RSLT_CONT
			  , TRANSF_DATA_DIV_CD
			  , TRANSF_DATA_FRWD_STUS_CD
			  , TRANSF_DATA_FRWD_YMD
			  , STRT_ADJ_PERIOD_YMD
			  , END_ADJ_PERIOD_YMD
			  , CLOSE_YN
			  , CLOSE_YMD
			  , GOODS_CNT
			  , LAST_REG_PRSN_ID
			  , LAST_REG_DATE
			) 
			VALUES
			(
			    #transf_data_seq# 
			  , #supp_po_regi_po_cd#
			  , #transf_req_ymd#
			  , #supp_po_acc_seed_no# 
			  , #transf_amt# 
			  , #transf_rslt_pfnc_cd#
			  , #transf_rslt_cont#
			  , #transf_data_div_cd#
			  , #transf_data_frwd_stus_cd#
			  , #transf_data_frwd_ymd#
			  , #strt_adj_period_ymd#
			  , #end_adj_period_ymd#
			  , #close_yn#
			  , #close_ymd#
			  , #goods_cnt#
			  , #last_reg_prsn_id#
			  , SYSDATE
			)
    ]]> 			 
	</insert> 
	
	<!-- 배달증명 경조(축하)카드 정산 -->		
	<insert id="insertAdjSuppPoDelvCertNCongCard" parameterClass="java.util.HashMap">		
    <![CDATA[ 	
		/* 배달증명요금 + 경조카드 인서트[07] */
		INSERT INTO ST_SUPP_POREGI_TRF_AMT
			(
				  SUPP_PO_REGI_PO_CD
				, TRANSF_REQ_YMD
				, TRANSF_DATA_SEQ
				, SUPP_PO_ACC_SEED_NO
				, TRANSF_AMT
				, TRANSF_RSLT_PFNC_CD
				, TRANSF_RSLT_CONT
				, TRANSF_DATA_DIV_CD
				, TRANSF_DATA_FRWD_STUS_CD
				, TRANSF_DATA_FRWD_YMD
				, STRT_ADJ_PERIOD_YMD
				, END_ADJ_PERIOD_YMD
				, LAST_REG_PRSN_ID
				, LAST_REG_DATE
				, CLOSE_YN
				, CLOSE_YMD
				, GOODS_CNT
				, SUPP_COMP_CD
			)
			(
				SELECT 
						  SUPP_PO_REGI_PO_CD
						, TRANSF_REQ_YMD
						, ( SELECT NVL(MAX(TRANSF_DATA_SEQ),0) FROM ST_SUPP_POREGI_TRF_AMT WHERE TRANSF_REQ_YMD=TO_CHAR(SYSDATE,'YYYYMMDD')) + ROWNUM AS TRANSF_DATA_SEQ 
						, SUPP_PO_ACC_NO
						, TRANSF_AMT
						, TRANSF_RSLT_PFNC_CD
						, TRANSF_RSLT_CONT
						, TRANSF_DATA_DIV_CD
						, TRANSF_DATA_FRWD_STUS_CD
						, TRANSF_DATA_FRWD_YMD
						, STRT_ADJ_PERIOD_YMD
						, END_ADJ_PERIOD_YMD
						, LAST_REG_PRSN_ID
						, LAST_REG_DATE
						, CLOSE_YN
						, CLOSE_YMD
						, GOODS_CNT
						, SUPP_COMP_CD  
					FROM
						(
						SELECT 1
					 		 , SUPP_PO_REGI_PO_CD AS SUPP_PO_REGI_PO_CD
							 , TO_CHAR(SYSDATE,'YYYYMMDD') AS TRANSF_REQ_YMD
							 , (SELECT X.ADJ_ACC_NO FROM CO_SUPP_COMP_MAST X WHERE X.SUPP_COMP_ID = A.SUPP_COMP_ID and NVL(NATION_CD,'KO') IN ('KO', 'KOR') ) AS SUPP_PO_ACC_NO
							 , NVL(SUM(DELIV_CERT_AMOUNT), 0) + NVL(SUM(CONG_CARD_AMOUNT), 0) AS TRANSF_AMT
							 , NULL AS TRANSF_RSLT_PFNC_CD
							 , NULL AS TRANSF_RSLT_CONT
							 , '07' AS TRANSF_DATA_DIV_CD
							 , '01' AS TRANSF_DATA_FRWD_STUS_CD
							 , '' AS TRANSF_DATA_FRWD_YMD
							 , #adj_start_day#  AS STRT_ADJ_PERIOD_YMD
							 , #adj_end_day# AS END_ADJ_PERIOD_YMD
							 , 'batch' AS LAST_REG_PRSN_ID
							 , SYSDATE AS LAST_REG_DATE
							 , 'N' AS CLOSE_YN
							 , '' AS CLOSE_YMD
							 , 0 AS GOODS_CNT
							 , A.SUPP_COMP_ID AS SUPP_COMP_CD 
						FROM   ST_ADJ_GOODS A
						WHERE  1=1
						AND    COMPLETE_DATE BETWEEN #adj_start_day# AND #adj_end_day#
						AND    GOODS_CANCEL_YN = 'N'
						GROUP BY SUPP_PO_REGI_PO_CD, A.SUPP_COMP_ID
						HAVING SUM(DELIV_CERT_AMOUNT) > 0 OR SUM(CONG_CARD_AMOUNT) > 0
						)
			)
    ]]> 			 
	</insert> 		
	
	<!-- 지원단 수수료 정산 -->		
	<insert id="insertAdjCsfFee" parameterClass="java.util.HashMap">		
    <![CDATA[ 	
		/* 지원단 수수료 [02 03] = (지원단 수수료) - (정산후 환불건의 지원단 수수료)    */ 
		INSERT INTO ST_SUPP_POREGI_TRF_AMT
			(
				  SUPP_PO_REGI_PO_CD
				, TRANSF_REQ_YMD
				, TRANSF_DATA_SEQ
				, SUPP_PO_ACC_SEED_NO
				, TRANSF_AMT
				, TRANSF_RSLT_PFNC_CD
				, TRANSF_RSLT_CONT
				, TRANSF_DATA_DIV_CD
				, TRANSF_DATA_FRWD_STUS_CD
				, TRANSF_DATA_FRWD_YMD
				, STRT_ADJ_PERIOD_YMD
				, END_ADJ_PERIOD_YMD
				, LAST_REG_PRSN_ID
				, LAST_REG_DATE
				, CLOSE_YN
				, CLOSE_YMD
				, GOODS_CNT
				, SUPP_COMP_CD
			)
			(
				  SELECT 
						'99000' AS SUPP_PO_REGI_PO_CD
						, TO_CHAR(SYSDATE,'YYYYMMDD') AS TRANSF_REQ_YMD
						, ( SELECT NVL(MAX(TRANSF_DATA_SEQ),0) FROM ST_SUPP_POREGI_TRF_AMT WHERE TRANSF_REQ_YMD=TO_CHAR(SYSDATE,'YYYYMMDD')) + ROWNUM AS TRANSF_DATA_SEQ 
						, (SELECT ACC_SEED_NO FROM ST_POST_ACCNO PA WHERE ACC_NO_DIV_CD = DECODE(SHOP_ID, '2', '02', '8', '19', '03') ) AS SUPP_PO_ACC_NO     /* 02:특산품수수료계좌, 19:제철수수료계좌, 03:꽃배달수수료계좌     꽃배달(2)이 특산품계좌로 처리되는것 확인요망 */
						, TRANSF_AMT
						, NULL AS TRANSF_RSLT_PFNC_CD
						, NULL AS TRANSF_RSLT_CONT
						, DECODE(SHOP_ID, '2', '02','8', '19','03') AS TRANSF_DATA_DIV_CD
						, '01' AS TRANSF_DATA_FRWD_STUS_CD
						, '' AS TRANSF_DATA_FRWD_YMD
						, #adj_start_day# AS STRT_ADJ_PERIOD_YMD
						, #adj_end_day#   AS END_ADJ_PERIOD_YMD
						, 'batch' AS LAST_REG_PRSN_ID
						, SYSDATE AS LAST_REG_DATE
						, 'N' AS CLOSE_YN
						, '' AS CLOSE_YMD
						, GOODS_CNT AS GOODS_CNT
						, NULL AS SUPP_COMP_CD
				  FROM
						(
						SELECT 1
							 , NVL(SUM(CSF_FEE), 0) - NVL(SUM(REFUND_CARD_SETL_FEE), 0) - NVL(SUM(DEFICIT_CARD_SETL_FEE), 0) - NVL(SUM(REFUND_CSF_FEE), 0) AS TRANSF_AMT
							 , DECODE(PAVLN_DIV_CD, '04', '2', '02', '8', '01', '1', '07', '1') AS SHOP_ID      /* AS-IS 2(꽃배달)- 04,  8(제철)-02, 1(특산품)-프리미엄관*/
							 , NVL(SUM(GOODS_CNT), 0) AS GOODS_CNT
						FROM   ST_ADJ_GOODS A
						WHERE  1=1
						AND    COMPLETE_DATE BETWEEN #adj_start_day# AND #adj_end_day#  
						AND    GOODS_CANCEL_YN = 'N'
						AND    PAVLN_DIV_CD IN ('01', '02', '04', '07', '99')
						GROUP BY DECODE(PAVLN_DIV_CD, '04', '2', '02', '8', '01', '1', '07', '1')		       /* PAVLN_DIV_CD 변환유무 확인요망 */
						)
			)            
    ]]> 			 
	</insert> 	
	
	<!-- 후납소포료 -->		
	<insert id="insertSettleSuppAdjustment2_1" parameterClass="java.util.HashMap">		
    <![CDATA[ 	
		INSERT INTO ST_SUPP_COMP_ADJ_INFO 
			(
				  SUPP_PO_REGI_PO_CD
				, SUPP_COMP_ID
				, ADJ_YMD,ADJ_HMS,ADJ_CD
				, COMP_PO_REGI_PO_CD
				, FORWARD_AMT,ADJ_AMT,RCPT_PRC,SUB_AMT,TRANS_AMT,BAL_AMT,ADD_AMT
				, ADJ_PERIOD_YMD,ADJ_TREAT_STUS_CD,ADJ_TREAT_YMD, PAVLN_DIV_CD
			)    
		SELECT    SUPP_PO_REGI_PO_CD
				, SUPP_COMP_ID
				, ( SELECT TO_CHAR(TO_DATE(MAX(A.ADJ_YMD),'YYYYMMDD')+1,'YYYYMMDD') FROM ST_SUPP_COMP_ADJ_INFO A WHERE  A.ADJ_CD='13' )  /* ADJ_CD:13 후납소포료 */
				, ADJ_HMS,ADJ_CD, COMP_PO_REGI_PO_CD
				, BAL_AMT,0,0,0,0,BAL_AMT,0
				, ADJ_PERIOD_YMD,ADJ_TREAT_STUS_CD,TO_CHAR(SYSDATE,'YYYYMMDD'), NVL(PAVLN_DIV_CD,'01') PAVLN_DIV_CD
		FROM      ST_SUPP_COMP_ADJ_INFO A
		WHERE     A.ADJ_TREAT_STUS_CD = '001'
		AND       A.ADJ_PERIOD_YMD NOT LIKE SUBSTR(#adj_end_day#, 1, 6)||'%'
		AND       A.ADJ_TREAT_YMD <> TO_CHAR(SYSDATE,'YYYYMMDD')
		AND       A.ADJ_CD = '13'          
    ]]> 			 
	</insert> 	
	
	<!-- 후납소포료  -->
	<update id="updateSettleSuppAdjustment2_2" parameterClass="java.util.HashMap">	
    <![CDATA[
		UPDATE ST_SUPP_COMP_ADJ_INFO A SET  
			   ADJ_TREAT_STUS_CD = '004'
		WHERE  A.ADJ_TREAT_STUS_CD = '001'
		AND    A.ADJ_PERIOD_YMD NOT LIKE SUBSTR(#adj_end_day#, 1, 6)||'%'
		AND    A.ADJ_TREAT_YMD <> TO_CHAR(SYSDATE,'YYYYMMDD')
		AND    A.ADJ_CD = '13'
    ]]>			
	</update> 	

	<!-- 공급업체 정산대금 SEL -->	   
	<select id="selectSettleSuppAdjustment2_3" parameterClass="java.util.HashMap" resultClass="commMap">	
	<![CDATA[ 	
		SELECT 1 AS RN
				, SUPP_PO_REGI_PO_CD
				, SUPP_COMP_CD
				, PAVLN_DIV_CD
				, NVL(TRANSF_AMT, 0) AS GOODS_AMT
				, NVL(LATER_PRCL_PRC, 0) AS LATER_PRCL_PRC
				, NVL(LATER_PRCL_SALE_PRC, 0) AS LATER_PRCL_SALE_PRC
				, NVL(GOODS_CNT, 0) AS GOODS_CNT
				FROM
					(
						SELECT 1
								, A.SUPP_PO_REGI_PO_CD
								, A.SUPP_COMP_ID AS SUPP_COMP_CD
								, DECODE(A.PAVLN_DIV_CD, '07', '01', A.PAVLN_DIV_CD) PAVLN_DIV_CD
								, NVL(SUM( 
											CASE WHEN A.COMPLETE_DATE < '20130121' THEN (GOODS_AMOUNT - CSF_FEE - PO_FEE - MART_FEE - DECODE(A.PAVLN_DIV_CD, '02', 0, FEE_AMOUNT) - AMOUNT_COUPON_BIZ - RET_AMOUNT - DEFICIT_AMOUNT - LATER_PRCL_PRC) + (REFUND_CARD_SETL_FEE + DEFICIT_CARD_SETL_FEE) - (REFUND_GOODS_AMT - REFUND_CSF_FEE) 
												ELSE (GOODS_AMOUNT + NVL(LATER_PRCL_SALE_PRC,0) - CSF_FEE - PO_FEE - MART_FEE - FEE_AMOUNT - AMOUNT_COUPON_BIZ - RET_AMOUNT - DEFICIT_AMOUNT - LATER_PRCL_PRC) + (REFUND_CARD_SETL_FEE + DEFICIT_CARD_SETL_FEE) - (REFUND_GOODS_AMT - REFUND_CSF_FEE)	/* SHOP_ID 변환유무 확인 */
											END 
											)
						, 0) AS TRANSF_AMT
						, NVL(SUM(LATER_PRCL_PRC), 0) AS LATER_PRCL_PRC
						, NVL(SUM(NVL(LATER_PRCL_SALE_PRC,0)), 0) AS LATER_PRCL_SALE_PRC
						, NVL(SUM(GOODS_CNT), 0) AS GOODS_CNT
						FROM ST_ADJ_GOODS A
						WHERE 1=1
						AND COMPLETE_DATE BETWEEN #adj_start_day# AND #adj_end_day# 
						/*AND SUPP_PO_REGI_PO_CD = '10024'		 TEMP */
						AND GOODS_CANCEL_YN = 'N'
						AND A.PAVLN_DIV_CD IN ('01', '02', '04', '07', '99')
						GROUP BY SUPP_PO_REGI_PO_CD, SUPP_COMP_ID, DECODE(A.PAVLN_DIV_CD, '07', '01', A.PAVLN_DIV_CD)
					)
		WHERE TRANSF_AMT <> 0 OR LATER_PRCL_PRC <> 0
    ]]>									
 	</select>	
 	
	<!-- 상품가격 인서트 -->		
	<insert id="insertsettleSuppAdjustment2_3_1" parameterClass="java.util.HashMap">		
    <![CDATA[ 	
		INSERT INTO ST_SUPP_COMP_ADJ_INFO
			( 
				  SUPP_PO_REGI_PO_CD
				, SUPP_COMP_ID
				, ADJ_YMD
				, ADJ_HMS
				, ADJ_CD
				, COMP_PO_REGI_PO_CD
				, FORWARD_AMT
				, ADJ_AMT
				, RCPT_PRC
				, SUB_AMT
				, TRANS_AMT
				, BAL_AMT
				, ADD_AMT
				, ADJ_PERIOD_YMD
				, ADJ_TREAT_STUS_CD
				, ADJ_TREAT_YMD
				, PAVLN_DIV_CD
				, LATER_PRCL_NEXT_PRC
			)
		VALUES
			(
				  #supp_po_regi_po_cd#
				, #supp_comp_cd#
				, TO_CHAR(SYSDATE,'YYYYMMDD')
				, TO_CHAR(SYSDATE,'HH24MISS')
				, '01'
				, (SELECT X.compPoRegiPoCd FROM PICMT0060 X WHERE X.REGIPOCD = #supp_po_regi_po_cd# AND X.USEYN = 'Y')
				, 0
				, #goods_amt#
				, 0
				, 0
				, 0
				, 0
				, 0
				, #adj_start_day#||#adj_end_day#
				, '001'
				, '' 
				, #pavlnDivCd#
				, 0
			)               
    ]]> 			 
	</insert> 	 	
	
	<!-- 공급업체 정산대금 SEL -->	   
	<select id="selectSettleSuppAdjustment2_4" parameterClass="java.util.HashMap" resultClass="commMap">	
	<![CDATA[ 	
		SELECT 1 AS RN
				, SUPP_PO_REGI_PO_CD
				, SUPP_COMP_CD
				, PAVLN_DIV_CD
				, NVL(TRANSF_AMT, 0) AS GOODS_AMT
				, NVL(LATER_PRCL_PRC, 0) AS LATER_PRCL_PRC
				, NVL(LATER_PRCL_SALE_PRC, 0) AS LATER_PRCL_SALE_PRC
				, NVL(GOODS_CNT, 0) AS GOODS_CNT
				FROM
					(
						SELECT 1
								, MAX(A.SUPP_PO_REGI_PO_CD) AS SUPP_PO_REGI_PO_CD
								, A.SUPP_COMP_ID AS SUPP_COMP_CD
								, DECODE(A.PAVLN_DIV_CD, '07', '01', A.PAVLN_DIV_CD) PAVLN_DIV_CD
								, NVL(SUM( 
											CASE WHEN A.COMPLETE_DATE < '20130121' THEN (GOODS_AMOUNT - CSF_FEE - PO_FEE - MART_FEE - DECODE(A.PAVLN_DIV_CD, '02', 0, FEE_AMOUNT) - AMOUNT_COUPON_BIZ - RET_AMOUNT - DEFICIT_AMOUNT - LATER_PRCL_PRC) + (REFUND_CARD_SETL_FEE + DEFICIT_CARD_SETL_FEE) - (REFUND_GOODS_AMT - REFUND_CSF_FEE) 
												ELSE (GOODS_AMOUNT + NVL(LATER_PRCL_SALE_PRC,0) - CSF_FEE - PO_FEE - MART_FEE - FEE_AMOUNT - AMOUNT_COUPON_BIZ - RET_AMOUNT - DEFICIT_AMOUNT - LATER_PRCL_PRC) + (REFUND_CARD_SETL_FEE + DEFICIT_CARD_SETL_FEE) - (REFUND_GOODS_AMT - REFUND_CSF_FEE)	/* SHOP_ID 변환유무 확인 */
											END 
											)
						, 0) AS TRANSF_AMT
						, NVL(SUM(LATER_PRCL_PRC), 0) AS LATER_PRCL_PRC
						, NVL(SUM(NVL(LATER_PRCL_SALE_PRC,0)), 0) AS LATER_PRCL_SALE_PRC
						, NVL(SUM(GOODS_CNT), 0) AS GOODS_CNT
						FROM ST_ADJ_GOODS A
						WHERE 1=1
						AND COMPLETE_DATE BETWEEN #adj_start_day# AND #adj_end_day# 
						/*AND SUPP_PO_REGI_PO_CD = '10024'		 TEMP */
						AND GOODS_CANCEL_YN = 'N'
						AND A.PAVLN_DIV_CD IN ('03', '05', '09')
						GROUP BY SUPP_COMP_ID, DECODE(A.PAVLN_DIV_CD, '07', '01', A.PAVLN_DIV_CD)
					)
		WHERE TRANSF_AMT <> 0 OR LATER_PRCL_PRC <> 0
    ]]>									
 	</select>	
 				
	<!-- 후납소포료 맥스 시퀀스 GET -->
	<select id="selectSettleSuppAdjustment2_3_2" parameterClass="java.util.HashMap" resultClass="String">
	<![CDATA[
		SELECT MAX(ADJ_YMD||ADJ_HMS) AS ADJ_DATE_MAX
		FROM   ST_SUPP_COMP_ADJ_INFO
		WHERE  SUPP_PO_REGI_PO_CD = #supp_po_regi_po_cd#
		AND    SUPP_COMP_ID = #supp_comp_cd#
		AND    ADJ_CD = '13'
	]]>	
	</select> 	
	
	<!-- 후납소포료가 있을 경우 새로운 ROW 인서트를 위해 초기 정리 ROW를 002로 변경  -->
	<update id="updateSettleSuppAdjustment2_3_3U" parameterClass="java.util.HashMap">	
    <![CDATA[
		UPDATE ST_SUPP_COMP_ADJ_INFO SET 
			   ADJ_TREAT_STUS_CD = '002'
			 , ADJ_TREAT_YMD = TO_CHAR(SYSDATE,'YYYYMMDD')
		WHERE  SUPP_PO_REGI_PO_CD = #supp_po_regi_po_cd#
		AND    SUPP_COMP_ID = #supp_comp_cd#
		AND    ADJ_CD = '13'
		AND    ADJ_TREAT_STUS_CD = '001'				
    ]]>			
	</update> 	
	
	<!-- 후납소포료가 있을 경우 새로운 ROW 인서트 -->		
	<insert id="insertSettleSuppAdjustment2_3_3" parameterClass="java.util.HashMap">		
    <![CDATA[ 	
		INSERT INTO  ST_SUPP_COMP_ADJ_INFO
			( 
				 SUPP_PO_REGI_PO_CD
				,SUPP_COMP_ID
				,ADJ_YMD
				,ADJ_HMS
				,ADJ_CD
				,COMP_PO_REGI_PO_CD
				,FORWARD_AMT
				,ADJ_AMT
				,RCPT_PRC
				,SUB_AMT
				,TRANS_AMT
				,BAL_AMT   
				,ADD_AMT
				,ADJ_PERIOD_YMD
				,ADJ_TREAT_STUS_CD
				,ADJ_TREAT_YMD
				,PAVLN_DIV_CD
			)
		VALUES
			( 
				  #supp_po_regi_po_cd#
				, #supp_comp_cd#
				, TO_CHAR(SYSDATE,'YYYYMMDD')
				, TO_CHAR(SYSDATE,'HH24MISS')
				, '13'
				, (SELECT X.compPoRegiPoCd FROM PICMT0060 X WHERE X.REGIPOCD = #supp_po_regi_po_cd# AND X.USEYN = 'Y')
				, NVL(
			            (
			            SELECT BAL_AMT   /*잔액 */
			                FROM ST_SUPP_COMP_ADJ_INFO Y 
						WHERE Y.SUPP_PO_REGI_PO_CD = #supp_po_regi_po_cd# 
								AND Y.SUPP_COMP_ID = #supp_comp_cd#
								AND Y.ADJ_YMD = SUBSTR(#adj_date_max#, 1, 8) 
								AND Y.ADJ_HMS = SUBSTR(#adj_date_max#, 9, 6) 
								AND Y.ADJ_CD = '13'
			            ), 0) 
				, #later_prcl_prc#
				, 0
				, 0
				, 0
				, 0
				, 0
				, #adj_start_day#||#adj_end_day#
				, '001'
				, '' 
				, #pavlnDivCd#
			)           
    ]]> 			 
	</insert> 	
		 	
	<!-- 과거 상품대금의 이월금액을 가져와서 현재정산대상의 forward_amt 처리. 과거는 003 처리 -->	   
	<select id="selectSettleSuppAdjustment3_3" parameterClass="java.util.HashMap" resultClass="commMap">	
	<![CDATA[ 	
		SELECT SUPP_PO_REGI_PO_CD
			 , SUPP_COMP_ID
		FROM   ST_SUPP_COMP_ADJ_INFO
		WHERE  ADJ_TREAT_STUS_CD = '001' 
		AND    ADJ_CD = '01'
		AND    PAVLN_DIV_CD IN ('01', '02', '04', '07', '99')
		GROUP BY SUPP_PO_REGI_PO_CD,SUPP_COMP_ID
		HAVING COUNT(1) > 1	
    ]]>									
 	</select>
 	
	<!-- 상품대금 마이너스 조정 -->	    	
	<select id="selectSettleSuppAdjustment3_3_1" parameterClass="java.util.HashMap" resultClass="String">
	<![CDATA[
		SELECT FORWARD_AMT + ADJ_AMT - nvl(LATER_PRCL_NEXT_PRC,0) AS ADJ_AMT
		FROM   ST_SUPP_COMP_ADJ_INFO
		WHERE  ADJ_CD = '01' 
		AND    ADJ_TREAT_STUS_CD = '001' 
		AND    PAVLN_DIV_CD IN ('01', '02', '04', '07', '99')
		AND    SUPP_PO_REGI_PO_CD = #supp_po_regi_po_cd# 
		AND    SUPP_COMP_ID = #supp_comp_cd#
		AND    ADJ_YMD < TO_CHAR(SYSDATE,'YYYYMMDD') 					
	]]>	
	</select> 	 	
			 	
	<!-- 상품대금 마이너스 조정  -->
	<update id="updateSettleSuppAdjustment3_3_2" parameterClass="java.util.HashMap">	
    <![CDATA[
		UPDATE ST_SUPP_COMP_ADJ_INFO SET 
			ADJ_TREAT_STUS_CD = '003'
			, ADJ_TREAT_YMD = TO_CHAR(SYSDATE,'YYYYMMDD') 
		WHERE ADJ_CD = '01' 
		AND ADJ_TREAT_STUS_CD = '001' 
		AND PAVLN_DIV_CD IN ('01', '02', '04', '07', '99')
		AND SUPP_PO_REGI_PO_CD = #supp_po_regi_po_cd# 
		AND SUPP_COMP_ID = #supp_comp_cd#
		AND ADJ_YMD < TO_CHAR(SYSDATE,'YYYYMMDD')		
    ]]>			
	</update> 	
	
	<!-- 상품대금 마이너스 조정  -->
	<update id="updateSettleSuppAdjustment3_3_3" parameterClass="java.util.HashMap">	
    <![CDATA[
		UPDATE ST_SUPP_COMP_ADJ_INFO SET 
			   FORWARD_AMT = #adj_amt_data3#
			 , ADJ_TREAT_YMD = TO_CHAR(SYSDATE,'YYYYMMDD')
		WHERE  ADJ_CD = '01' 
		AND    ADJ_TREAT_STUS_CD = '001' 
		AND    PAVLN_DIV_CD IN ('01', '02', '04', '07', '99')
		AND    SUPP_PO_REGI_PO_CD = #supp_po_regi_po_cd# 
		AND    SUPP_COMP_ID = #supp_comp_cd#
		AND    ADJ_YMD = TO_CHAR(SYSDATE,'YYYYMMDD')	
    ]]>			
	</update> 		
	
	<!-- 후납데이타 조회 -->	    	
	<select id="selectSettleSuppAdjustment3_1" parameterClass="java.util.HashMap" resultClass="commMap">
	<![CDATA[
		SELECT 1
			, REGI_PO_CD AS SUPP_PO_REGI_PO_CD
			, SUPP_COMP_CD
			, RCPT_PRC
			, ADD_RDCT_PRC
			, 
			( 
				SELECT COUNT(1) AS SUPP_COMP_ADJ_CNT 
				FROM   ST_SUPP_COMP_ADJ_INFO B
				WHERE  ADJ_TREAT_STUS_CD = '001' 
				AND    ADJ_CD = '13'
				AND    PAVLN_DIV_CD IN ('01', '02', '04', '07', '99')
				AND    B.SUPP_PO_REGI_PO_CD = A.REGI_PO_CD
				AND    B.SUPP_COMP_ID = A.SUPP_COMP_CD
			) AS SUPP_COMP_ADJ_CNT 
		FROM
			(
				SELECT REGI_PO_CD
					 , SUPP_COMP_CD,SUM(RCPT_PRC) AS RCPT_PRC, SUM(ADD_RDCT_PRC) AS ADD_RDCT_PRC
				FROM   SUPP_COMP_LATER_PAY
				WHERE  RECEV_YM = SUBSTR(#adj_end_day#, 1, 6)
				GROUP BY REGI_PO_CD, SUPP_COMP_CD
				HAVING SUM(RCPT_PRC) > 0
			) A	 								
	]]>	
	</select> 	
	

	<!-- 이월금 가져오기 -->	    	
	<select id="selectSettleSuppAdjustment3_1_2" parameterClass="java.util.HashMap" resultClass="String">
	<![CDATA[
		SELECT NVL(BAL_AMT, 0) AS FORWARD_AMT
		FROM   ST_SUPP_COMP_ADJ_INFO Y 
		WHERE  Y.SUPP_COMP_ID = #supp_comp_cd#
		AND    Y.PAVLN_DIV_CD IN ('01', '02', '04', '07', '99')
		AND    Y.ADJ_YMD = SUBSTR(#adj_date_max3_1_1#, 1, 8) 
		AND    Y.ADJ_HMS = SUBSTR(#adj_date_max3_1_1#, 9, 6) 
		AND    Y.ADJ_CD = '13'					
	]]>	
	</select> 		
	
	<!-- 후납소포료가 있을 경우 새로운 ROW 인서트 -->		
	<insert id="insertSettleSuppAdjustment3_1_3" parameterClass="java.util.HashMap">		
    <![CDATA[ 	
        INSERT INTO ST_SUPP_COMP_ADJ_INFO
            ( 
                 SUPP_PO_REGI_PO_CD
                ,SUPP_COMP_ID
                ,ADJ_YMD
                ,ADJ_HMS
                ,ADJ_CD
                ,COMP_PO_REGI_PO_CD
                ,FORWARD_AMT
                ,ADJ_AMT
                ,RCPT_PRC
                ,SUB_AMT
                ,TRANS_AMT
                ,BAL_AMT   
                ,ADD_AMT
                ,ADJ_PERIOD_YMD
                ,ADJ_TREAT_STUS_CD
                ,ADJ_TREAT_YMD
                ,PAVLN_DIV_CD
            )
        VALUES
            ( 
                  #supp_po_regi_po_cd#
                , #supp_comp_cd#
                , TO_CHAR(SYSDATE,'YYYYMMDD')
                , TO_CHAR(SYSDATE,'HH24MISS')
                , '13'
				, (SELECT compPoRegiPoCd FROM PICMT0060 WHERE REGIPOCD = #supp_po_regi_po_cd# AND USEYN = 'Y' AND ROWNUM <= 1)
				, #forward_amt#
				, 0
				, #rcpt_prc#
				, 0
				, 0
				, 0
				, 0
				, #adj_start_day#||#adj_end_day#
				, '001'
				, '' 
				, '01'
			)          
    ]]> 			 
	</insert> 
	
	<!-- 후납소포료 update  -->
	<update id="updateSettleSuppAdjustment3_1_4" parameterClass="java.util.HashMap">	
    <![CDATA[
		UPDATE ST_SUPP_COMP_ADJ_INFO SET 
			   RCPT_PRC = #rcpt_prc#
			 , LATER_PRCL_NEXT_PRC = #addRdctPrc# 
		WHERE  ADJ_TREAT_STUS_CD = '001' 
		AND    SUPP_COMP_ID = #supp_comp_cd# 
		AND    PAVLN_DIV_CD IN ('01', '02', '04', '07', '99')
		AND    ADJ_CD = '13' 
		AND    SUPP_PO_REGI_PO_CD =  #supp_po_regi_po_cd# 
    ]]>			
	</update> 
	
	<!-- 후납데이타 대사 -->	    	
	<select id="selectSettleSuppAdjustment3_2" parameterClass="java.util.HashMap" resultClass="commMap">
	<![CDATA[
		SELECT SUPP_PO_REGI_PO_CD
			 , SUPP_COMP_ID AS SUPP_COMP_CD
		  	 , (RCPT_PRC - FORWARD_AMT - ADJ_AMT + nvl(LATER_PRCL_NEXT_PRC,0)) AS CALC_AMT
			 , (FORWARD_AMT + ADJ_AMT - nvl(LATER_PRCL_NEXT_PRC,0)) AS MAX_SUB_POSSIBLE_AMT
		FROM   ST_SUPP_COMP_ADJ_INFO
		WHERE  ADJ_TREAT_STUS_CD = '001' 	
		AND    PAVLN_DIV_CD IN ('01', '02', '04', '07', '99')
		AND    (RCPT_PRC - FORWARD_AMT - ADJ_AMT + NVL(LATER_PRCL_NEXT_PRC,0)) > 0
		AND    ADJ_CD = '13'			
				
	]]>	
	</select> 	
	
	<!-- 후납데이타 대사 -->	    	
	<select id="selectSettleSuppAdjustment3_2_1" parameterClass="java.util.HashMap" resultClass="String">
	<![CDATA[
		SELECT SUM(ADJ_AMT) AS ADJ_AMT
		FROM
			   (
				SELECT FORWARD_AMT + ADJ_AMT - nvl(LATER_PRCL_NEXT_PRC,0) AS ADJ_AMT
				FROM   ST_SUPP_COMP_ADJ_INFO
				WHERE  ADJ_CD = '01' 
				AND    PAVLN_DIV_CD IN ('01', '02', '04', '07', '99')
				AND    ADJ_TREAT_STUS_CD = '001' 
				AND    SUPP_PO_REGI_PO_CD = #supp_po_regi_po_cd# 
				AND    SUPP_COMP_ID = #supp_comp_cd#
				UNION ALL
				SELECT 0 AS ADJ_AMT
				FROM   DUAL
				)            										
	]]>	
	</select> 		

	<!-- 후납소포료 update  -->
	<update id="updateSettleSuppAdjustment3_2_2" parameterClass="java.util.HashMap">	
    <![CDATA[
		UPDATE ST_SUPP_COMP_ADJ_INFO SET 
			   SUB_AMT = #v_sub_amt# * -1
		WHERE  ADJ_TREAT_STUS_CD = '001' 
		AND    PAVLN_DIV_CD IN ('01', '02', '04', '07', '99')
		AND    SUPP_PO_REGI_PO_CD = #supp_po_regi_po_cd#  
		AND    SUPP_COMP_ID = #supp_comp_cd# 
		AND    ADJ_CD = '01'        				
    ]]>			
	</update> 

	<!-- 후납소포료 update  -->
	<update id="updateSettleSuppAdjustment3_2_3" parameterClass="java.util.HashMap">	
    <![CDATA[
		UPDATE ST_SUPP_COMP_ADJ_INFO SET 
			   SUB_AMT = #v_sub_amt#
			 , ADD_AMT = #v_add_amt#
		WHERE  ADJ_TREAT_STUS_CD = '001' 
		AND    PAVLN_DIV_CD IN ('01', '02', '04', '07', '99')
		AND    SUPP_PO_REGI_PO_CD = #supp_po_regi_po_cd#  
		AND    SUPP_COMP_ID = #supp_comp_cd# 
		AND    ADJ_CD = '13'				
				   				
    ]]>
	</update> 	
	
	<!-- 잔액계산 update  -->
	<update id="updateSettleSuppAdjustment3_4_1" parameterClass="java.util.HashMap">	
    <![CDATA[
	    UPDATE ST_SUPP_COMP_ADJ_INFO SET 
	    	   TRANS_AMT = (CASE WHEN (RCPT_PRC - ADJ_AMT - FORWARD_AMT - SUB_AMT) < 0 THEN RCPT_PRC 
	                             ELSE  ADJ_AMT + FORWARD_AMT + SUB_AMT - nvl(LATER_PRCL_NEXT_PRC,0)
	                        END)
		WHERE  ADJ_TREAT_STUS_CD = '001'
		AND    PAVLN_DIV_CD IN ('01', '02', '04', '07', '99')
		AND    ADJ_CD = '13'
    ]]>			
	</update> 	
	
	<!-- 잔액계산 update  -->
	<update id="updateSettleSuppAdjustment3_4_2" parameterClass="java.util.HashMap">	
    <![CDATA[
		UPDATE ST_SUPP_COMP_ADJ_INFO SET 
			   BAL_AMT = (CASE WHEN (FORWARD_AMT + ADJ_AMT + SUB_AMT - TRANS_AMT - nvl(LATER_PRCL_NEXT_PRC,0) ) > 0 THEN (FORWARD_AMT + ADJ_AMT + SUB_AMT - TRANS_AMT - nvl(LATER_PRCL_NEXT_PRC,0))  
		                       ELSE 0 
						  END)
		WHERE  ADJ_TREAT_STUS_CD = '001'
		AND    PAVLN_DIV_CD IN ('01', '02', '04', '07', '99')
		AND    ADJ_CD = '13'				
    ]]>			
	</update> 	
	
	<!-- 잔액계산 update  -->
	<update id="updateSettleSuppAdjustment3_4_3" parameterClass="java.util.HashMap">	
    <![CDATA[
		UPDATE ST_SUPP_COMP_ADJ_INFO SET 
			   TRANS_AMT = FORWARD_AMT + ADJ_AMT + SUB_AMT - nvl(LATER_PRCL_NEXT_PRC,0)
		WHERE  ADJ_TREAT_STUS_CD = '001' 
		AND    ADJ_CD = '01' 
		AND    PAVLN_DIV_CD IN ('01','02','03','04','05','07','09','99')
		AND    (FORWARD_AMT + ADJ_AMT + SUB_AMT - nvl(LATER_PRCL_NEXT_PRC,0) ) > 0
    ]]>			
	</update> 	
	
	<!-- 잔액계산 update  -->
	<update id="updateSettleSuppAdjustment3_4_4" parameterClass="java.util.HashMap">	
    <![CDATA[
		UPDATE ST_SUPP_COMP_ADJ_INFO SET 
			   BAL_AMT = FORWARD_AMT + ADJ_AMT + SUB_AMT - nvl(LATER_PRCL_NEXT_PRC,0)
		WHERE  ADJ_TREAT_STUS_CD = '001' 
		AND    ADJ_CD = '01' 
		AND    PAVLN_DIV_CD IN ('01','02','03','04','05','07','09','99')
		AND    (FORWARD_AMT + ADJ_AMT + SUB_AMT - nvl(LATER_PRCL_NEXT_PRC,0) ) < 0
		
    ]]>			
	</update> 
	
	<select id="selectaGetMaxSuppPoregiTrfAmtSeq" parameterClass="java.util.HashMap" resultClass="int">
		SELECT NVL(MAX(TRANSF_DATA_SEQ),0) AS TRANSF_DATA_SEQ
		FROM   ST_SUPP_POREGI_TRF_AMT
		WHERE  TRANSF_REQ_YMD=TO_CHAR(SYSDATE,'YYYYMMDD')		
	</select>			
	
	<!-- 후납이체금액생성 -->	    	
	<select id="selectSettleSuppAdjustment3_5" parameterClass="java.util.HashMap" resultClass="commMap">
	<![CDATA[
		SELECT A.SUPP_PO_REGI_PO_CD
			 , SUM(A.TRANS_AMT) AS TRANS_AMT
		FROM   ST_SUPP_COMP_ADJ_INFO A
		WHERE  A.ADJ_TREAT_STUS_CD = '001' 
		AND    A.TRANS_AMT > 0
		AND    A.ADJ_CD = '13'
		AND    A.PAVLN_DIV_CD IN ('01', '02', '04', '07', '99')
		GROUP BY A.SUPP_PO_REGI_PO_CD  							
	]]>	
	</select> 			
	
	<!-- 후납소포료 공급국 이체 -->		
	<insert id="insertSettleSuppAdjustment3_5_1" parameterClass="java.util.HashMap">		
    <![CDATA[ 		
		INSERT INTO ST_SUPP_POREGI_TRF_AMT
			(
				  SUPP_PO_REGI_PO_CD
				, TRANSF_REQ_YMD
				, TRANSF_DATA_SEQ
				, SUPP_PO_ACC_SEED_NO
				, TRANSF_AMT
				, TRANSF_DATA_DIV_CD
				, TRANSF_DATA_FRWD_STUS_CD
				, TRANSF_DATA_FRWD_YMD
				, STRT_ADJ_PERIOD_YMD
				, END_ADJ_PERIOD_YMD
				, LAST_REG_PRSN_ID
				, LAST_REG_DATE
				, CLOSE_YN
				, CLOSE_YMD
				, GOODS_CNT
				, SUPP_COMP_CD
			)
		VALUES
			(
				  #supp_po_regi_po_cd#
				, TO_CHAR(SYSDATE,'YYYYMMDD')
				, #v_transfFileSeq#
				, ( SELECT ACC_SEED_NO FROM ST_POST_ACCNO WHERE PO_REGI_PO_CD=#supp_po_regi_po_cd# AND ACC_NO_DIV_CD='01' ) /* 후납소포대금 및 반품환불계좌 */
				, #trans_amt#
				, '13'		/*후납소포료*/
				, '01'		
				, ''
				, #adj_start_day#
				, #adj_end_day#
				, 'bsmusr'
				, SYSDATE
				, 'N'
				, ''
				, 0
				, ''
			)		  
	]]>	
	</insert> 	
	
	<!-- 후납소포료 update  -->
	<update id="updateSettleSuppAdjustment3_5_2" parameterClass="java.util.HashMap">	
    <![CDATA[
		UPDATE ST_SUPP_COMP_ADJ_INFO SET 
			   ADJ_TREAT_STUS_CD = DECODE(BAL_AMT,0,'003','001')
			 , ADJ_TREAT_YMD = TO_CHAR(SYSDATE,'YYYYMMDD')
		WHERE  ADJ_TREAT_STUS_CD = '001' 
		AND    SUPP_PO_REGI_PO_CD = #supp_po_regi_po_cd# 
		AND    PAVLN_DIV_CD IN ('01', '02', '04', '07', '99')
		AND    ADJ_CD = '13'	
    ]]>			
	</update> 	
	
	<!-- 후납소포료 003 update  -->
	<update id="updateSettleSuppAdjustment3_6" parameterClass="java.util.HashMap">	
    <![CDATA[
		UPDATE ST_SUPP_COMP_ADJ_INFO SET 
			   ADJ_TREAT_STUS_CD = '003'
			 , ADJ_TREAT_YMD = TO_CHAR(SYSDATE,'YYYYMMDD')
		WHERE  ADJ_TREAT_STUS_CD = '001'
		AND    PAVLN_DIV_CD IN ('01', '02', '04', '07', '99')
		AND    ADJ_CD = '13'
		AND    BAL_AMT = 0 
		AND    TRANS_AMT = 0    
    ]]>			
	</update> 		
	
	<!-- 공급업체 상품대금 -->	    	
	<select id="selectSettleSuppAdjustment3_7" parameterClass="java.util.HashMap" resultClass="commMap">
	<![CDATA[
		SELECT A.SUPP_PO_REGI_PO_CD
			 , A.SUPP_COMP_ID AS SUPP_COMP_CD
			 , A.TRANS_AMT
			 , NVL(A.PAVLN_DIV_CD,'') AS PAVLN_DIV_CD
		FROM   ST_SUPP_COMP_ADJ_INFO A
		WHERE  A.ADJ_TREAT_STUS_CD = '001' 
		AND    A.PAVLN_DIV_CD IN ('01','02','03','04','05','07','09','99')
		AND    A.TRANS_AMT > 0
		AND    A.ADJ_CD = '01' 							
	]]>	
	</select> 		
	
	<select id="selectStAdjRemitInfoCnt" parameterClass="java.util.HashMap" resultClass="int">
    <![CDATA[
		SELECT COUNT(*) FROM ST_ADJ_REMIT_INFO
		WHERE  ADJ_START_DAY = TO_CHAR(TO_DATE(#adj_start_day#,'YYYYMMDD'),'YYYY/MM/DD')
		AND    ADJ_END_DAY = TO_CHAR(TO_DATE(#adj_end_day#,'YYYYMMDD'),'YYYY/MM/DD')
		AND    SUPP_COMP_ID = #supp_comp_cd#
		AND    PAVLN_DIV_CD = #pavlnDivCd#
    ]]>			
	</select>     
	
	<insert id="insertStAdjRemitInfo" parameterClass="java.util.HashMap">		
    <![CDATA[ 		
		INSERT INTO ST_ADJ_REMIT_INFO
		 	(
		 	ADJ_START_DAY,
			ADJ_END_DAY,
			ADJ_CHASU,
			SUPP_COMP_ID,
			BANK_CD,
			ACCOUNT_NO,
			DEPOSIT,
			REMIT_AMT,
			REMIT_CMSN_AMT,
			REMIT_PLAN_DTIME,
			REMIT_STUS_CD,
			PAVLN_DIV_CD 
			)
		VALUES
			(
			TO_CHAR(TO_DATE(#adj_start_day#,'YYYYMMDD'),'YYYY/MM/DD'),
			TO_CHAR(TO_DATE(#adj_end_day#,'YYYYMMDD'),'YYYY/MM/DD'),
			NVL((
			SELECT LPAD(RNUM,2,'0') 
			FROM 
	            (
	             SELECT    B.YYYY||A.MON AS YYYYMM
			             , RNUM
			             , LPAD(CHK,2,'0') CHK
			             , CASE WHEN CHK = 1 THEN B.YYYY||'/'||A.MON||'/'||'01' WHEN CHK = 2 THEN B.YYYY||'/'||A.MON||'/'||'11'WHEN CHK = 3 THEN B.YYYY||'/'||A.MON||'/'||'21'
			               END START_DAY
			             , CASE WHEN CHK = 1 THEN B.YYYY||'/'||A.MON||'/'||'10' WHEN CHK = 2 THEN B.YYYY||'/'||A.MON||'/'||'20' WHEN CHK = 3 THEN TO_CHAR(LAST_DAY(TO_DATE(B.YYYY||A.MON||'01','YYYYMMDD')),'YYYY/MM/DD')
			               END END_DAY
	          	 FROM (
	                   SELECT  LEVEL RNUM
		                     , LPAD(CEIL(LEVEL / 3),2,'0') MON 
		                     , DECODE(MOD(LEVEL, 3),0,3,MOD(LEVEL,3)) CHK 
	                   FROM DUAL A
	                   CONNECT BY LEVEL <= 36
	                  ) A, ( SELECT 2000+ROWNUM YYYY FROM DUAL CONNECT BY LEVEL <= 30  ) B /*30년까지 조회*/
	         	 WHERE 1=1
	       		) 
		    WHERE START_DAY = TO_CHAR(TO_DATE(#adj_start_day#,'YYYYMMDD'),'YYYY/MM/DD') AND END_DAY = TO_CHAR(TO_DATE(#adj_end_day#,'YYYYMMDD'),'YYYY/MM/DD')
			),0),
			#supp_comp_cd#,
			(SELECT X.ADJ_BANK_CD FROM CO_SUPP_COMP_MAST X WHERE X.SUPP_COMP_ID = #supp_comp_cd# and NVL(NATION_CD,'KO') IN ('KO', 'KOR') ),	/*공급업체 정산은행코드*/
			(SELECT X.ADJ_ACC_NO FROM CO_SUPP_COMP_MAST X WHERE X.SUPP_COMP_ID = #supp_comp_cd# and NVL(NATION_CD,'KO') IN ('KO', 'KOR') ),	/*공급업체 정산계좌번호*/
			(SELECT X.ADJ_DPSTR FROM CO_SUPP_COMP_MAST X WHERE X.SUPP_COMP_ID = #supp_comp_cd# and NVL(NATION_CD,'KO') IN ('KO', 'KOR') ),	/*공급업체 정산예금주*/
			#trans_amt#,
			CASE 
				WHEN #pavlnDivCd# = '03' THEN 0
				ELSE  
					CASE WHEN (SELECT X.ADJ_BANK_CD FROM CO_SUPP_COMP_MAST X WHERE X.SUPP_COMP_ID = #supp_comp_cd# and NVL(NATION_CD,'KO') IN ('KO', 'KOR') ) = '071' THEN 150
				  		 WHEN (SELECT X.ADJ_BANK_CD FROM CO_SUPP_COMP_MAST X WHERE X.SUPP_COMP_ID = #supp_comp_cd# and NVL(NATION_CD,'KO') IN ('KO', 'KOR') ) <>  '071' AND #trans_amt# > 1000000 THEN 650
					ELSE 450
					END  
			END,
			SYSDATE + 3,
			'01',
			#pavlnDivCd#
			)
	]]>	
	</insert> 	
	
	<!-- 공급업체 대금 ST_SUPP_POREGI_TRF_AMT 인서트 -->		
	<insert id="insertSettleSuppAdjustment3_7_1" parameterClass="java.util.HashMap">		
    <![CDATA[ 		
		INSERT INTO ST_SUPP_POREGI_TRF_AMT
			(
				  SUPP_PO_REGI_PO_CD
				, TRANSF_REQ_YMD
				, TRANSF_DATA_SEQ
				, SUPP_PO_ACC_SEED_NO
				, TRANSF_AMT
				, TRANSF_DATA_DIV_CD
				, TRANSF_DATA_FRWD_STUS_CD
				, TRANSF_DATA_FRWD_YMD
				, STRT_ADJ_PERIOD_YMD
				, END_ADJ_PERIOD_YMD
				, LAST_REG_PRSN_ID
				, LAST_REG_DATE
				, CLOSE_YN
				, CLOSE_YMD
				, GOODS_CNT
				, SUPP_COMP_CD
			)
		VALUES
			(
				  #supp_po_regi_po_cd#
				, TO_CHAR(SYSDATE,'YYYYMMDD')
				, #v_transfFileSeq#
				, (SELECT X.ADJ_ACC_NO FROM CO_SUPP_COMP_MAST X WHERE X.SUPP_COMP_ID = #supp_comp_cd# and NVL(NATION_CD,'KO') IN ('KO', 'KOR') )	/*공급업체 정산계좌*/
				, #trans_amt#
				, '01'		/* 상품대금 */
				, '01'
				, ''
                , #adj_start_day#
                , #adj_end_day#
				, 'bsmusr'
				, SYSDATE
				,'N'
				, ''
				, 0
				, #supp_comp_cd#
			)   	  
	]]>	
	</insert> 	
	
	<!-- 상품대금 003 update  -->
	<update id="updateSettleSuppAdjustment3_7_2" parameterClass="java.util.HashMap">	
    <![CDATA[
		UPDATE ST_SUPP_COMP_ADJ_INFO SET 
			   ADJ_TREAT_STUS_CD = '003'
			 , ADJ_TREAT_YMD = TO_CHAR(SYSDATE,'YYYYMMDD')
		WHERE  ADJ_TREAT_STUS_CD = '001' 
		AND    SUPP_COMP_ID = #supp_comp_cd#
		AND    ADJ_CD = '01'        
    ]]>			
	</update> 	
	
	<!-- 공급정산 상품대금 003 update  -->
	<update id="updateSettleSuppAdjustment3_8" parameterClass="java.util.HashMap">	
    <![CDATA[
		UPDATE ST_SUPP_COMP_ADJ_INFO SET 
			   ADJ_TREAT_STUS_CD = '003'
			 , ADJ_TREAT_YMD = TO_CHAR(SYSDATE,'YYYYMMDD')
		WHERE  ADJ_TREAT_STUS_CD = '001' 
		AND    PAVLN_DIV_CD IN ('01', '02', '03', '04', '05', '07', '09', '99')
		AND    ADJ_CD = '01' AND (FORWARD_AMT + ADJ_AMT + SUB_AMT) = 0 
		AND    TRANS_AMT = 0	      
    ]]>			
	</update> 		
	
	<!-- 창구의 생활마트, 전통시장 현금-->
	<select id="selectSettleSuppAdjustment3_9_1" parameterClass="java.util.HashMap" resultClass="commMap">
	<![CDATA[
		SELECT SUM(NVL(AMOUNT_CASH,0)) AS AMOUNT_CASH
        FROM   ST_ADJ_GOODS
        WHERE  COMPLETE_DATE BETWEEN #adj_start_day# AND #adj_end_day#
        AND    PAVLN_DIV_CD IN ('03','05','09')
        AND    GOODS_CANCEL_YN = 'N'
		AND    ORDER_MDA_DIV_CD = '05'				
	]]>	
	</select> 	
	
	<!-- 창구의 생활마트, 전통시장 카드-->
	<select id="selectSettleSuppAdjustment3_9_2" parameterClass="java.util.HashMap" resultClass="commMap">
	<![CDATA[
		SELECT SUM(NVL(AMOUNT_CARD_POSTNET,0) - NVL(FEE_AMOUNT,0)) AS AMOUNT_CARD
        FROM   ST_ADJ_GOODS
        WHERE  COMPLETE_DATE BETWEEN #adj_start_day# AND #adj_end_day#
        AND    PAVLN_DIV_CD IN ('03','05','09')
        AND    GOODS_CANCEL_YN = 'N'
		AND    ORDER_MDA_DIV_CD = '05'				
	]]>	
	</select> 	
	
	<!-- 수정 정산후 망취소 금액으로 송금 세팅  22 -->
	<!-- 추가 -->
	<select id="selectSettleSuppAdjustment3_9_4" parameterClass="java.util.HashMap" resultClass="commMap">
	<![CDATA[
		SELECT SUM(NVL(ADJAFTER_NETCANCEL_REVAMT,0) - NVL(ADJAFTER_NETCANCEL_REVFEE,0)) AS AMOUNT_NETCANCEL
        FROM   ST_ADJ_GOODS
        WHERE  COMPLETE_DATE BETWEEN #adj_start_day# AND #adj_end_day#
        AND    GOODS_CANCEL_YN = 'N'
        AND    NVL(ADJAFTER_NETCANCEL_REVAMT,0) > 0
	]]>	
	</select> 	
	
	<select id="selectSettleSuppAdjustment3_9_5" parameterClass="java.util.HashMap" resultClass="commMap">
	<![CDATA[
		SELECT SUM(NVL(KAKAO_WICKET_SETL_AMT,0) - NVL(FEE_AMOUNT,0)) AS AMOUNT_KAKAO
        FROM   ST_ADJ_GOODS
        WHERE  COMPLETE_DATE BETWEEN #adj_start_day# AND #adj_end_day#
        AND    PAVLN_DIV_CD IN ('03','05','09')
        AND    GOODS_CANCEL_YN = 'N'
		AND    ORDER_MDA_DIV_CD = '05'				
	]]>	
	</select> 	
	
	<insert id="insertSettleSuppAdjustment3_9_3" parameterClass="java.util.HashMap">		
    <![CDATA[ 		
		INSERT INTO ST_SUPP_POREGI_TRF_AMT
			(
				  SUPP_PO_REGI_PO_CD
	            , TRANSF_REQ_YMD
		        , TRANSF_DATA_SEQ
		        , SUPP_PO_ACC_SEED_NO
		        , TRANSF_AMT
		        , TRANSF_RSLT_PFNC_CD
		        , TRANSF_RSLT_CONT
		        , TRANSF_DATA_DIV_CD
		        , TRANSF_DATA_FRWD_STUS_CD
		        , TRANSF_DATA_FRWD_YMD
		        , STRT_ADJ_PERIOD_YMD
		        , END_ADJ_PERIOD_YMD
		        , LAST_REG_PRSN_ID
		        , LAST_REG_DATE
		        , CLOSE_YN
		        , CLOSE_YMD
		        , GOODS_CNT
		        , SUPP_COMP_CD
			)
		VALUES
			(
				  '99000'
	            , TO_CHAR(SYSDATE,'YYYYMMDD')
	            , #v_transfFileSeq# 
	            , #posaAccNo#
	            , #trans_amt#
	            , NULL
	            , NULL
	            , #transfDataDivCd#
	            , '01'
	            , ''
	            , #adj_start_day#
                , #adj_end_day#
	            , 'batch'
	            , SYSDATE
	            , 'N'
	            , ''
	            , 0
	            , NULL
			)   	  
	]]>	
	</insert> 	
	
	<!-- 상품대금 일치여부 체크![이중데이타 체크용] -->
	<select id="selectFinalAdjAmtCompare" parameterClass="java.util.HashMap" resultClass="int">
    <![CDATA[	
		SELECT SUM(NVL(ADJ_AMT,0)) - SUM(NVL(COMPARE_AMT,0)) AS CHKAMT
			FROM 
				(    
					SELECT '1' AS GUBUN
							, NVL(SUM( 
									CASE WHEN COMPLETE_DATE < '20130121' THEN (GOODS_AMOUNT - CSF_FEE - PO_FEE - MART_FEE - DECODE(PAVLN_DIV_CD, '02', 0, FEE_AMOUNT) - AMOUNT_COUPON_BIZ - RET_AMOUNT - DEFICIT_AMOUNT - LATER_PRCL_PRC) + (REFUND_CARD_SETL_FEE + DEFICIT_CARD_SETL_FEE) - (REFUND_GOODS_AMT - REFUND_CSF_FEE)
										ELSE (GOODS_AMOUNT + NVL(LATER_PRCL_SALE_PRC,0) - CSF_FEE - PO_FEE - MART_FEE - FEE_AMOUNT - AMOUNT_COUPON_BIZ - RET_AMOUNT - DEFICIT_AMOUNT - LATER_PRCL_PRC) + (REFUND_CARD_SETL_FEE + DEFICIT_CARD_SETL_FEE) - (REFUND_GOODS_AMT - REFUND_CSF_FEE)
									END
								),0) AS ADJ_AMT
					        , 0 COMPARE_AMT
					FROM    ST_ADJ_GOODS
					WHERE   PAVLN_DIV_CD IN ('01', '02', '03', '04', '05', '07', '09', '99')
					AND     COMPLETE_DATE >= #adj_start_day#
					AND     COMPLETE_DATE <=#adj_end_day#
					AND     GOODS_CANCEL_YN='N'
					UNION ALL
					SELECT '1' AS GUBUN
						  , 0 ADJ_AMT
						  , SUM(ADJ_AMT) AS COMPARE_AMT
					FROM    ST_SUPP_COMP_ADJ_INFO
					WHERE   ADJ_PERIOD_YMD= #adj_start_day#||#adj_end_day#
					AND     PAVLN_DIV_CD IN ('01', '02', '03', '04', '05', '07', '09', '99')
					AND     ADJ_CD ='01'
		) GROUP BY GUBUN
    ]]>			
	</select>     
	
	<!-- 공급정산 완료후 주문정산 원부 업데이트  -->
	<update id="updateDoneAdjGoods" parameterClass="java.util.HashMap">	
    <![CDATA[
		UPDATE ST_ADJ_GOODS 
		SET    ADJ_STUS_CD = '002'
			 , ADJ_TREAT_YMD = TO_CHAR(SYSDATE, 'YYYYMMDD')
		WHERE  1 = 1
		AND    COMPLETE_DATE BETWEEN #adj_start_day# AND #adj_end_day#
		AND    PAVLN_DIV_CD IN ('01', '02', '03', '04', '05', '07', '09', '99')
    ]]>			
	</update> 
	
	<!-- 공급정산 완료후 주문 원부 업데이트  -->
	<update id="updateDoneOdOrderItm" parameterClass="java.util.HashMap">	
    <![CDATA[
		UPDATE  OD_ORDER_ITM
    SET     ADJ_YN = 'Y',
			      ADJ_DATE = SYSDATE
    WHERE   1 = 1
    AND     ORDER_ITM_ID IN ( 
                           SELECT B.ORDER_ITM_ID 
                           FROM   OD_ORDER_MAST A, OD_ORDER_ITM B
                           WHERE 1 = 1
                           AND A.ORDER_ID = B.ORDER_ID
                           AND B.PAVLN_DIV_CD IN ('01', '02', '03', '04', '05', '07', '09', '99')
                           AND A.APPR_DATE BETWEEN TO_DATE(#adj_start_day#, 'YYYYMMDD') AND TO_DATE(#adj_end_day#, 'YYYYMMDD') + .99999
                           )                    
    ]]>			
	</update> 
	
	<!-- 공급정산 완료후 결제정보 업데이트 -->
	<update id="updateDoneOdOrderSetl" parameterClass="java.util.HashMap">	
    <![CDATA[
		UPDATE OD_ORDER_SETL ODS
		SET    ODS.JUNG_COMPLETE_DATE = TO_CHAR(SYSDATE, 'YYYYMMDD')
			 , ODS.JUNG_YN = 'Y'
		WHERE  ODS.USE_YN = 'Y'
		AND    ODS.SETL_APPR_DATE BETWEEN TO_DATE(#adj_start_day#, 'YYYYMMDD') AND TO_DATE(#adj_end_day#, 'YYYYMMDD') + .99999 
	    AND    EXISTS (
					SELECT 1 
					FROM (
						  SELECT A.ORDER_ID
						  FROM   OD_ORDER_MAST A, OD_ORDER_ITM B
						  WHERE A.ORDER_ID = B.ORDER_ID
						  AND    A.APPR_DATE BETWEEN TO_DATE(#adj_start_day#, 'YYYYMMDD') AND TO_DATE(#adj_end_day#, 'YYYYMMDD') + .99999 
						  AND    B.PAVLN_DIV_CD IN ('01', '02', '03', '04', '05', '07', '09', '99')
						  GROUP BY A.ORDER_ID
					) C
					WHERE C.ORDER_ID = ODS.ORDER_ID
					)			
    ]]>		
	</update> 	
	
	<!-- 공급정산 완료후 ST_HISTORY_ADJUST 업데이트 -->
	<update id="updateDoneHistoryAdjust" parameterClass="java.util.HashMap">	
    <![CDATA[
		UPDATE ST_HISTORY_ADJUST SET 
			   SUPP_ADJ_YN = 'Y' 
		WHERE  END_DAY = TO_CHAR(TO_DATE(#adj_end_day#, 'YYYYMMDD'), 'YYYY/MM/DD')              
    ]]>			
	</update> 			
	
	<!-- 대상기간의 입출금 내역 목록을 조회 -->	    	
	<select id="selectParentAccTrgt" parameterClass="java.util.HashMap" resultClass="commMap">
	<![CDATA[
       /*대상기간의 입출금 내역을 조회 */
        SELECT ACCINOUTAMTYMD AS ACC_IN_OUT_AMT_YMD
             , BALSEQ AS BAL_SEQ
             , NVL(SUM(DEPOTAMT), 0) AS DEPOT_AMT
             , NVL(SUM(OUTAMT), 0) AS OUT_AMT
        FROM
        (
                SELECT TRANSF_REQ_YMD  ACCINOUTAMTYMD , 0  BALSEQ, 0 DEPOTAMT , SUM(TRANSF_AMT) OUTAMT
                FROM ST_SUPP_POREGI_TRF_AMT /*이체내역 */
                WHERE TRANSF_REQ_YMD  BETWEEN #adj_base_work_day_sys_date# AND TO_CHAR(SYSDATE,'YYYYMMDD')
                AND TRANSF_DATA_FRWD_STUS_CD = '04'
                AND TRANSF_RSLT_PFNC_CD='01'
                GROUP BY TRANSF_REQ_YMD
            	UNION ALL
                SELECT TRANSF_REQ_YMD  ACCINOUTAMTYMD , 0  BALSEQ, 0 DEPOTAMT , SUM(TRANSF_AMT) OUTAMT
                FROM ST_SUPP_POREGI_TRF_AMT /* 이체내역 */
                WHERE TRANSF_REQ_YMD  = TO_CHAR(SYSDATE,'YYYYMMDD')
                AND TRANSF_DATA_FRWD_STUS_CD IN('01', '02')
                GROUP BY TRANSF_REQ_YMD
            	UNION ALL
                SELECT TRANSF_REQ_YMD  ACCINOUTAMTYMD , 0  BALSEQ, 0 DEPOTAMT , SUM(TRANSF_AMT) OUTAMT
                FROM ST_CTRT_FEE_TRANSF /* 이체내역 */
                WHERE TRANSF_REQ_YMD  BETWEEN #adj_base_work_day_sys_date# AND TO_CHAR(SYSDATE,'YYYYMMDD')
				AND TRANSF_DATA_FRWD_STUS_CD = '04'
				AND TRANSF_RSLT_PFNC_CD='01'
                GROUP BY TRANSF_REQ_YMD
            	UNION ALL
                SELECT TRANSF_REQ_YMD  ACCINOUTAMTYMD , 0  BALSEQ, 0 DEPOTAMT , SUM(TRANSF_AMT) OUTAMT
                FROM ST_CTRT_FEE_TRANSF /* 이체내역 */
                WHERE TRANSF_REQ_YMD  = TO_CHAR(SYSDATE,'YYYYMMDD')
                AND TRANSF_DATA_FRWD_STUS_CD IN('01', '02')
                GROUP BY TRANSF_REQ_YMD
            	UNION ALL
            	SELECT DEPOT_YMD ACCINOUTAMTYMD, 0  BALSEQ, SUM(DEPOT_AMT) DEPOTAMT, 0 OUTAMT
            	FROM ST_RECEV_PO_DEP_AMT
            	WHERE DEPOT_YMD BETWEEN #adj_base_work_day_sys_date# AND TO_CHAR(SYSDATE,'YYYYMMDD')
            	AND DEPOT_AMT > 0  /* 수기이체 제외 */
            	GROUP BY DEPOT_YMD
            	UNION ALL
              	/* 지원단센터입금액+창구카드입금액 */
              	SELECT TRANSF_REQ_YMD, 0  BALSEQ, SUM(DEPOT_AMT) DEPOTAMT, 0 OUTAMT
                FROM IFR_RECEV_PO_DEP_AMT
                WHERE TRANSF_REQ_YMD BETWEEN #adj_base_work_day_sys_date# AND TO_CHAR(SYSDATE,'YYYYMMDD')
                AND DEPOT_AMT > 0  /* 수기이체 제외 */
                AND DEPOT_CNT IN ( 89903, 99991, 99992, 99993, 99994, 99995, 99996, 99997,9997, 99998)                    
                GROUP BY TRANSF_REQ_YMD    
            	UNION ALL 
              	/*BUY_COMP_DEPOT_YMD 수정(보상금입금내역만포함) */
                SELECT BUY_COMP_DEPOT_YMD ACCINOUTAMTYMD, 0  BALSEQ, SUM(BUY_COMP_DEPOT_AMT) DEPOTAMT, 0 OUTAMT
                FROM ST_BUY_COMP_DEPOT_INFO /* 매입사별 입금액 */
                WHERE BUY_COMP_DEPOT_YMD BETWEEN #adj_base_work_day_sys_date# AND TO_CHAR(SYSDATE,'YYYYMMDD')
		        AND PAYMETHOD = '1'
		        AND BUY_COMP_CD = '998'
                GROUP BY BUY_COMP_DEPOT_YMD                    
            	UNION ALL
                SELECT ACC_IN_OUT_AMT_YMD ACCINOUTAMTYMD, ACC_IN_OUT_AMT_DD_SEQ BALSEQ, DEPOT_AMT , OUT_AMT
                FROM ST_PARNT_ACC_BAL
                WHERE ACC_IN_OUT_AMT_YMD BETWEEN #adj_base_work_day_sys_date# AND TO_CHAR(SYSDATE,'YYYYMMDD')
                AND PARNT_ACC_BAL_REV_YN='Y'  /* 보정데이타 */
        )
        GROUP BY ACCINOUTAMTYMD, BALSEQ
        ORDER BY ACCINOUTAMTYMD, BALSEQ						
	]]>	
	</select> 	
	
	<!-- 모계좌 잔액관리 대상기간의 입출금 내역을 삭제 -->
	<delete id="deleteParentAccTrgtInit" parameterClass="java.util.HashMap">
		DELETE ST_PARNT_ACC_BAL
		WHERE  ACC_IN_OUT_AMT_YMD BETWEEN #adj_base_work_day_sys_date# AND TO_CHAR(SYSDATE,'YYYYMMDD')
		AND    PARNT_ACC_BAL_REV_YN = 'N'     
	</delete>				    
	
	<!-- 모계좌 잔액관리 대상기간 전의 최종 입출금일 조회  -->
	<select id="selectParentAccLastDate" parameterClass="java.util.HashMap" resultClass="String">
	<![CDATA[
		/* 대상기간 전의 최종 입출금일 조회 */
		SELECT /*+ INDEX_DESC(PARNT_ACC_BAL ST_PARNT_ACC_BAL_PK )*/
			   NVL(MAX(ACC_IN_OUT_AMT_YMD),TO_CHAR(SYSDATE,'YYYYMMDD') ) AS MAX_AMT_YMD
		FROM   ST_PARNT_ACC_BAL
		WHERE  ACC_IN_OUT_AMT_YMD < #adj_base_work_day_sys_date#
		AND    ROWNUM=1        										
	]]>	
	</select> 		

	<!-- 모계좌 잔액관리 대상기간 전의 최종 입출금일의 최종 잔액 조회  -->		
	<select id="selectParentAccLastBalance" parameterClass="java.util.HashMap" resultClass="String">
	<![CDATA[
		/* 대상기간 전의 최종 입출금일의 최종 잔액 조회 */
		SELECT NVL(NOW_BAL,0) AS NOW_BAL  /* 처리기간 전의 최종 잔액 */
		FROM   ST_PARNT_ACC_BAL
		WHERE  ACC_IN_OUT_AMT_YMD = #adj_base_work_day_sys_date#
		AND    ACC_IN_OUT_AMT_DD_SEQ = 
									(
									SELECT MAX(ACC_IN_OUT_AMT_DD_SEQ)
									FROM   ST_PARNT_ACC_BAL
									WHERE  ACC_IN_OUT_AMT_YMD = #adj_base_work_day_sys_date#
									)	      										
	]]>	
	</select> 	
			
	<!-- 모계좌 잔액관리  대상기간의 입출금 내역 입력 -->		
	<insert id="insertParentAccTrgt" parameterClass="java.util.HashMap">		
    <![CDATA[ 		
		/* 대상기간의 입출금 내역 입력 */
		INSERT INTO ST_PARNT_ACC_BAL 
		    ( 
				  ACC_IN_OUT_AMT_YMD
				, ACC_IN_OUT_AMT_DD_SEQ
				, BEF_BAL
				, OUT_AMT
				, DEPOT_AMT
				, NOW_BAL
				, SETL_DONE_YN
				, STRT_REG_DATE
				, STRT_REG_PRSN_ID
			)
		VALUES 
			(  
				  #acc_in_out_amt_ymd#
				, 0
				, #bef_bal#
				, #out_amt#
				, #depot_amt#
				, #now_bal#
				, 'N'
				, SYSDATE
				, 'BATCH'
			)	  
	]]>	
	</insert> 				
 
	<!-- 모계좌 잔액관리  대상기간의 보정내역은 이월금액과 잔액만 수정 -->
	<update id="updateParentAccTrgt" parameterClass="java.util.HashMap">	
    <![CDATA[
		UPDATE ST_PARNT_ACC_BAL SET 
			   BEF_BAL = #bef_bal#
			 , NOW_BAL = #now_bal#
		WHERE  ACC_IN_OUT_AMT_YMD = #acc_in_out_amt_ymd#
		AND    ACC_IN_OUT_AMT_DD_SEQ = #bal_seq#         
    ]]>			
	</update> 	  
	
	<!-- 이체테이블 널값일 경우 널값 암호화처리 -->
	<update id="updateSuppPoregiTrfAmtAccNoEmpty" parameterClass="java.util.HashMap">	
    <![CDATA[
		UPDATE ST_SUPP_POREGI_TRF_AMT SET 
			   SUPP_PO_ACC_SEED_NO = 'ISUAJYIKvsN0aGLfsAjURw=='
		WHERE  TRANSF_REQ_YMD = TO_CHAR(SYSDATE,'YYYYMMDD')
		AND    SUPP_PO_ACC_SEED_NO IS NULL         
    ]]>			
	</update> 	
	
	<!-- ST_CTRT_FEE_TRANSF 널값 암호화처리 -->
	<update id="updateCtrtFeeTransfAccNoEmpty" parameterClass="java.util.HashMap">	
    <![CDATA[
		UPDATE ST_CTRT_FEE_TRANSF SET 
			   SUPP_PO_ACC_SEED_NO = 'ISUAJYIKvsN0aGLfsAjURw=='
		WHERE  TRANSF_REQ_YMD = TO_CHAR(SYSDATE,'YYYYMMDD')
		AND    SUPP_PO_ACC_SEED_NO IS NULL
    ]]>			
	</update> 	
		  		
	<!-- 암호화된 계좌번호 14자리 공백처리를 위해서 당일 이체대상 목록 조회 -->	    	
	<select id="selectThisSuppTransf" parameterClass="java.util.HashMap" resultClass="commMap">
	<![CDATA[
		SELECT  SUPP_PO_REGI_PO_CD
			  , TRANSF_REQ_YMD
			  , TRANSF_DATA_SEQ
			  , SUPP_PO_ACC_SEED_NO
		FROM    ST_SUPP_POREGI_TRF_AMT
		WHERE   TRANSF_REQ_YMD = TO_CHAR(SYSDATE,'YYYYMMDD') 						
	]]>	
	</select> 	
	
	<!-- 이체테이블 계좌번호 암호화처리 -->
	<update id="updateSuppPoAccNoBlank" parameterClass="java.util.HashMap">	
    <![CDATA[
		UPDATE ST_SUPP_POREGI_TRF_AMT SET 
			   SUPP_PO_ACC_SEED_NO = #supp_po_acc_seed_no#
		WHERE  TRANSF_REQ_YMD = TO_CHAR(SYSDATE,'YYYYMMDD') 
		AND    SUPP_PO_REGI_PO_CD = #supp_po_regi_po_cd#
		AND    TRANSF_REQ_YMD = #transf_req_ymd#
		AND    TRANSF_DATA_SEQ = #transf_data_seq#
    ]]>			
	</update>

	<!-- 정산실행 공급업체 정산반영 취소 가능상태 체크 (AS-IS retriveAdjStatusChkCnt5_2) -->	   
	<select id="selectAdjStepFourCancelCnt" parameterClass="java.util.HashMap" resultClass="commMap">					
		SELECT  ( 
				SELECT COUNT(*)
				FROM   ST_ADJ_STATUS
				WHERE  ADJ_DATE = TO_CHAR(SYSDATE, 'yyyymmdd')
				AND    ADJ_STATUS IN ('1', '7')
				) CONDITION_ADJ_STATUS_CNT,
				(
				SELECT COUNT(*)
				FROM   ST_ADJ_STATUS
				WHERE  ADJ_DATE = TO_CHAR(SYSDATE, 'yyyymmdd')
				AND    ADJ_STATUS IN( '5', '6')
				) CURRENT_ADJ_STATUS_CNT
		FROM    DUAL    
	</select>  		
	   
	<select id="selectAdjStepB2BCancelCnt" parameterClass="java.util.HashMap" resultClass="commMap">					
		SELECT  (
				SELECT COUNT(*)
				FROM   ST_ADJ_STATUS
				WHERE  ADJ_DATE = TO_CHAR(SYSDATE, 'yyyymmdd')
				AND    ADJ_STATUS IN( 'B1')
				) CURRENT_ADJ_STATUS_CNT
		FROM    DUAL    
	</select>  	
	
	
	<!-- 위탁수수료 이체 요청 및 ERP 결산 -->		
	<select id="selectSettleSuppAdjustment5_1_1" parameterClass="java.util.HashMap" resultClass="int">
    <![CDATA[
		SELECT COUNT(1) AS CNT
		FROM   PIEMT0040
		WHERE  INCOMEYMD = TO_CHAR(SYSDATE,'YYYYMMDD')
		AND    SENDYN = 'Y'
		AND    INCOMEDIVCD IN ('1105999901','1105999902','1105999903','1105999906','1105999907')
    ]]>
	</select>		
	
	<!-- 위탁수수료 이체 요청 및 ERP 결산 -->		
	<select id="selectSettleSuppAdjustment5_1_2" parameterClass="java.util.HashMap" resultClass="int">
    <![CDATA[
		SELECT COUNT(1) AS CNT
		FROM   PIEMT0040
		WHERE  INCOMEYMD = TO_CHAR(SYSDATE,'YYYYMMDD')
		AND    SENDYN = 'N'
		AND    INCOMEDIVCD IN ('1105999901','1105999902','1105999903','1105999906','1105999907')
    ]]>
	</select>	
	
	<!-- 위탁수수료 이체 요청 및 ERP 결산 -->
	<delete id="deleteSettleSuppAdjustment5_1_2" parameterClass="java.util.HashMap">
		DELETE FROM PIEMT0040
		WHERE  INCOMEYMD = TO_CHAR(SYSDATE,'YYYYMMDD')
		AND    SENDYN = 'N'
		AND    INCOMEDIVCD IN ('1105999901','1105999902','1105999903','1105999906','1105999907')  	/*수입구분코드 */       
	</delete>	
	
	<!-- 위탁수수료 이체 요청 및 ERP 결산 연계 -->
	<insert id="insertSettleSuppAdjustment5_1_3" parameterClass="java.util.HashMap">		
    <![CDATA[ 		
        INSERT INTO IF_PIEMT0040 (
              CLOSEYMD
            , REGIPOCD
            , CLOSEDIVCD
            , INCOMEDIVCD
            , INCOMEYMD
            , RAISE_SEQ
            , IF_ID
            , INIT_TIME
            , DEAL_STATE
            , WRK_GBN
            , TX_ID
        ) VALUES (
              TO_CHAR(SYSDATE, 'YYYYMMDD')
            , '89958'
            , 'X'
            , 'X'
            , TO_CHAR(SYSDATE, 'YYYYMMDD')
            , IF_PIEMT0040_SQ01.NEXTVAL
            , 'IF-ESHPSH-015-P01I'
            , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS')
            , 'N'
            , '1'
            , NULL
        )
	]]>	
	</insert> 			
	
	<!-- 위탁수수료 이체 요청 및 ERP 결산 -->
	<delete id="deleteSettleSuppAdjustment5_2_1" parameterClass="java.util.HashMap">
		/* BSM_위탁수수료이체정보 */
		DELETE FROM ST_CTRT_FEE_TRANSF 
		WHERE  TRANSF_REQ_YMD=TO_CHAR(SYSDATE,'YYYYMMDD') 
	</delete>				
	
	<!-- 위탁수수료 이체 요청 및 ERP 결산  ST_CTRT_FEE_ADJ 이체자료전송상태코드 01로 초기화 -->
	<update id="updateSettleSuppAdjustment5_2_2" parameterClass="java.util.HashMap">	
    <![CDATA[
		UPDATE ST_CTRT_FEE_ADJ SET 
			   TRANSF_DATA_FRWD_STUS_CD = '01'
		  	 , TRANSF_DATA_FRWD_YMD = ''
			 , CLOSE_YN = 'N'
			 , CLOSE_YMD = ''
			 , LAST_REG_DATE = SYSDATE
		WHERE  TRANSF_DATA_FRWD_STUS_CD IN ('02')
		AND    TRANSF_DATA_FRWD_YMD=TO_CHAR(SYSDATE,'YYYYMMDD')
    ]]>			
	</update>	
	
	<!-- ST_SUPP_POREGI_TRF_AMT 삭제 -->
	<delete id="deleteRollbackSuppAdj_1_1" parameterClass="java.util.HashMap">
        DELETE ST_SUPP_POREGI_TRF_AMT 
        WHERE  TRANSF_REQ_YMD = TO_CHAR(SYSDATE,'YYYYMMDD') 
	</delete>	
	
	<!-- 일일 반품정산 롤백 -->
	<update id="updateRollbackSuppAdj_1_2" parameterClass="java.util.HashMap">	
    <![CDATA[
		UPDATE OD_RET_INTERFACE SET 
			   POSA_ACC_TRANSF_STUS_CD = '001'
			 , POSA_ACC_TRANSF_TREAT_YMD = NULL
		WHERE  POSA_ACC_TRANSF_TREAT_YMD = TO_CHAR(SYSDATE,'YYYYMMDD') 
		AND    POSA_ACC_TRANSF_STUS_CD='004'	             /* 진흥원계좌이체상태코드 004:이체완료, 001:미이체*/
		AND    CLAIM_DIV_CD='001'                            /* 클레임구분코드 환불 */
		AND    TREAT_STUS_CD IN ('002' )                     /* CM_COMN_CD : RETRNGD_STUS_CD 002 반품확인,  003 반품처리완료 */  
		AND    RETRNGD_REFUND_METH_CD IN('01', '02', '04')   /* 01: 현금접수현금환불, 02:카드접수현금환불, 04:정산후반품환불*/
    ]]>			
	</update>	
	
	<!-- 일일 반품정산 롤백 -->
	<update id="updateRollbackSuppAdj_1_3" parameterClass="java.util.HashMap">	
    <![CDATA[
		UPDATE ST_RECEV_PO_DEP_NO_CHG SET 
			   MONEY_DEPOT_STUS_CD = '001'
			 , MONEY_TRANSF_TREAT_YMD = NULL
		WHERE  MONEY_DEPOT_STUS_CD = '003'
		AND    MONEY_TRANSF_TREAT_YMD = TO_CHAR(SYSDATE,'YYYYMMDD')     
    ]]>			
	</update>		
	
	<delete id="deleteStAdjRemitInfo" parameterClass="java.util.HashMap">
	<![CDATA[
        DELETE ST_ADJ_REMIT_INFO
		WHERE  ADJ_START_DAY = TO_CHAR(TO_DATE(#adj_start_day#,'YYYYMMDD'),'YYYY/MM/DD')
		AND    ADJ_END_DAY   = TO_CHAR(TO_DATE(#adj_end_day#,'YYYYMMDD'),'YYYY/MM/DD')
		AND    REMIT_STUS_CD <> '04'  
		AND    PAVLN_DIV_CD  <> '08'
	]]>		
	</delete>	
	
	<delete id="deleteStAdjRemitInfoB2B" parameterClass="java.util.HashMap">
	<![CDATA[
        DELETE ST_ADJ_REMIT_INFO
		WHERE  ADJ_START_DAY = TO_CHAR(TO_DATE(#adj_start_day#,'YYYYMMDD'),'YYYY/MM/DD')
		AND    ADJ_END_DAY   = TO_CHAR(TO_DATE(#adj_end_day#,'YYYYMMDD'),'YYYY/MM/DD')
		AND    REMIT_STUS_CD <>  '04'
		AND    PAVLN_DIV_CD  = '08'  
	]]>		
	</delete>	

	<select id="getSuppAdjustDayForRollback" parameterClass="java.util.HashMap" resultClass="commMap">
    <![CDATA[
		SELECT 1
             , TO_CHAR(TO_DATE(CONFIRM_DAY, 'YYYY/MM/DD'), 'YYYYMMDD') AS ADJ_CONFIRM_DAY
             , TO_CHAR(TO_DATE(START_DAY, 'YYYY/MM/DD') +1, 'YYYYMMDD') AS ADJ_START_DAY
             , TO_CHAR(TO_DATE(END_DAY, 'YYYY/MM/DD'), 'YYYYMMDD') AS ADJ_END_DAY
        FROM
        ( 
          SELECT MAX(END_DAY) AS START_DAY
          FROM ST_HISTORY_ADJUST
          WHERE END_DAY < (
            SELECT MAX(END_DAY)
            FROM ST_HISTORY_ADJUST
            WHERE SUPP_ADJ_YN = 'Y'
          )
          AND  SUPP_ADJ_YN = 'Y'
        )A,
        (
          SELECT END_DAY, CONFIRM_DAY
          FROM
          (
            SELECT END_DAY, CONFIRM_DAY
            FROM ST_HISTORY_ADJUST
            WHERE END_DAY = (
                SELECT MAX(END_DAY)
                FROM ST_HISTORY_ADJUST
                WHERE SUPP_ADJ_YN = 'Y'
            )
            AND SUPP_ADJ_YN = 'Y'
            ORDER BY CONFIRM_DAY DESC
          )
          WHERE ROWNUM <= 1
        )B
    ]]>
	</select>	

	<!-- 공급정산 롤백 -->
	<delete id="deleteRollbackSuppAdj_2_1" parameterClass="java.util.HashMap">
		DELETE FROM ST_CTRT_FEE_ADJ
		WHERE  TRANSF_REQ_YMD = TO_CHAR(SYSDATE,'YYYYMMDD')
		AND    TRANSF_DATA_DIV_CD  IN ('02','03','08','09','10','16')
		AND    TRANSF_DATA_FRWD_STUS_CD  IN ('01','02')       
	</delete>	

	<!-- 공급정산 롤백 -->
	<delete id="deleteRollbackSuppAdj_2_2" parameterClass="java.util.HashMap">
		DELETE FROM ST_SUPP_COMP_ADJ_INFO 
		WHERE  ADJ_YMD = TO_CHAR(SYSDATE,'YYYYMMDD')	
		AND    PAVLN_DIV_CD IN ('01', '02', '03', '04', '05', '07', '09', '99')
	</delete>	
	
	<!-- 공급정산 롤백 -->
	<update id="updateRollbackSuppAdj_2_3" parameterClass="java.util.HashMap">	
    <![CDATA[
		UPDATE ST_SUPP_COMP_ADJ_INFO SET 
			   ADJ_TREAT_STUS_CD = '001'
		WHERE  ADJ_CD= '13' 
		AND    ADJ_TREAT_STUS_CD IN ('002','003') 
		AND    ADJ_TREAT_YMD = TO_CHAR(SYSDATE,'YYYYMMDD')
		AND    PAVLN_DIV_CD IN('01','02','03','04','05','07','09','99')     
    ]]>			
	</update>		

	<!-- 공급정산 롤백 -->
	<update id="updateRollbackSuppAdj_2_4" parameterClass="java.util.HashMap">	
    <![CDATA[
		UPDATE ST_SUPP_COMP_ADJ_INFO SET 
			   ADJ_TREAT_STUS_CD = '001'
		WHERE  ADJ_CD= '01' 
		AND    ADJ_TREAT_STUS_CD IN ('002','003') 
		AND    ADJ_TREAT_YMD = TO_CHAR(SYSDATE,'YYYYMMDD') 
		AND    PAVLN_DIV_CD IN('01','02','03','04','05','07','09','99')
    ]]>			
	</update>	
	
	<!-- 공급정산 롤백 -->
	<update id="updateRollbackSuppAdj_2_5" parameterClass="java.util.HashMap">	
    <![CDATA[
		UPDATE ST_SUPP_COMP_ADJ_INFO SET 
			   RCPT_PRC=0
			 , SUB_AMT=0
			 , TRANS_AMT=0
			 , ADD_AMT=0
		WHERE  ADJ_TREAT_STUS_CD = '001' 
		AND    ADJ_CD = '13' 
		AND    ADJ_TREAT_YMD = TO_CHAR(SYSDATE,'YYYYMMDD')
		AND    PAVLN_DIV_CD IN('01','02','03','04','05','07','09','99')
    ]]>			
	</update>	
	
	<!-- 공급정산 롤백 -->
	<update id="updateRollbackSuppAdj_2_6" parameterClass="java.util.HashMap">	
    <![CDATA[
		UPDATE ST_SUPP_COMP_ADJ_INFO SET 
			   BAL_AMT = (
						  CASE WHEN (FORWARD_AMT + ADJ_AMT + SUB_AMT - TRANS_AMT) > 0THEN (FORWARD_AMT + ADJ_AMT + SUB_AMT - TRANS_AMT) 
							   ELSE 0 
						  END
						 )
		WHERE  ADJ_TREAT_STUS_CD = '001' 
		AND    ADJ_CD = '13' 
		AND    ADJ_TREAT_YMD = TO_CHAR(SYSDATE,'YYYYMMDD')  
		AND    PAVLN_DIV_CD IN('01','02','03','04','05','07','09','99')
    ]]>			
	</update>
	
	<!-- 공급정산 롤백 -->
	<update id="updateRollbackSuppAdj_3_1" parameterClass="java.util.HashMap">	
    <![CDATA[
		UPDATE ST_ADJ_GOODS 
		SET    ADJ_TREAT_YMD = NULL
		     , ADJ_STUS_CD = '001'
		WHERE  1=1
		AND    COMPLETE_DATE BETWEEN #adj_start_day# AND #adj_end_day#
		AND    PAVLN_DIV_CD IN ('01', '02', '03', '04', '05', '07', '09', '99')
		AND    ADJ_STUS_CD = '002'  
    ]]>			
	</update>
	
	<!-- 공급정산 롤백 rollbackSuppAdj_3_2 사용하지 않음. rollbackSuppAdj_3_3 만 사용 -->
	
	<!-- 공급정산 롤백 주문원부 -->
	<update id="updateRollbackSuppAdj_3_3" parameterClass="java.util.HashMap">	
    <![CDATA[
		UPDATE  OD_ORDER_ITM
    SET     ADJ_YN = 'N',
			      ADJ_DATE = NULL
    WHERE   1 = 1
    AND     ORDER_ITM_ID IN ( 
                           SELECT B.ORDER_ITM_ID 
                           FROM   OD_ORDER_MAST A, OD_ORDER_ITM B
                           WHERE 1 = 1
                           AND A.ORDER_ID = B.ORDER_ID
                           AND B.PAVLN_DIV_CD IN ('01', '02', '03', '04', '05', '07', '09', '99')
                           AND TO_CHAR(B.ADJ_DATE,'YYYYMMDD') = TO_CHAR(SYSDATE,'YYYYMMDD')
                           AND B.ADJ_YN = 'Y'
                           AND A.APPR_DATE BETWEEN TO_DATE(#adj_start_day#, 'YYYYMMDD') AND TO_DATE(#adj_end_day#, 'YYYYMMDD') + .99999
                           )                  
    ]]>			
	</update>								

	<!-- 공급정산 롤백 결제정보 -->
	<update id="updateRollbackSuppAdj_3_4" parameterClass="java.util.HashMap">	
    <![CDATA[UPDATE OD_ORDER_SETL ODS
        SET    ODS.JUNG_COMPLETE_DATE = NULL
             , ODS.JUNG_YN = 'N'
        WHERE  ODS.USE_YN = 'Y'
        AND    ODS.SETL_APPR_DATE BETWEEN TO_DATE(#adj_start_day#, 'YYYYMMDD') AND TO_DATE(#adj_end_day#, 'YYYYMMDD') + .99999 
        AND    ODS.JUNG_COMPLETE_DATE =  TO_CHAR(SYSDATE,'YYYYMMDD')
        AND    ODS.JUNG_YN = 'Y'
        AND    EXISTS (
					SELECT 1 
					FROM (
						  SELECT A.ORDER_ID
						  FROM   OD_ORDER_MAST A, OD_ORDER_ITM B
						  WHERE A.ORDER_ID = B.ORDER_ID
						  AND    A.APPR_DATE BETWEEN TO_DATE(#adj_start_day#, 'YYYYMMDD') AND TO_DATE(#adj_end_day#, 'YYYYMMDD') + .99999 
						  AND    B.PAVLN_DIV_CD IN ('01', '02', '03', '04', '05', '07', '09', '99')
						  GROUP BY A.ORDER_ID
					) C
					WHERE C.ORDER_ID = ODS.ORDER_ID
					)
    ]]>			
    
	</update>	
	
	<!-- 공급정산 롤백 결제정보 -->
	<update id="updateRollbackSuppAdj_3_5" parameterClass="java.util.HashMap">	
    <![CDATA[
		UPDATE ST_HISTORY_ADJUST 
		SET    SUPP_ADJ_YN = 'N' 
		WHERE  END_DAY = TO_CHAR(TO_DATE(#adj_end_day#, 'YYYYMMDD'), 'YYYY/MM/DD')
		AND    SUPP_ADJ_YN = 'Y'   
    ]]>			
	</update>		

	<!-- 일일반품 정산반영 step five ADJ_STATUS CHECK -->	   
	<select id="selectAdjStatusChkStepFive" parameterClass="java.util.HashMap" resultClass="commMap">	
		SELECT  ( 
				SELECT COUNT(*)
				FROM   ST_ADJ_STATUS
				WHERE  ADJ_DATE = TO_CHAR(SYSDATE, 'YYYYMMDD')
				AND    ADJ_STATUS = '4'
				) CONDITION_ADJ_STATUS_CNT_FIVE,
				(
				SELECT COUNT(*)
				FROM   ST_ADJ_STATUS
				WHERE  ADJ_DATE = TO_CHAR(SYSDATE, 'YYYYMMDD')
				AND    ADJ_STATUS IN('6')
				) CURRENT_ADJ_STATUS_CNT_FIVE
		FROM    DUAL   
	</select>  
	<!-- 일일반품 정산반영 step five ADJ_STATUS CHECK -->	

	<!-- 일일반품정산 및 보상금 주기(현재일자) 금일 DB 날짜 조회 -->	   
	<select id="selectRefundSysdate" parameterClass="java.util.HashMap" resultClass="commMap">	
		/* 대상기간 전의 최종 입출금일의 최종 잔액 조회 */
		SELECT  TO_CHAR(SYSDATE,'YYYYMMDD') AS ADJ_DATE
			  , TO_CHAR(SYSDATE,'YYYYMMDD') AS ADJ_START_DATE
			  , TO_CHAR(SYSDATE,'YYYYMMDD') AS ADJ_END_DATE
			  , MIN(A.WORKCALEYMD) AS THIS_MONTH_CTRT_TRNASF_DATE
			  , CASE 
			      WHEN MIN(A.WORKCALEYMD) = TO_CHAR(SYSDATE, 'YYYYMMDD') THEN 'Y'
				  ELSE 'N'
				END AS IS_THIS_MONTH_CTRT_TRNASF_DATE
		FROM    PIEMT0160 A
		WHERE   A.RCOCD='00'
		AND     A.WORKCALEYMD >= TO_CHAR(SYSDATE, 'YYYYMM')||'17'
		AND     A.HOLDAYYN='N'     
	</select>  
	
	<!-- TEMP USSC_DEPOTINFO, IFR_RECEV_PO_DEP_AMT INSERT -->		
	<insert id="insertUSSC1" parameterClass="java.util.HashMap">		
    <![CDATA[ 		
		/* 우체국 입금파일 수신 여부 판단 */ 
		INSERT INTO IFR_RECEV_PO_DEP_AMT 
		    ( 
			TRANSF_REQ_YMD, TRANSF_DATA_SEQ, TRANSF_FILE_SEQ, 
		    DEPOT_ECODE, DEPOT_CNT, DEPOT_AMT, 
		    DEPOT_CONT, USE_YN, LAST_REG_DATE, 
		    DEPOT_HMS
			)
		VALUES 
			(  
			(SELECT MAX(A.WORKCALEYMD) AS WORK_CALE_YMD FROM PIEMT0160 A WHERE A.RCOCD='00' AND A.WORKCALEYMD < TO_CHAR(SYSDATE, 'YYYYMMDD') AND A.HOLDAYYN='N')
		  , -1
		  , 1
		  , '313049'
		  , 1
		  , 1000
		  , ''
		  , 'Y'
		  , SYSDATE
		  , '120000'
			)	  
	]]>	
	</insert> 	
				
	<!-- TEMP USSC_DEPOTINFO, IFR_SUPP_POREGI_TRF_AMT INSERT -->		
	<insert id="insertUSSC2" parameterClass="java.util.HashMap">		
    <![CDATA[ 		
		/* 이체요청파일 전송결과 수신 여부 판단 */
		INSERT INTO IFR_SUPP_POREGI_TRF_AMT 
		    ( 
			TRANSF_REQ_YMD, TRANSF_DATA_SEQ, TRANSF_FILE_SEQ, 
		    SUPP_PO_ACC_NO, TRANSF_DATA_DIV_CD, TRANSF_RSLT_PFNC_CD, 
		    TRANSF_AMT, TRANSF_RSLT_CONT, USE_YN, 
		    LAST_REG_DATE, SUPP_PO_ACC_SEED_NO
			)
		VALUES 
			(  
		    (SELECT MAX(A.WORKCALEYMD) AS WORK_CALE_YMD FROM PIEMT0160 A WHERE A.RCOCD='00' AND A.WORKCALEYMD < TO_CHAR(SYSDATE, 'YYYYMMDD') AND A.HOLDAYYN='N')
		  , -1
		  , 1
		  , '123-00-123456'
		  , '01'
		  , '01'
		  , 1000
		  , '정상'
		  , 'Y'
		  , SYSDATE
		  , 'ISUAJYIKvsN0aGLfsAjURw=='
			)	  
	]]>	
	</insert> 	
	
	
	<!-- TEMP USSC_DEPOTINFO, IFR_CTRT_FEE_TRANSF INSERT -->		
	<insert id="insertUSSC3" parameterClass="java.util.HashMap">		
    <![CDATA[ 		
		/* 위탁수수료 전송결과 수신 여부 판단 */
		INSERT INTO IFR_CTRT_FEE_TRANSF 
		    ( 
			TRANSF_REQ_YMD, TRANSF_DATA_SEQ, TRANSF_FILE_SEQ, 
   			SUPP_PO_ACC_NO, TRANSF_DATA_DIV_CD, TRANSF_RSLT_PFNC_CD, 
   			TRANSF_AMT, TRANSF_RSLT_CONT, USE_YN, 
   			LAST_REG_DATE, SUPP_PO_ACC_SEED_NO
			)
		VALUES 
			(
			(
			SELECT CASE 
                      WHEN TO_CHAR(SYSDATE, 'YYYYMMDD') > A.THIS_MONTH_CTRT_FEE_DATE THEN A.THIS_MONTH_CTRT_FEE_DATE
                   ELSE B.BEFORE_MONTH_CTRT_FEE_DATE
                 END AS LAST_CTRT_FEE_DATE
            FROM
                (
                    SELECT  MIN(A.WORKCALEYMD) AS THIS_MONTH_CTRT_FEE_DATE
                    FROM PIEMT0160 A
                    WHERE A.RCOCD='00'
                    AND A.WORKCALEYMD >= TO_CHAR(SYSDATE, 'YYYYMM')||'17'
                    AND A.HOLDAYYN='N'
                )A,
                (    
                    SELECT MIN(B.WORKCALEYMD) AS BEFORE_MONTH_CTRT_FEE_DATE
                    FROM  PIEMT0160 B
                    WHERE B.RCOCD='00'
                    AND B.WORKCALEYMD >= TO_CHAR(TO_DATE(TO_CHAR(SYSDATE, 'YYYYMM')||'01', 'YYYYMMDD') - 1, 'YYYYMM')||'17'
                    AND B.HOLDAYYN='N'                
                )B
			)
		  , -1
		  , 1
		  , '123-00-123456'
		  , '01'
		  , '01'
		  , 1000
		  , '정상'
		  , 'Y'
		  , SYSDATE
		  , 'ISUAJYIKvsN0aGLfsAjURw=='
			)	  
	]]>	
	</insert> 	
	
	<!-- TEMP USSC_DEPOTINFO, ST_ADJ_STATUS INSERT -->		
	<insert id="insertUSSC4" parameterClass="java.util.HashMap">		
    <![CDATA[ 		
		/* 일일입금대사자료생성배치 */
		INSERT INTO ST_ADJ_STATUS 
		    ( 
			ADJ_DATE, 
			ADJ_DATE_SEQ, 
			ADJ_STATUS, 
   			TRANSF_STUS_CD, 
   			USEYN, 
   			WORK_DATE
			)
		VALUES 
			(  
			TO_CHAR(SYSDATE, 'YYYYMMDD')
		  , (SELECT NVL( MAX(ADJ_DATE_SEQ)+1, 0) FROM ST_ADJ_STATUS WHERE ADJ_DATE = TO_CHAR(SYSDATE, 'YYYYMMDD') )
		  , 'D'
		  , '99'
		  , 'Y'
		  , SYSDATE
			)	  
	]]>	
	</insert> 		
	
	<delete id="insertUSSC5" parameterClass="java.util.HashMap">
    <![CDATA[ 		
		DELETE FROM ST_ADJ_STATUS
    	WHERE 1=1
   		AND   ADJ_DATE = TO_CHAR(SYSDATE, 'YYYYMMDD')
   		AND   ADJ_STATUS = 'D'
	]]>	                 
	</delete>		
				 
	<!--TEMP USSC_DEPOTINFO 	IFR_RECEV_PO_DEP_AMT DELETE-->
	<delete id="deleteUSSC1" parameterClass="java.util.HashMap">
    <![CDATA[ 	
		DELETE FROM IFR_RECEV_PO_DEP_AMT
    	WHERE 1=1
    	AND TRANSF_REQ_YMD = ( SELECT MAX(A.WORKCALEYMD) AS WORK_CALE_YMD 
			                   FROM PIEMT0160 A
			                   WHERE A.RCOCD='00'
			                   AND A.WORKCALEYMD < TO_CHAR(SYSDATE, 'YYYYMMDD')
			                   AND A.HOLDAYYN='N'
                             )
        AND DEPOT_ECODE='313049'
        AND DEPOT_CNT='1'
        AND DEPOT_AMT=1000
	]]>	                 
	</delete>
	
	<!--TEMP USSC_DEPOTINFO 	IFR_SUPP_POREGI_TRF_AMT DELETE-->
	<delete id="deleteUSSC2" parameterClass="java.util.HashMap">
    <![CDATA[ 		
		DELETE FROM IFR_SUPP_POREGI_TRF_AMT
    	WHERE 1=1
    	AND TRANSF_REQ_YMD = ( SELECT MAX(A.WORKCALEYMD) AS WORK_CALE_YMD 
			                   FROM PIEMT0160 A
			                   WHERE A.RCOCD='00'
			                   AND A.WORKCALEYMD < TO_CHAR(SYSDATE, 'YYYYMMDD')
			                   AND A.HOLDAYYN='N'
			                 )
        AND SUPP_PO_ACC_NO='123-00-123456'
        AND TRANSF_AMT=1000
        AND SUPP_PO_ACC_SEED_NO = 'ISUAJYIKvsN0aGLfsAjURw=='
	]]>	                 
	</delete>
	
	<!--TEMP USSC_DEPOTINFO 	IFR_CTRT_FEE_TRANSF DELETE-->
	<delete id="deleteUSSC3" parameterClass="java.util.HashMap">
    <![CDATA[ 		
		DELETE FROM IFR_CTRT_FEE_TRANSF
   		WHERE 1=1
		AND TRANSF_REQ_YMD = ( SELECT MAX(A.TRANSF_REQ_YMD) 
				               FROM IFR_CTRT_FEE_TRANSF A
				               WHERE 1=1
				               AND A.TRANSF_REQ_YMD <= TO_CHAR(SYSDATE, 'YYYYMMDD')
				               AND A.USE_YN='Y'
             				 )
        AND SUPP_PO_ACC_NO='123-00-123456'
        AND TRANSF_AMT=1000
        AND SUPP_PO_ACC_SEED_NO = 'ISUAJYIKvsN0aGLfsAjURw=='
	]]>	                 
	</delete>
	
	<!--TEMP USSC_DEPOTINFO 	ST_ADJ_STATUS DELETE-->
	<delete id="deleteUSSC4" parameterClass="java.util.HashMap">
    <![CDATA[ 		
		DELETE FROM ST_ADJ_STATUS
    	WHERE 1=1
   		AND   ADJ_DATE = TO_CHAR(SYSDATE, 'YYYYMMDD')
   		AND   ADJ_STATUS = 'D'
        AND   TRANSF_STUS_CD='99'
        AND   USEYN='Y'
	]]>	                 
	</delete>					
	
	<!-- 반품환불 대상 (현금/카드 결제 현금 환불) -->
	<select id="settleRefundAdjustment1_1" parameterClass="java.util.HashMap" resultClass="commMap">	
	<![CDATA[ 		
    SELECT SUPP_PO_REGI_PO_CD,
           TRANSF_REQ_YMD,
           ( SELECT NVL(MAX(TRANSF_DATA_SEQ) , 0) 
             FROM ST_SUPP_POREGI_TRF_AMT 
             WHERE TRANSF_REQ_YMD = TO_CHAR(SYSDATE,'YYYYMMDD')) + ROWNUM AS TRANSF_DATA_SEQ, 
           SUPP_PO_ACC_NO,
           TRANSF_AMT,
           TRANSF_DATA_DIV_CD, 
           TRANSF_DATA_FRWD_STUS_CD,
           TRANSF_DATA_FRWD_YMD,
           STRT_ADJ_PERIOD_YMD,
           END_ADJ_PERIOD_YMD,
           LAST_REG_PRSN_ID,
           LAST_REG_DATE,
           CLOSE_YN,
           CLOSE_YMD,
           GOODS_CNT, 
           CLAIM_REQ_NO,
           ORDER_ID,
           GOODS_CD,
           GOODS_SEQ,
           ORDER_ITM_ID,
           CLAIM_REQ_SEQ
	FROM
	(
      SELECT A.SUPPO_RGISTPO_CD AS SUPP_PO_REGI_PO_CD,
             TO_CHAR(SYSDATE,'YYYYMMDD') AS TRANSF_REQ_YMD,
             ( SELECT ACC_SEED_NO
               FROM CM_POST_ACCNO  
               WHERE PO_REGI_PO_CD=A.SUPPO_RGISTPO_CD
               AND ACC_NO_DIV_CD = '01' ) AS SUPP_PO_ACC_NO,
             A.CLAIM_TREAT_AMT AS TRANSF_AMT,
           	 DECODE(A.RETRNGD_REFUND_METH_CD, '01', '04', '02', '11') AS TRANSF_DATA_DIV_CD, 
            '01' AS TRANSF_DATA_FRWD_STUS_CD,
            TO_CHAR(SYSDATE,'YYYYMMDD') AS TRANSF_DATA_FRWD_YMD,
            TO_CHAR(SYSDATE,'YYYYMMDD') AS STRT_ADJ_PERIOD_YMD,
            TO_CHAR(SYSDATE,'YYYYMMDD') AS END_ADJ_PERIOD_YMD,
            'bsmusr' AS LAST_REG_PRSN_ID,
            SYSDATE AS LAST_REG_DATE,
            'N' AS CLOSE_YN,
            '' AS CLOSE_YMD,
            0 AS GOODS_CNT, 
            A.CLAIM_REQ_NO,
            A.ORDER_ID,
            A.GOODS_CD,
            A.GOODS_SEQ,
            A.ORDER_ITM_ID,
            A.CLAIM_REQ_SEQ
      FROM 	OD_RET_INTERFACE A, OD_ORDER_ITM B
      WHERE 1=1    
      AND   A.ORDER_ID = B.ORDER_ID
      AND   A.ORDER_ITM_ID = B.ORDER_ITM_ID
      AND   B.PAVLN_DIV_CD IN ('01', '02', '04', '07')
      AND 	A.CLAIM_DIV_CD='001'  /*환불*/
      AND 	A.TREAT_STUS_CD = '002' /*반품확인 0*/
      AND 	A.POSA_ACC_TRANSF_STUS_CD = '001'        /*미이체상태*/
      AND 	A.RETRNGD_REFUND_METH_CD IN('01', '02') /*01 : 현금결제-현금환불, 02 : 카드결제-현금환불*/
      AND 	A.CLAIM_CONF_YMD < TO_CHAR(SYSDATE, 'YYYYMMDD')
      /* TODO : 조정금액은 이후에 다시 처리하기로 함*/
      UNION ALL
      /* 반품환불 대상 4 (정산후 환불)*/
      SELECT A.SUPPO_RGISTPO_CD AS SUPP_PO_REGI_PO_CD,
             TO_CHAR(SYSDATE,'YYYYMMDD') AS TRANSF_REQ_YMD,
           	 ( SELECT ACC_SEED_NO
               FROM CM_POST_ACCNO  
               WHERE PO_REGI_PO_CD=A.SUPPO_RGISTPO_CD
               AND ACC_NO_DIV_CD = '01' ) AS SUPP_PO_ACC_NO,
             A.CLAIM_TREAT_AMT AS TRANSF_AMT,
           	'16' AS TRANSF_DATA_DIV_CD, 
           	'01' AS TRANSF_DATA_FRWD_STUS_CD,
           	TO_CHAR(SYSDATE,'YYYYMMDD') AS TRANSF_DATA_FRWD_YMD,
           	TO_CHAR(SYSDATE,'YYYYMMDD') AS STRT_ADJ_PERIOD_YMD,
           	TO_CHAR(SYSDATE,'YYYYMMDD') AS END_ADJ_PERIOD_YMD,
           	'bsmusr' AS LAST_REG_PRSN_ID,
           	SYSDATE AS LAST_REG_DATE,
           	'N' AS CLOSE_YN,
           	'' AS CLOSE_YMD,
           	0 AS GOODS_CNT, 
           	A.CLAIM_REQ_NO,
           	A.ORDER_ID,
           	A.GOODS_CD,
           	A.GOODS_SEQ,
           	A.ORDER_ITM_ID,
           	A.CLAIM_REQ_SEQ
      FROM 	OD_RET_INTERFACE A, OD_ORDER_ITM B, OD_ORDER_MAST T
      WHERE 1=1
      AND 	A.ORDER_ID = T.ORDER_ID
      AND   A.ORDER_ID = B.ORDER_ID
      AND   A.ORDER_ITM_ID = B.ORDER_ITM_ID
      AND   B.PAVLN_DIV_CD IN ('01', '02', '04', '07')
      AND 	A.CLAIM_DIV_CD='001'  /*환불만이체대상  교환은아님*/
      AND 	A.TREAT_STUS_CD = '002'
      AND 	A.POSA_ACC_TRANSF_TRGT_YN = 'Y'
      AND 	A.POSA_ACC_TRANSF_STUS_CD = '001'  /* 미이체상태*/
      AND 	(A.RETRNGD_REFUND_METH_CD = '04') /*정산후반품*/
      AND 	A.CLAIM_CONF_YMD < TO_CHAR(SYSDATE, 'YYYYMMDD')
      AND 	NVL(T.COPRTN_ORDER_YN, 'N') != 'Y'  /*외부제휴 주문은 진흥원으로 직접 환불*/
	)
	]]>	   
	</select>  
	
	<insert id="settleRefundAdjustment1_2" parameterClass="java.util.HashMap">		
    <![CDATA[ 	  
    INSERT INTO ST_SUPP_POREGI_TRF_AMT( 
    			  SUPP_PO_REGI_PO_CD,
                  TRANSF_REQ_YMD,
                  TRANSF_DATA_SEQ,      
                  SUPP_PO_ACC_SEED_NO,         
                  TRANSF_AMT,
                  TRANSF_DATA_DIV_CD,
                  TRANSF_DATA_FRWD_STUS_CD,
                  TRANSF_DATA_FRWD_YMD,
                  STRT_ADJ_PERIOD_YMD,
                  END_ADJ_PERIOD_YMD,
                  LAST_REG_PRSN_ID,
                  LAST_REG_DATE,
                  CLOSE_YN,
                  CLOSE_YMD,
                  GOODS_CNT
    )
	VALUES( 
                  #suppPoRegiPoCd#,            /* SUPP_PO_REGI_PO_CD */
                  TO_CHAR(SYSDATE,'YYYYMMDD'), /* TRANSF_REQ_YMD */
                  #transfDataSeq#,             /* TRANSF_DATA_SEQ */
                  #suppPoAccNo#,               /* SUPP_PO_ACC_SEED_NO */
                  #transfAmt#,                 /* TRANSF_AMT */
                  #transfDataDivCd#,           /* TRANSF_DATA_DIV_CD */
                  '01',                        /* TRANSF_DATA_FRWD_STUS_CD */
                  TO_CHAR(SYSDATE,'YYYYMMDD'), /* TRANSF_DATA_FRWD_YMD */
                  TO_CHAR(SYSDATE,'YYYYMMDD'), /* STRT_ADJ_PERIOD_YMD */
                  TO_CHAR(SYSDATE,'YYYYMMDD'), /* END_ADJ_PERIOD_YMD */
                  'bsmusr',                    /* LAST_REG_PRSN_ID */
                  SYSDATE,                     /* LAST_REG_DATE */
                  'N',                         /* CLOSE_YN */
                  '',                          /* CLOSE_YMD */
                  0                            /* GOODS_CNT */
    )
    ]]>	   
	</insert>
	
	<update id="settleRefundAdjustment1_3" parameterClass="java.util.HashMap">		
	<![CDATA[ 	  
    UPDATE OD_RET_INTERFACE  A
    SET    A.POSA_ACC_TRANSF_STUS_CD = '004',
           A.POSA_ACC_TRANSF_TREAT_YMD = TO_CHAR(SYSDATE,'YYYYMMDD') 
  	WHERE  A.ORDER_ITM_ID = #orderItmId# 
    AND    A.CLAIM_REQ_SEQ = #claimReqSeq#
    ]]>	
	</update>
	
	<!-- /* 외부제휴주문 정산후환불처리-1. 외부제휴 주문일때는 환불계좌를 강제로 진흥원계좌로 세팅하기 위한 목록조회 */ -->
	<select id="retrieveRefundExternalAccList" parameterClass="java.util.HashMap" resultClass="commMap">	
	<![CDATA[ 		
    SELECT A.ORDER_ITM_ID,
           A.CLAIM_REQ_SEQ
    FROM   OD_RET_INTERFACE A, OD_ORDER_ITM B, OD_ORDER_MAST T
    WHERE  1 = 1
    AND    A.ORDER_ID = T.ORDER_ID
    AND    A.ORDER_ID = B.ORDER_ID
    AND    A.ORDER_ITM_ID = B.ORDER_ITM_ID
    AND    B.PAVLN_DIV_CD IN ('01', '02', '04', '07')
    AND    A.CLAIM_DIV_CD='001'               /*환불만이체대상  교환은아님*/
    AND    A.TREAT_STUS_CD = '002'
    AND    A.POSA_ACC_TRANSF_TRGT_YN = 'Y'
    AND    A.POSA_ACC_TRANSF_STUS_CD = '001'  /* 미이체상태*/
    AND    A.RETRNGD_REFUND_METH_CD = '04'    /*정산후반품*/
    AND    A.CLAIM_CONF_YMD < TO_CHAR(SYSDATE, 'YYYYMMDD')
    AND    NVL(T.COPRTN_ORDER_YN, 'N') = 'Y'
	]]>	   
	</select>  
	
	<!--외부제휴 주문일때는 환불계좌를 강제로 진흥원계좌로 세팅-->
	<update id="modifyRefundExternalAccList" parameterClass="java.util.HashMap">	
	<![CDATA[ 	
	UPDATE OD_RET_INTERFACE  A
    SET    REFUND_ACC_NO   = #refundAccSeedNo#,
           REFUND_BANKCD   = #refundBankCd#,
           DPSTRNM         = #depotOwnrNm#
    WHERE  A.ORDER_ITM_ID  = #orderItmId# 
    AND    A.CLAIM_REQ_SEQ = #claimReqSeq#
    ]]>
	</update>
		  		
	<!--외부제휴주문 정산후환불처리-2. 외부제휴주문 정산후환불 목록조회-->		  		
	<select id="retrieveExternalRefundList" parameterClass="java.util.HashMap" resultClass="commMap">	
	<![CDATA[ 		
    SELECT 	SUPP_PO_REGI_PO_CD,
            TRANSF_REQ_YMD,
      		( SELECT NVL(MAX(TRANSF_DATA_SEQ) , 0) 
         	  FROM ST_SUPP_POREGI_TRF_AMT 
         	  WHERE TRANSF_REQ_YMD = TO_CHAR(SYSDATE,'YYYYMMDD')) + ROWNUM AS TRANSF_DATA_SEQ, 
           	SUPP_PO_ACC_NO,
           	TRANSF_AMT,
           	TRANSF_DATA_DIV_CD, 
           	TRANSF_DATA_FRWD_STUS_CD,
           	TRANSF_DATA_FRWD_YMD,
           	STRT_ADJ_PERIOD_YMD,
           	END_ADJ_PERIOD_YMD,
           	LAST_REG_PRSN_ID,
           	LAST_REG_DATE,
           	CLOSE_YN,
           	CLOSE_YMD,
           	GOODS_CNT, 
           	CLAIM_REQ_NO,
           	ORDER_ID,
           	GOODS_CD,
           	GOODS_SEQ,
           	ORDER_ITM_ID,
           	CLAIM_REQ_SEQ
	FROM
		(
      		/*EPOST 외부제휴 주문 정산후 환불 대상*/
      		SELECT 	A.SUPPO_RGISTPO_CD AS SUPP_PO_REGI_PO_CD,
		            TO_CHAR(SYSDATE,'YYYYMMDD') AS TRANSF_REQ_YMD,
		            REFUND_ACC_NO AS SUPP_PO_ACC_NO, /* 외부제휴주문 정산후 환불일경우에는 진흥원으로 이체*/
		            A.CLAIM_TREAT_AMT AS TRANSF_AMT,
		            '16' AS TRANSF_DATA_DIV_CD, 
		            '01' AS TRANSF_DATA_FRWD_STUS_CD,
		            TO_CHAR(SYSDATE,'YYYYMMDD') AS TRANSF_DATA_FRWD_YMD,
		            TO_CHAR(SYSDATE,'YYYYMMDD') AS STRT_ADJ_PERIOD_YMD,
		            TO_CHAR(SYSDATE,'YYYYMMDD') AS END_ADJ_PERIOD_YMD,
		            'bsmusr' AS LAST_REG_PRSN_ID,
		            SYSDATE AS LAST_REG_DATE,
		            'N' AS CLOSE_YN,
		            '' AS CLOSE_YMD,
		            0 AS GOODS_CNT, 
		            A.CLAIM_REQ_NO,
		            A.ORDER_ID,
		            A.GOODS_CD,
		            A.GOODS_SEQ,
		            A.ORDER_ITM_ID,
		            A.CLAIM_REQ_SEQ
      		FROM    OD_RET_INTERFACE A, OD_ORDER_ITM B, OD_ORDER_MAST T
		    WHERE   1 = 1
		    AND     A.ORDER_ID = T.ORDER_ID
		    AND     A.ORDER_ID = B.ORDER_ID
		    AND     A.ORDER_ITM_ID = B.ORDER_ITM_ID
		    AND     B.PAVLN_DIV_CD IN ('01', '02', '04', '07')
	        AND 	A.CLAIM_DIV_CD='001'  /*환불만이체대상  교환은아님*/
	        AND 	A.TREAT_STUS_CD = '002'
	        AND 	A.POSA_ACC_TRANSF_TRGT_YN = 'Y'
	        AND 	A.POSA_ACC_TRANSF_STUS_CD = '001'  /* 미이체상태*/
	        AND 	A.RETRNGD_REFUND_METH_CD = '04' /* 정산후반품*/
	        AND 	A.CLAIM_CONF_YMD < TO_CHAR(SYSDATE, 'YYYYMMDD')
	        AND 	NVL(T.COPRTN_ORDER_YN, 'N') = 'Y'  /* 외부제휴 주문은 진흥원으로 직접 환불*/
	)
	]]>	   
	</select>		  	
	
	<!--외부제휴주문 정산후환불처리-2. 외부제휴주문 정산후환불 이체데이터생성-->
	<insert id="createExternalRefundTrf" parameterClass="java.util.HashMap">		
    <![CDATA[ 	  
    INSERT INTO ST_SUPP_POREGI_TRF_AMT( 
    			  SUPP_PO_REGI_PO_CD,
                  TRANSF_REQ_YMD,
                  TRANSF_DATA_SEQ,      
                  SUPP_PO_ACC_SEED_NO,         
                  TRANSF_AMT,
                  TRANSF_DATA_DIV_CD,
                  TRANSF_DATA_FRWD_STUS_CD,
                  TRANSF_DATA_FRWD_YMD,
                  STRT_ADJ_PERIOD_YMD,
                  END_ADJ_PERIOD_YMD,
                  LAST_REG_PRSN_ID,
                  LAST_REG_DATE,
                  CLOSE_YN,
                  CLOSE_YMD,
                  GOODS_CNT
    )
 	VALUES( 
 				  #suppPoRegiPoCd#,            /* SUPP_PO_REGI_PO_CD */
                  TO_CHAR(SYSDATE,'YYYYMMDD'), /* TRANSF_REQ_YMD */
                  #transfDataSeq#,             /* TRANSF_DATA_SEQ */
                  #suppPoAccNo#,               /* SUPP_PO_ACC_SEED_NO */
                  #transfAmt#,                 /* TRANSF_AMT */
                  #transfDataDivCd#,           /* TRANSF_DATA_DIV_CD */
                  '01',                        /* TRANSF_DATA_FRWD_STUS_CD */
                  TO_CHAR(SYSDATE,'YYYYMMDD'), /* TRANSF_DATA_FRWD_YMD */
                  TO_CHAR(SYSDATE,'YYYYMMDD'), /* STRT_ADJ_PERIOD_YMD */
                  TO_CHAR(SYSDATE,'YYYYMMDD'), /* END_ADJ_PERIOD_YMD */
                  'bsmusr',                    /* LAST_REG_PRSN_ID */
                  SYSDATE,                     /* LAST_REG_DATE */
                  'N',                         /* CLOSE_YN, */
                  '',                          /* CLOSE_YMD, */
                  0                            /* GOODS_CNT */
    )
    ]]>	   
	</insert>
	
	<!--외부제휴주문 정산후환불처리-2. 외부제휴주문 정산후환불 반품이체정보변경-->
	<update id="modifyExternalRefundRet" parameterClass="java.util.HashMap">		
	<![CDATA[ 	  
	UPDATE  OD_RET_INTERFACE  A
    SET     A.POSA_ACC_TRANSF_STUS_CD='004',
            A.POSA_ACC_TRANSF_TREAT_YMD=TO_CHAR(SYSDATE,'YYYYMMDD'),
         	CLAIM_REFUND_YMD = TO_CHAR(SYSDATE , 'YYYYMMDD' ) , 
         	CLAIM_REFUND_HMS = TO_CHAR(SYSDATE , 'HH24MISS' ) , 
         	CLAIM_REFUND_ERNM = NULL, 
         	TREAT_STUS_CD = '003', 
         	CHG_DATE = SYSDATE , 
         	CHGER_ID = 'bsmuser', 
         	APPLY_YN = 'Y' , 
         	APPLY_YMD = TO_CHAR(SYSDATE,'yyyymmdd') , 
         	APPLY_HMS = TO_CHAR(SYSDATE,'hh24miss')
    WHERE 	A.ORDER_ITM_ID  = #orderItmId# 
    AND     A.CLAIM_REQ_SEQ = #claimReqSeq#
    ]]>	
	</update>	
	
	<select id="settleRefundAdjustment2_1" parameterClass="java.util.HashMap" resultClass="commMap">	
	<![CDATA[ 
	SELECT 	A.RECEV_PO_REGI_PO_CD,
            A.DEPOT_AMT,
            ( SELECT ACC_SEED_NO FROM ST_POST_ACCNO WHERE PO_REGI_PO_CD=A.RECEV_PO_REGI_PO_CD AND ACC_NO_DIV_CD ='05' ) AS ACC_NO,
            A.TRANSF_REQ_YMD,
            A.TRANSF_REQ_SEQ,
            A.TRANSF_DATA_DIV_CD   /* 05:순수수기이체 06:초과입금,취소환불*/
    FROM 	ST_RECEV_PO_DEP_NO_CHG A
    WHERE 	A.MONEY_DEPOT_STUS_CD IN ('001')
    AND 	A.TRANSF_REQ_YMD BETWEEN TO_CHAR(SYSDATE -10,'YYYYMMDD') AND TO_CHAR(SYSDATE,'YYYYMMDD')
	]]>	 
	</select>
	
	<!--일일반품정산 수기이체 및 실패재전송-->
	<insert id="settleRefundAdjustment2_1_1" parameterClass="java.util.HashMap">		
    <![CDATA[ 	  
    INSERT INTO  ST_SUPP_POREGI_TRF_AMT(
				   SUPP_PO_REGI_PO_CD,
	               TRANSF_REQ_YMD,
	               TRANSF_DATA_SEQ,
	               SUPP_PO_ACC_SEED_NO,
	               TRANSF_AMT,
	               TRANSF_DATA_DIV_CD ,
	               TRANSF_DATA_FRWD_STUS_CD,
	               TRANSF_DATA_FRWD_YMD,
	               STRT_ADJ_PERIOD_YMD,
	               END_ADJ_PERIOD_YMD,
	               LAST_REG_PRSN_ID,
	               LAST_REG_DATE,
	               CLOSE_YN,
	               CLOSE_YMD,
	               GOODS_CNT
	)
	VALUES( 	
				   #suppPoRegiPoCd#,
                   TO_CHAR(SYSDATE,'YYYYMMDD'),
                   #v_transfDataSeq#,
                   #suppPoAccNo#,
                   #transAmt#,
                   #transfDataDivCd#,
                   '01',
                   '',
                   #transfReqYmd#,
                   #transfReqYmd#,
                   'Batch',
                   SYSDATE,'N', '', 0 
	)
    ]]>	   
	</insert>
	
	<!--일일반품정산 수기이체 및 실패재전송-->
	<update id="settleRefundAdjustment2_1_2" parameterClass="java.util.HashMap">		
	<![CDATA[ 	  
	UPDATE 	ST_RECEV_PO_DEP_NO_CHG
    SET 	MONEY_DEPOT_STUS_CD    = '003',
        	MONEY_TRANSF_TREAT_YMD = TO_CHAR(SYSDATE,'YYYYMMDD')
    WHERE 	TRANSF_REQ_YMD    = #transfReqYmd#
    AND 	MONEY_DEPOT_STUS_CD IN ('001')
    AND 	RECEV_PO_REGI_PO_CD   = #suppPoRegiPoCd#
    AND 	TRANSF_REQ_SEQ = #transfReqSeq#
    ]]>	
	</update>	
	
	<select id="settleRefundAdjustment2_2" parameterClass="java.util.HashMap" resultClass="commMap">	
	<![CDATA[ 
	SELECT 	A.SUPP_PO_REGI_PO_CD,
            A.SUPP_COMP_CD,
            A.TRANSF_AMT,
            CASE WHEN A.TRANSF_DATA_DIV_CD IN ('01', '07') THEN ( SELECT X.ADJ_ACC_NO FROM CO_SUPP_COMP_MAST X WHERE X.SUPP_COMP_ID = A.SUPP_COMP_CD)
                 WHEN A.TRANSF_DATA_DIV_CD = '06' THEN ( SELECT ACC_SEED_NO FROM CM_POST_ACCNO WHERE PO_REGI_PO_CD = A.SUPP_PO_REGI_PO_CD AND ACC_NO_DIV_CD ='05')
                 WHEN A.TRANSF_DATA_DIV_CD IN('02', '03', '19') THEN ( SELECT ACC_SEED_NO FROM CM_POST_ACCNO WHERE ACC_NO_DIV_CD = A.TRANSF_DATA_DIV_CD)
                 WHEN A.TRANSF_DATA_DIV_CD = '17' THEN ( SELECT SEED_ACC_NO FROM MB_RECOMMEND_MGMT WHERE RECOMMEND_ID = A.LAST_REG_PRSN_ID)
                 ELSE ( SELECT ACC_SEED_NO FROM CM_POST_ACCNO WHERE PO_REGI_PO_CD = A.SUPP_PO_REGI_PO_CD AND ACC_NO_DIV_CD ='01')
            END AS ACC_NO,      
            TO_CHAR(SYSDATE,'YYYYMMDD') AS TRANSF_REQ_YMD,
            A.TRANSF_DATA_DIV_CD,
            A.STRT_ADJ_PERIOD_YMD,
            A.END_ADJ_PERIOD_YMD,
            DECODE(A.TRANSF_DATA_DIV_CD, '17', A.LAST_REG_PRSN_ID, 'bsmuser') AS LAST_REG_PRSN_ID
    FROM 	ST_SUPP_POREGI_TRF_AMT A
    WHERE 	A.TRANSF_RSLT_PFNC_CD <> '01'
    AND 	A.TRANSF_DATA_DIV_CD <> '17' /*보상금오류사항 실패재전송제외(국고세입으로 처리)*/
    AND 	A.TRANSF_REQ_YMD = (SELECT MAX(TRANSF_REQ_YMD) 
                                FROM ST_SUPP_POREGI_TRF_AMT W
                                WHERE TRANSF_REQ_YMD < TO_CHAR(SYSDATE,'YYYYMMDD')
                                )
	]]>	 
	</select>
		  		
	<insert id="settleRefundAdjustment2_2_1" parameterClass="java.util.HashMap">		
    <![CDATA[ 	  
    INSERT INTO  ST_SUPP_POREGI_TRF_AMT(
    			   SUPP_PO_REGI_PO_CD,
                   SUPP_COMP_CD, 
                   TRANSF_REQ_YMD,
                   TRANSF_DATA_SEQ,
                   SUPP_PO_ACC_SEED_NO,
                   TRANSF_AMT,
                   TRANSF_DATA_DIV_CD ,
                   TRANSF_DATA_FRWD_STUS_CD,
                   TRANSF_DATA_FRWD_YMD,
                   STRT_ADJ_PERIOD_YMD,
                   END_ADJ_PERIOD_YMD,
                   LAST_REG_PRSN_ID,
                   LAST_REG_DATE,
                   CLOSE_YN,
                   CLOSE_YMD,
                   GOODS_CNT
	)
	VALUES( 
				   #suppPoRegiPoCd#,
                   #suppCompCd#,
                   TO_CHAR(SYSDATE,'YYYYMMDD'),
                   #v_transfDataSeq#,
                   #suppPoAccNo#,
                   #transAmt#,
                   #transfDataDivCd#,
                   '01',
                   '',
                   #strtAdjPeriodYmd#,
                   #endAdjPeriodYmd#,
                   #lastRegPrsnId#,
                   SYSDATE,'N', 
                   '', 
                   0
	)
    ]]>	   
	</insert>		  
	
	<!--일일반품정산 수기이체 및 실패재전송 -->
	<select id="getMaxCtrtFeeTransfSeqData" parameterClass="java.util.HashMap" resultClass="int">	
	<![CDATA[ 	 
	SELECT 	NVL(MAX(TRANSF_DATA_SEQ), 0) AS TRANSF_DATA_SEQ
    FROM 	ST_CTRT_FEE_TRANSF
    WHERE 	TRANSF_REQ_YMD=TO_CHAR(SYSDATE,'YYYYMMDD')
	]]>	 	
	</select>  		
	
	<!--일일반품정산 수기이체 및 실패재전송 -->
	<select id="settleRefundAdjustment2_3" parameterClass="java.util.HashMap" resultClass="commMap">	
	<![CDATA[ 
	SELECT 	A.SUPP_PO_REGI_PO_CD,
            A.TRANSF_AMT,
            ( SELECT P.EDPSCD 
              FROM PICMT0060 P 
              WHERE A.SUPP_PO_REGI_PO_CD = P.REGIPOCD 
              AND P.USEYN = 'Y'
              AND ROWNUM <= 1 )||'00000000' AS ACC_NO, /*계좌*/
            TO_CHAR(SYSDATE,'YYYYMMDD') AS TRANSF_REQ_YMD,
            A.TRANSF_DATA_DIV_CD,
            A.ADJ_PERIOD_YM
 	FROM 	ST_CTRT_FEE_TRANSF A
    WHERE 	A.TRANSF_RSLT_PFNC_CD <> '01'
    AND 	A.TRANSF_REQ_YMD = (SELECT MAX(B.TRANSF_REQ_YMD) 
                                FROM ST_CTRT_FEE_TRANSF B 
                                WHERE B.TRANSF_REQ_YMD < TO_CHAR(SYSDATE,'YYYYMMDD')
                                )
	]]>	 
	</select>	
	
	<insert id="settleRefundAdjustment2_3_1" parameterClass="java.util.HashMap">		
    <![CDATA[ 	  
    INSERT INTO  ST_CTRT_FEE_TRANSF(
    					SUPP_PO_REGI_PO_CD,
                        TRANSF_REQ_YMD,
                        TRANSF_DATA_SEQ,
                        SUPP_PO_ACC_SEED_NO,
                        TRANSF_AMT,
                        TRANSF_DATA_DIV_CD ,
                        TRANSF_DATA_FRWD_STUS_CD,
                        TRANSF_DATA_FRWD_YMD,
                        ADJ_PERIOD_YM,
                        LAST_REG_PRSN_ID,
                        LAST_REG_DATE,
                        CLOSE_YN,
                        CLOSE_YMD,
                        GOODS_CNT
	)
	VALUES( 
						#suppPoRegiPoCd#,
                        TO_CHAR(SYSDATE,'YYYYMMDD'),
                        #ctrtFeeTransfDataSeq#,
                        #suppPoAccNo#,
                        #transfAmt#,
                        #transfDataDivCd#,
                        '01',
                        '',
                        #strtAdjPeriodYmd#,
                        'bsmuser',
                        SYSDATE,'N', 
                        '', 
                        0
	)
    ]]>	   
	</insert>	
	
	<select id="retrieveIfrPostFeeFileSeq" parameterClass="java.util.HashMap" resultClass="String">	
    <![CDATA[
    SELECT 	NVL(MAX(TRANSF_FILE_SEQ),0) as TRANSF_FILE_SEQ
    FROM 	IFR_POST_FEE_TRANSF 
    WHERE   TRANSF_REQ_YMD = #workPostKaleYmd#
    AND 	TRANSF_DATA_SEQ > 0   
    ]]>
    </select>

	<select id="retrieveIfrPostFeeTransfList" parameterClass="java.util.HashMap" resultClass="commMap">	
	<![CDATA[ 
	SELECT  TRANSF_REQ_YMD,
            TRANSF_DATA_SEQ,
            TRANSF_DATA_DIV_CD,
            TRANSF_RSLT_PFNC_CD,
            TRANSF_AMT,
            TRANSF_RSLT_CONT,
            LAST_REG_DATE
    FROM  	IFR_POST_FEE_TRANSF
    WHERE 	TRANSF_REQ_YMD = #workPostKaleYmd#
    AND   	TRANSF_FILE_SEQ = #transfPostFileSeq2#
    AND   	TRANSF_DATA_SEQ > 0
    ORDER BY TRANSF_DATA_SEQ
	]]>	 
	</select>	
	
	<update id="updatePostFeeTransf" parameterClass="java.util.HashMap">		
	<![CDATA[ 	  
	UPDATE  ST_POST_FEE_TRANSF A
    SET     A.TRANSF_RSLT_PFNC_CD = #transfRsltPfncCd#,
        	A.TRANSF_RSLT_CONT   = #transfRsltCont#,
        	A.TRANSF_DATA_FRWD_STUS_CD = '04',
       	 	A.TRANSF_DATA_FRWD_YMD = TO_CHAR(SYSDATE,'YYYYMMDD')
    WHERE 	A.TRANSF_REQ_YMD   = #workKaleYmd#
    AND 	A.TRANSF_DATA_SEQ  = #transfDataSeq#
    AND 	A.TRANSF_AMT = #transfAmt#
    ]]>	
	</update>
		  		
	<update id="updateIfrPostFeeTransf" parameterClass="java.util.HashMap">		
	<![CDATA[ 	  
	UPDATE IFR_POST_FEE_TRANSF A
    SET    A.USE_YN = 'Y'        
    WHERE  A.TRANSF_REQ_YMD = #workPostKaleYmd#
    AND    A.TRANSF_FILE_SEQ = #transfPostFileSeq2#
    ]]>	
	</update>
	
	<select id="getMaxPostFeeTransfSeqData" parameterClass="java.util.HashMap" resultClass="int">	
	<![CDATA[ 	 
	SELECT 	NVL(MAX(TRANSF_DATA_SEQ), 0) AS TRANSF_DATA_SEQ
    FROM 	ST_POST_FEE_TRANSF
    WHERE 	TRANSF_REQ_YMD=TO_CHAR(SYSDATE,'YYYYMMDD')
	]]>	 	
	</select>  	
	
	<select id="settleRefundPostFeeTransf2_4" parameterClass="java.util.HashMap" resultClass="commMap">	
	<![CDATA[ 
	SELECT 	A.SUPP_COMP_ID,
            A.TRANSF_AMT,
            ( SELECT X.ADJ_ACC_NO FROM CO_SUPP_COMP_MAST X WHERE X.SUPP_COMP_ID = A.SUPP_COMP_ID) AS ACC_NO,
            TO_CHAR(SYSDATE,'YYYYMMDD') AS TRANSF_REQ_YMD,
            A.TRANSF_DATA_DIV_CD,
            A.ADJ_PERIOD_YM
    FROM 	ST_POST_FEE_TRANSF A
    WHERE 	A.TRANSF_RSLT_PFNC_CD <> '01'
    AND 	A.TRANSF_REQ_YMD = (SELECT MAX(B.TRANSF_REQ_YMD) 
                                FROM ST_POST_FEE_TRANSF B 
                                WHERE B.TRANSF_REQ_YMD < TO_CHAR(SYSDATE,'YYYYMMDD'))
	]]>	 
	</select>
	
	<select id="settleRefundPostFeeTransf2_4_0" parameterClass="java.util.HashMap" resultClass="String">	
    <![CDATA[
    SELECT COUNT(*) CNT 
    FROM   ST_POST_FEE_TRANSF
    WHERE  1 = 1
    AND    SUPP_COMP_CD   = #suppCompId#
    AND    TRANSF_REQ_YMD = TO_CHAR(SYSDATE,'YYYYMMDD')
    AND    ADJ_PERIOD_YM  = #strtAdjPeriodYmd#
    AND    SUPP_PO_ACC_SEED_NO = #suppPoAccNo#
    AND    TRANSF_AMT = #transfAmt#
    ]]>
    </select>
    
    <insert id="settleRefundPostFeeTransf2_4_1" parameterClass="java.util.HashMap">		
    <![CDATA[ 	  
    INSERT INTO  ST_POST_FEE_TRANSF(
    				SUPP_COMP_ID,
                    TRANSF_REQ_YMD,
                    TRANSF_DATA_SEQ,
                    SUPP_PO_ACC_SEED_NO,
                    TRANSF_AMT,
                    TRANSF_DATA_DIV_CD ,
                    TRANSF_DATA_FRWD_STUS_CD,
                    TRANSF_DATA_FRWD_YMD,
                    ADJ_PERIOD_YM,
                    LAST_REG_PRSN_ID,
                    LAST_REG_DATE,
                    CLOSE_YN,
                    CLOSE_YMD
	)
	VALUES( 
					#suppCompId#,
                    TO_CHAR(SYSDATE,'YYYYMMDD'),
                    #postFeeTransfDataSeq#,
                    #suppPoAccNo#,
                    #transfAmt#,
                    #transfDataDivCd#,
                    '01',
                    '',
                    #strtAdjPeriodYmd#,
                    'bsmuser',
                    SYSDATE,'N', 
                    ''
	)
    ]]>	   
	</insert>	
	
	<select id="settleSuppAdjustment5_2_3" parameterClass="java.util.HashMap" resultClass="String">	
    <![CDATA[
    SELECT  YYMM
    FROM   (SELECT  DISTINCT SUBSTR(A.STRT_ADJ_PERIOD_YMD,1,6) AS YYMM 
            FROM    ST_CTRT_FEE_ADJ A 
            WHERE   A.TRANSF_DATA_FRWD_STUS_CD = '01' 
            ORDER BY SUBSTR(A.STRT_ADJ_PERIOD_YMD,1,6)
    )
    WHERE ROWNUM=1
    ]]>
    </select>
    
    <select id="settleSuppAdjustment5_3" parameterClass="java.util.HashMap" resultClass="commMap">	
	<![CDATA[ 
	SELECT  A.SUPP_PO_REGI_PO_CD,
            ( SELECT B.EDPSCD 
              FROM PICMT0060 B 
              WHERE A.SUPP_PO_REGI_PO_CD = B.REGIPOCD 
              AND B.USEYN = 'Y' AND ROWNUM <= 1) ||'00000000' AS ACC_NO,
            SUM(A.TRANSF_AMT) AS TRANSF_AMT
	FROM    ST_CTRT_FEE_ADJ A
    WHERE   A.STRT_ADJ_PERIOD_YMD LIKE SUBSTR(#yymm# , 1, 2)||'%'
    AND     A.TRANSF_DATA_FRWD_STUS_CD IN ('01')
    GROUP BY A.SUPP_PO_REGI_PO_CD
    HAVING SUM(A.TRANSF_AMT) > 0
    ORDER BY A.SUPP_PO_REGI_PO_CD
	]]>	 
	</select>
    
    <!-- 위탁수수료 이체 요청 및 ERP 결산 -->
    <insert id="settleSuppAdjustment5_3_1" parameterClass="java.util.HashMap">		
    <![CDATA[ 	  
    INSERT INTO  ST_CTRT_FEE_TRANSF(
                    SUPP_PO_REGI_PO_CD,
                    TRANSF_REQ_YMD,
                    TRANSF_DATA_SEQ,
                    SUPP_PO_ACC_SEED_NO,
                    TRANSF_AMT,
                    TRANSF_DATA_DIV_CD,
                    TRANSF_DATA_FRWD_STUS_CD,
                    TRANSF_DATA_FRWD_YMD,
                    ADJ_PERIOD_YM,
                    LAST_REG_PRSN_ID,
                    LAST_REG_DATE,
                    CLOSE_YN,
                    CLOSE_YMD,
                    GOODS_CNT
	)
	VALUES(
					#suppPoRegiPoCd#,
                    TO_CHAR(SYSDATE,'YYYYMMDD'),
                    #ctrtFeeTransfDataSeq#,
                    #accNo#,
                    #transfAmt#,
                    '15',
                    '01',
                    '',
                    #yymm#,
                    'bsmusr',
                    SYSDATE,
                    'N', 
                    '', 
                    0 
	)
    ]]>	   
	</insert>	
	
	<!-- 위탁수수료 이체 요청 및 ERP 결산 -->
	<update id="settleSuppAdjustment5_3_2" parameterClass="java.util.HashMap">		
	<![CDATA[ 	  
	UPDATE  ST_CTRT_FEE_ADJ /*BSM_위탁수수료정산정보*/
    SET     TRANSF_DATA_FRWD_STUS_CD = '02',
            TRANSF_DATA_FRWD_YMD = TO_CHAR(SYSDATE,'YYYYMMDD'),
            CLOSE_YN = 'Y',
            CLOSE_YMD = TO_CHAR(SYSDATE,'YYYYMMDD'),
            LAST_REG_DATE = SYSDATE
    WHERE   STRT_ADJ_PERIOD_YMD LIKE SUBSTR(#yymm#, 1, 2)||'%'
    AND     SUPP_PO_REGI_PO_CD = #suppPoRegiPoCd#
    AND     TRANSF_DATA_FRWD_STUS_CD IN ('01')
    ]]>	
	</update>
	
	<!-- 위탁수수료 이체 요청 및 ERP 결산 -->
	<insert id="settleSuppAdjustment5_3_3" parameterClass="java.util.HashMap">		
	<![CDATA[ 	  
	INSERT INTO PIEMT0040(
                CLOSEYMD,
                REGIPOCD,
                CLOSEDIVCD,
                INCOMEDIVCD,
                DOMFRNDIVCD,
                PRCPAYMETHDIVCD,
                PRCKINDDIVCD,
                MAILDIVCD,
                NORMREGIDIVCD,
                KINDPARTYDIVCD,
                GOODSDIVCD,
                CASHAMT,
                CREDITCARDAMT,
                MAILCNT,
                INCOMEYMD,
                CREATEDATE,
                SENDYN
    )
    (
     SELECT  A.TRANSF_REQ_YMD,A.SUPP_PO_REGI_PO_CD,'1',
             A.INCOMDIVCD,
             '1','10','5','99','9','9',
             A.GOODSDIVCD,
             SUM(A.TRANSFAMT),
             0,
             SUM(A.GOODSCNT),
             TO_CHAR(SYSDATE,'YYYYMMDD'),
             SYSDATE,
             'N'
     FROM(
             SELECT X.TRANSF_REQ_YMD,X.SUPP_PO_REGI_PO_CD,
                    DECODE(X.TRANSF_DATA_DIV_CD,'03','1105999901','16','1105999901','02','1105999902','10','1105999903','08','1105999906','09','1105999907') AS INCOMDIVCD,
                    DECODE(X.TRANSF_DATA_DIV_CD,'03','01','16','01','02','02','10','03','08','06','09','07') AS GOODSDIVCD,
                    SUM(X.TRANSF_AMT) AS TRANSFAMT,
                    SUM(X.GOODS_CNT) AS GOODSCNT
             FROM   ST_CTRT_FEE_ADJ X   /*BSM_위탁수수료정산정보*/
             WHERE  1=1
             AND    X.STRT_ADJ_PERIOD_YMD LIKE SUBSTR(#yymm#, 1, 2)||'%'
             AND    X.TRANSF_DATA_FRWD_STUS_CD  = '02'
             AND    X.TRANSF_DATA_FRWD_YMD = TO_CHAR(SYSDATE,'YYYYMMDD')
             AND    X.CLOSE_YN = 'Y'
             AND    X.CLOSE_YMD = TO_CHAR(SYSDATE,'YYYYMMDD')
             AND    X.SUPP_PO_REGI_PO_CD = #suppPoRegiPoCd#
             GROUP BY X.TRANSF_REQ_YMD,X.SUPP_PO_REGI_PO_CD,X.TRANSF_DATA_DIV_CD 
        ) A
        GROUP BY A.TRANSF_REQ_YMD,A.SUPP_PO_REGI_PO_CD,A.INCOMDIVCD,A.GOODSDIVCD
    )
    ]]>	
	</insert>
	
    <insert id="settleSuppAdjustment5_3_4" parameterClass="java.util.HashMap">		
    <![CDATA[ 	  
    INSERT INTO IF_PIEMT0040 (
             CLOSEYMD
            ,REGIPOCD
            ,CLOSEDIVCD
            ,INCOMEDIVCD
            ,DOMFRNDIVCD
            ,PRCPAYMETHDIVCD
            ,PRCKINDDIVCD
            ,MAILDIVCD
            ,NORMREGIDIVCD
            ,KINDPARTYDIVCD
            ,GOODSDIVCD
            ,CASHAMT
            ,CREDITCARDAMT
            ,MAILCNT
            ,INCOMEYMD
            ,CREATEDATE
            ,SENDYN
            ,RAISE_SEQ
            ,IF_ID
            ,INIT_TIME
            ,DEAL_STATE
            ,WRK_GBN
            ,TX_ID
        )
        (
         SELECT CLOSEYMD
               ,REGIPOCD
               ,CLOSEDIVCD
               ,INCOMEDIVCD
               ,DOMFRNDIVCD
               ,PRCPAYMETHDIVCD
               ,PRCKINDDIVCD
               ,MAILDIVCD
               ,NORMREGIDIVCD
               ,KINDPARTYDIVCD
               ,GOODSDIVCD
               ,CASHAMT
               ,CREDITCARDAMT
               ,MAILCNT
               ,INCOMEYMD
               ,CREATEDATE
               ,SENDYN
               ,IF_PIEMT0040_SQ01.NEXTVAL AS RAISE_SEQ
               ,IF_ID
               ,INIT_TIME
               ,DEAL_STATE
               ,WRK_GBN
               ,TX_ID
       FROM    (
                SELECT A.TRANSF_REQ_YMD AS CLOSEYMD
                     , A.SUPP_PO_REGI_PO_CD AS REGIPOCD
                     , '1' AS CLOSEDIVCD
                     , A.INCOMDIVCD AS INCOMEDIVCD
                     , '1' AS DOMFRNDIVCD
                     , '10' AS PRCPAYMETHDIVCD
                     , '5' AS PRCKINDDIVCD
                     , '99' AS MAILDIVCD
                     , '9' AS NORMREGIDIVCD
                     , '9' AS KINDPARTYDIVCD
                     , A.GOODSDIVCD AS GOODSDIVCD
                     , SUM(A.TRANSFAMT) AS CASHAMT
                     , 0 AS CREDITCARDAMT
                     , SUM(A.GOODSCNT) AS MAILCNT
                     , TO_CHAR(SYSDATE,'YYYYMMDD') AS INCOMEYMD
                     , SYSDATE AS CREATEDATE
                     , 'N' AS SENDYN
                     , 'IF-ESHPSH-015-P01I' AS IF_ID
                     , TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS') AS INIT_TIME 
                     , 'N' AS DEAL_STATE
                     , '1' AS WRK_GBN
                     , NULL AS TX_ID
                FROM
                (
                    SELECT X.TRANSF_REQ_YMD,X.SUPP_PO_REGI_PO_CD,
                          DECODE(X.TRANSF_DATA_DIV_CD,'03','1105999901','16','1105999901','02','1105999902','10','1105999903','08','1105999906','09','1105999907') AS INCOMDIVCD,
                          DECODE(X.TRANSF_DATA_DIV_CD,'03','01','16','01','02','02','10','03','08','06','09','07') AS GOODSDIVCD,
                          SUM(X.TRANSF_AMT) AS TRANSFAMT,
                          SUM(X.GOODS_CNT) AS GOODSCNT
                    FROM  ST_CTRT_FEE_ADJ X /*BSM_위탁수수료정산정보*/
                    WHERE 1=1
                    AND   X.STRT_ADJ_PERIOD_YMD LIKE SUBSTR(#yymm#, 1, 2)||'%'
                    AND   X.TRANSF_DATA_FRWD_STUS_CD  = '02'
                    AND   X.TRANSF_DATA_FRWD_YMD = TO_CHAR(SYSDATE,'YYYYMMDD')
                    AND   X.CLOSE_YN = 'Y'
                    AND   X.CLOSE_YMD = TO_CHAR(SYSDATE,'YYYYMMDD')
                    AND   X.SUPP_PO_REGI_PO_CD = #suppPoRegiPoCd#
                    GROUP BY X.TRANSF_REQ_YMD,X.SUPP_PO_REGI_PO_CD,X.TRANSF_DATA_DIV_CD 
                ) A
                GROUP BY A.TRANSF_REQ_YMD,A.SUPP_PO_REGI_PO_CD,A.INCOMDIVCD,A.GOODSDIVCD
            )
        )   
    ]]>	   
	</insert>	
	
	<!-- 위탁수수료 이체 요청 및 ERP 결산 -->
	<select id="settleSuppAdjustment5_4_1" parameterClass="java.util.HashMap" resultClass="int">	
	<![CDATA[ 	 
	SELECT COUNT(1) AS CNT
    FROM
    (
     SELECT A.SUPP_PO_REGI_PO_CD, SUM(A.TRANSF_AMT) AS TRANSF_AMT
     FROM   ST_CTRT_FEE_TRANSF A /*BSM_위탁수수료이체정보*/
     WHERE  1=1
     AND    A.TRANSF_REQ_YMD = TO_CHAR(SYSDATE,'YYYYMMDD')
     GROUP BY A.SUPP_PO_REGI_PO_CD   
     HAVING TO_CHAR(SUM(A.TRANSF_AMT)) NOT LIKE '%0'
    )
	]]>	 	
	</select>  	
	
	<select id="retrieveLastBusinessDate" parameterClass="java.util.HashMap" resultClass="String">	
    <![CDATA[
    SELECT MAX(A.WORKCALEYMD) AS LAST_BUSINESS_DATE 
    FROM   PIEMT0160 A
    WHERE  A.RCOCD='00'
    AND    A.WORKCALEYMD < TO_CHAR(SYSDATE, 'YYYYMMDD')
    AND    A.HOLDAYYN='N'
    ]]>
    </select>
	
	<select id="retrieveParentAccTrgt" parameterClass="java.util.HashMap" resultClass="commMap">	
	<![CDATA[ 
	SELECT ACCINOUTAMTYMD AS ACC_IN_OUT_AMT_YMD
             , BALSEQ AS BAL_SEQ
             , NVL(SUM(DEPOTAMT), 0) AS DEPOT_AMT
             , NVL(SUM(OUTAMT), 0) AS OUT_AMT
    FROM
    (
            SELECT TRANSF_REQ_YMD  ACCINOUTAMTYMD , 0  BALSEQ, 0 DEPOTAMT , SUM(TRANSF_AMT) OUTAMT
            FROM ST_SUPP_POREGI_TRF_AMT /*이체내역*/
            WHERE TRANSF_REQ_YMD  BETWEEN #lastBusinessDate# AND TO_CHAR(SYSDATE,'YYYYMMDD')
            AND TRANSF_DATA_FRWD_STUS_CD = '04'/*이체결과 완료*/
            AND TRANSF_RSLT_PFNC_CD='01'
            GROUP BY TRANSF_REQ_YMD
            UNION ALL
            SELECT TRANSF_REQ_YMD  ACCINOUTAMTYMD , 0  BALSEQ, 0 DEPOTAMT , SUM(TRANSF_AMT) OUTAMT
            FROM ST_SUPP_POREGI_TRF_AMT /*이체내역*/
            WHERE TRANSF_REQ_YMD  = TO_CHAR(SYSDATE,'YYYYMMDD')
            AND TRANSF_DATA_FRWD_STUS_CD IN('01', '02')/*01 정상 02 계좌번호오류*/
            GROUP BY TRANSF_REQ_YMD
            UNION ALL
            SELECT TRANSF_REQ_YMD  ACCINOUTAMTYMD , 0  BALSEQ, 0 DEPOTAMT , SUM(TRANSF_AMT) OUTAMT
            FROM ST_CTRT_FEE_TRANSF /*이체내역*/
            WHERE TRANSF_REQ_YMD  BETWEEN #lastBusinessDate# AND TO_CHAR(SYSDATE,'YYYYMMDD')
            AND TRANSF_DATA_FRWD_STUS_CD = '04' /*이체결과 완료*/
            AND TRANSF_RSLT_PFNC_CD='01'
            GROUP BY TRANSF_REQ_YMD
            UNION ALL
            SELECT TRANSF_REQ_YMD  ACCINOUTAMTYMD , 0  BALSEQ, 0 DEPOTAMT , SUM(TRANSF_AMT) OUTAMT
            FROM ST_CTRT_FEE_TRANSF /*이체내역*/
            WHERE TRANSF_REQ_YMD  = TO_CHAR(SYSDATE,'YYYYMMDD')
            AND TRANSF_DATA_FRWD_STUS_CD IN('01', '02') /*01 정상 02 계좌번호오류*/
            GROUP BY TRANSF_REQ_YMD
            UNION ALL
            SELECT DEPOT_YMD ACCINOUTAMTYMD, 0  BALSEQ, SUM(DEPOT_AMT) DEPOTAMT, 0 OUTAMT
            FROM ST_RECEV_PO_DEP_AMT
            WHERE DEPOT_YMD BETWEEN #lastBusinessDate# AND TO_CHAR(SYSDATE,'YYYYMMDD')
            AND DEPOT_AMT > 0  /*수기이체 제외*/
            GROUP BY DEPOT_YMD
            UNION ALL
            /*지원단센터입금액+창구카드입금액*//*현금을 제외한 창구의 금액*/
            SELECT TRANSF_REQ_YMD, 0  BALSEQ, SUM(DEPOT_AMT) DEPOTAMT, 0 OUTAMT
            FROM IFR_RECEV_PO_DEP_AMT
            WHERE TRANSF_REQ_YMD BETWEEN #lastBusinessDate# AND TO_CHAR(SYSDATE,'YYYYMMDD')
            AND DEPOT_AMT > 0  /*수기이체 제외*/
            and  DEPOT_CNT IN ( 89903, 99991, 99992, 99993, 99994, 99995, 99996, 99997,9997, 99998)                    
            GROUP BY TRANSF_REQ_YMD
            UNION ALL 
            /*BUY_COMP_DEPOT_YMD 수정(보상금입금내역만포함)*/
            SELECT BUY_COMP_DEPOT_YMD ACCINOUTAMTYMD, 0  BALSEQ, SUM(BUY_COMP_DEPOT_AMT) DEPOTAMT, 0 OUTAMT
            FROM ST_BUY_COMP_DEPOT_INFO /*매입사별 입금액*/
            WHERE BUY_COMP_DEPOT_YMD BETWEEN #lastBusinessDate# AND TO_CHAR(SYSDATE,'YYYYMMDD')
            AND PAYMETHOD = '1'
            AND BUY_COMP_CD = '998'
            GROUP BY BUY_COMP_DEPOT_YMD
            UNION ALL
            SELECT ACC_IN_OUT_AMT_YMD ACCINOUTAMTYMD, ACC_IN_OUT_AMT_DD_SEQ BALSEQ, DEPOT_AMT , OUT_AMT
            FROM ST_PARNT_ACC_BAL
            WHERE ACC_IN_OUT_AMT_YMD BETWEEN #lastBusinessDate# AND TO_CHAR(SYSDATE,'YYYYMMDD')
            AND PARNT_ACC_BAL_REV_YN='Y'  /*보정데이타*/
        )
        GROUP BY ACCINOUTAMTYMD, BALSEQ
        ORDER BY ACCINOUTAMTYMD, BALSEQ
	]]>	 
	</select>
	
	<!-- 모계좌 잔액관리 대상기간 전의 최종 입출금일 조회  -->
	<select id="retrieveParentAccLastDate" parameterClass="java.util.HashMap" resultClass="String">
	<![CDATA[
	SELECT  /*+ INDEX_DESC(PARNT_ACC_BAL ST_PARNT_ACC_BAL_PK )*/
            NVL(MAX(ACC_IN_OUT_AMT_YMD),TO_CHAR(SYSDATE,'YYYYMMDD') ) AS MAX_AMT_YMD
    FROM    ST_PARNT_ACC_BAL
    WHERE   ACC_IN_OUT_AMT_YMD < #lastBusinessDate#
    AND     ROWNUM=1		
	]]>	
	</select> 	
	
	<select id="retrieveParentAccLastBalance" parameterClass="java.util.HashMap" resultClass="String">	
	<![CDATA[ 	 
	SELECT NVL(NOW_BAL,0) AS NOW_BAL  /*처리기간 전의 최종 잔액*/
    FROM   ST_PARNT_ACC_BAL
    WHERE  ACC_IN_OUT_AMT_YMD = #maxAmtYmd#
    AND    ACC_IN_OUT_AMT_DD_SEQ = 
          (
            SELECT MAX(ACC_IN_OUT_AMT_DD_SEQ)
            FROM ST_PARNT_ACC_BAL
            WHERE ACC_IN_OUT_AMT_YMD = #maxAmtYmd#
          )
	]]>	 	
	</select>  	
	
	<!-- CTRT_FEE_TRANSF 계좌번호 암호화처리 -->
	<update id="updateCtrtFeeTransfAccNoEncrypt" parameterClass="java.util.HashMap">	
    <![CDATA[
	UPDATE ST_CTRT_FEE_TRANSF
    SET    SUPP_PO_ACC_NO = pkg_obfus.encrypt(rpad(NVL(SUPP_PO_ACC_NO , ' '), 24))
    WHERE  TRANSF_REQ_YMD = TO_CHAR(SYSDATE,'YYYYMMDD')
    AND    SUPP_PO_ACC_NO IS NOT NULL
    AND    LENGTH(SUPP_PO_ACC_NO) < 48
    ]]>			
	</update>
	
	
	<!-- 패션 B2B 정산실행 -->
	<!-- 공급업체 정산반영 step4 three ADJ_STATUS CHECK -->	   
	<select id="selectAdjStatusChkStepB2B" parameterClass="java.util.HashMap" resultClass="commMap">	
		SELECT
				(
				SELECT COUNT(*)
				FROM ST_ADJ_STATUS
				WHERE ADJ_DATE = TO_CHAR(SYSDATE, 'YYYYMMDD')
				AND ADJ_STATUS ='B1'
				) CURRENT_ADJ_STATUS_CNT_B2B,
				(
				SELECT COUNT(*)
				FROM ST_ADJ_STATUS
				WHERE ADJ_DATE = TO_CHAR(SYSDATE, 'YYYYMMDD')
				AND ADJ_STATUS ='B2'
				) CURRENT_REFUND_CNT_B2B			
		FROM 	DUAL
	</select>      
	
	<!-- 현금 입금내역 대사처리 비금융국 일별 -->	 
	<select id="selectSuppAdjustDaySettledB2B" parameterClass="java.util.HashMap" resultClass="commMap">	
    <![CDATA[	
	    /* 공급정산 대상일자 확정여부 및 시작, 종료일자를 조회 */
	    SELECT 1
	         , IS_TARGET_SETTLED
	         , IS_SUPP_DAY_STR
	         , LAST_SUPP_ADJ_FIN_DATE
	         , ADJ_START_DAY
	         , ADJ_END_DAY
	         , ADJ_CONFIRM_DAY
	         , NEW_NEXT_START_DAY
	         , IS_CTRT_TRANSF_SUPP_ADJ
	         , SUPP_ADJ_YN
	    FROM
	    (
	           SELECT  GBN
			         , IS_TARGET_SETTLED
			         , IS_SUPP_DAY_STR
			         , LAST_SUPP_ADJ_FIN_DATE
			         , ADJ_START_DAY
			         , ADJ_END_DAY
			         , ADJ_CONFIRM_DAY
			         , NEW_NEXT_START_DAY
			         , CASE WHEN TO_CHAR(TO_DATE(SUBSTR(TO_CHAR(ADD_MONTHS(TO_DATE(ADJ_START_DAY, 'YYYYMMDD'), 1), 'YYYYMMDD'), 1, 6)||01, 'YYYYMMDD') - 1, 'YYYYMMDD') BETWEEN ADJ_START_DAY AND ADJ_END_DAY THEN 'Y'
			                ELSE 'N'
			           END AS IS_CTRT_TRANSF_SUPP_ADJ
			         , SUPP_ADJ_YN
			   FROM
			      (
			           SELECT TO_CHAR(TO_DATE(LAST_SUPP_ADJ_FIN_DATE, 'YYYY/MM/DD'), 'YYYYMMDD') AS LAST_SUPP_ADJ_FIN_DATE
			                , TO_CHAR(TO_DATE(LAST_SUPP_ADJ_FIN_DATE, 'YYYY/MM/DD') + 1, 'YYYYMMDD') AS ADJ_START_DAY
			           FROM
			              (
						  SELECT MAX(END_DAY) AS LAST_SUPP_ADJ_FIN_DATE
						  FROM   ST_B2B_HISTORY_ADJUST
						  WHERE  SUPP_ADJ_YN = 'Y'
			        	  )
			      ) A,
			      (
			           SELECT GBN
			                , IS_TARGET_SETTLED
				            , IS_SUPP_DAY_STR
				            , ADJ_END_DAY
				            , ADJ_CONFIRM_DAY
				            , NEW_NEXT_START_DAY
				            , SUPP_ADJ_YN
			           FROM
			              (
			          		SELECT GBN
					             , IS_TARGET_SETTLED
					             , IS_SUPP_DAY_STR
					             , ADJ_END_DAY
					             , ADJ_CONFIRM_DAY
					             , NEW_NEXT_START_DAY
					             , SUPP_ADJ_YN
					          FROM
			          			 (
			          			 SELECT 1 AS GBN
						             , 'Y' AS IS_TARGET_SETTLED
						             , 'IS_SUPP_DAY_SETTLED' AS IS_SUPP_DAY_STR
						             , TO_CHAR(TO_DATE(END_DAY, 'YYYY/MM/DD'), 'YYYYMMDD') AS ADJ_END_DAY
						             , TO_CHAR(TO_DATE(CONFIRM_DAY, 'YYYY/MM/DD'), 'YYYYMMDD') AS ADJ_CONFIRM_DAY
						             , TO_CHAR(TO_DATE(END_DAY, 'YYYY/MM/DD')+1, 'YYYYMMDD') AS NEW_NEXT_START_DAY
						             , NVL(SUPP_ADJ_YN, 'B') AS SUPP_ADJ_YN
			          			 FROM
			          			    (
									 SELECT CONFIRM_DAY, END_DAY, SUPP_ADJ_YN
									 FROM ST_B2B_HISTORY_ADJUST
									 WHERE CONFIRM_DAY > (
														SELECT MAX(END_DAY) AS LAST_SUPP_ADJ_FIN_DATE
														FROM ST_B2B_HISTORY_ADJUST
														WHERE SUPP_ADJ_YN = 'Y'
			            								  )
			            		 AND NVL(SUPP_ADJ_YN, 'S') NOT IN('C', 'Y')
			            		 ORDER BY CONFIRM_DAY DESC, END_DAY DESC
			                     )
			           		  WHERE ROWNUM <= 1
			          		  UNION ALL
			          		  SELECT 2 AS GBN
					              , 'N' AS IS_TARGET_SETTLED
					              , 'NOT_SUPP_DAY_SETTLED' AS IS_SUPP_DAY_STR
					              , '' AS ADJ_END_DAY
					              , '' AS ADJ_CONFIRM_DAY
					              , '' AS NEW_NEXT_START_DAY
					              , '' AS SUPP_ADJ_YN
			          		  FROM  DUAL
			          	   )
			          ORDER BY GBN
			         )
			      WHERE ROWNUM <= 1
			   )B
		)
    ]]>		    
    </select>	 
    
    <!-- 정산대상 기간 내의 ORDER_ITM, ADJ_GOODS 가 일치하지 않는 건이 있는지 조회 -->
 	<select id="selectOrderItmMinusAdjGoodsB2B" parameterClass="java.util.HashMap" resultClass="int">	
	<![CDATA[ 	
        SELECT COUNT(*) AS DIFF_CNT
        FROM
		(	
		SELECT 
		    COMPLETE_DATE
		    , SUPP_PO_REGI_PO_CD
		    , SUPP_COMP_CD
		    , GOODS_CODE
		    , CANCEL_YN
		    , SHOP_ID
		    , RECV_TYPE
		    , NVL(SUM(SETTLE_AMOUNT), 0) AS SETTLE_AMOUNT
		/*  , NVL(SUM(FEE_AMOUNT), 0) AS FEE_AMOUNT */
		    , NVL(SUM(AMOUNT_CASH), 0) AS AMOUNT_CASH
		    , NVL(SUM(AMOUNT_ACCOUNT), 0) AS AMOUNT_ACCOUNT
		    , NVL(SUM(AMOUNT_BANKTOWN), 0) AS AMOUNT_BANKTOWN
		    , NVL(SUM(AMOUNT_OTHER_BANKTOWN), 0) AS AMOUNT_OTHER_BANKTOWN
		    , NVL(SUM(AMOUNT_CARD_POSTNET), 0) AS AMOUNT_CARD_POSTNET
		    , NVL(SUM(AMOUNT_CARD_EPOST), 0) AS AMOUNT_CARD_EPOST
		    , NVL(SUM(AMOUNT_ONURI), 0) AS AMOUNT_ONURI
		    , NVL(SUM(AMOUNT_CARD_OVERSEA), 0) AS AMOUNT_CARD_OVERSEA
		    , NVL(SUM(AMOUNT_SP), 0) AS AMOUNT_SP
		    , NVL(SUM(AMOUNT_RM), 0) AS AMOUNT_RM
		    , NVL(SUM(AMOUNT_COUPON_CSF), 0) AS AMOUNT_COUPON_CSF
		    , NVL(SUM(AMOUNT_COUPON_BIZ), 0) AS AMOUNT_COUPON_BIZ
		    , NVL(SUM(AMOUNT_MULTIGIFT), 0) AS AMOUNT_MULTIGIFT
		    , NVL(SUM(AMOUNT_CYBERPASS), 0) AS AMOUNT_CYBERPASS
		    , NVL(SUM(GOODS_CNT), 0) AS GOODS_CNT
		    , NVL(SUM(GOODS_AMOUNT), 0) AS GOODS_AMOUNT
		    , NVL(SUM(RET_CNT), 0) AS RET_CNT
		    , NVL(SUM(RET_AMOUNT), 0) AS RET_AMOUNT
		    , NVL(SUM(DELIV_DONE_CANCEL_CNT), 0) AS RET_CNT
		    , NVL(SUM(DELIV_DONE_CANCEL_AMOUNT), 0) AS RET_AMOUNT
		    , NVL(SUM(DEFICIT_CNT), 0) AS DEFICIT_CNT
		    , NVL(SUM(DEFICIT_AMOUNT), 0) AS DEFICIT_AMOUNT
		    , NVL(SUM(DELIV_CERT_AMOUNT), 0) AS DELIV_CERT_AMOUNT
		    , NVL(SUM(CONG_CARD_AMOUNT), 0) AS CONG_CARD_AMOUNT
		/*  , NVL(SUM(IMMEDIATE_PRCL_PRC), 0) AS IMMEDIATE_PRCL_PRC */
		/*  , NVL(SUM(LATER_PRCL_PRC), 0) AS LATER_PRCL_PRC */
		    , NVL(SUM(CSF_FEE), 0) AS CSF_FEE
		    , NVL(SUM(PO_FEE), 0) AS PO_FEE
		    , NVL(SUM(MART_FEE), 0) AS MART_FEE
		    , NVL(SUM(REFUND_CARD_SETL_FEE), 0) AS REFUND_CARD_SETL_FEE
		    , NVL(SUM(DEFICIT_CARD_SETL_FEE), 0) AS DEFICIT_CARD_SETL_FEE
		    , NVL(SUM(REFUND_GOODS_AMT), 0) AS REFUND_GOODS_AMT
		    , NVL(SUM(REFUND_CSF_FEE), 0) AS REFUND_CSF_FEE
		    , NVL(SUM(AMOUNT_OKCASH),0) AS AMOUNT_OKCASH
		    , NVL(SUM(AMOUNT_KAKAO),0) AS AMOUNT_KAKAO
		    , NVL(SUM(AMOUNT_MOBILE),0) AS AMOUNT_MOBILE                                   
			, NVL(SUM(AMOUNT_WALLET), 0) AS AMOUNT_WALLET
			, NVL(SUM(AMOUNT_POSTMPAY), 0) AS AMOUNT_POSTMPAY
			, NVL(SUM(AMOUNT_SYRUP_PAY), 0) AS AMOUNT_SYRUP_PAY
			, NVL(SUM(AMOUNT_NAVER_PAY), 0) AS AMOUNT_NAVER_PAY
			, NVL(SUM(AMOUNT_PAYNOW), 0) AS AMOUNT_PAYNOW
			, NVL(SUM(AMOUNT_PAYCO), 0) AS AMOUNT_PAYCO
			, NVL(SUM(AMOUNT_BANK_KAKAO), 0) AS AMOUNT_BANK_KAKAO
			, NVL(SUM(AMOUNT_RPAY), 0) AS AMOUNT_RPAY
			, NVL(SUM(AMOUNT_PAYPAL), 0) AS AMOUNT_PAYPAL /*신규 결제수단 추가부분 끝*/
		FROM
		(
	          SELECT 
                    TO_CHAR(A.APPR_DATE, 'YYYYMMDD') AS COMPLETE_DATE, 
                    B.SUPPO_RGIST_POCD AS SUPP_PO_REGI_PO_CD, 
                    B.SUPP_COMP_ID AS SUPP_COMP_CD,  
                    B.GOODS_CD AS    GOODS_CODE, 
                    B.GOODS_CANCEL_YN AS CANCEL_YN,
                    B.PAVLN_DIV_CD AS SHOP_ID,
                    A.ORDER_MDA_DIV_CD AS RECV_TYPE,
                    SUM((B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) + NVL(C.DELIV_CERT_FEE, 0) + NVL(C.CONG_CARD_FEE, 0)) AS SETTLE_AMOUNT,
                    SUM(NVL(C.FEE_AMT, 0)) AS FEE_AMOUNT,
                    SUM(DECODE(A.SETL_MEAN_CD,'15', NVL(B.CASH_BILL_AMT, 0), '17', NVL(B.CASH_BILL_AMT, 0), 0)) AS AMOUNT_CASH,
                    SUM(DECODE(A.SETL_MEAN_CD,'01',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0), 0))  AMOUNT_ACCOUNT,                                    
                    SUM(DECODE(A.SETL_MEAN_CD,'05',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0),
                                 '16',DECODE(A.PO_FNC_YN,'P',NVL(C.TRANS_AMT,0),0), 0))  AMOUNT_BANKTOWN,                                    
                    SUM(DECODE(A.SETL_MEAN_CD,'04',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0),
                                 '17',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0) - NVL(B.CASH_BILL_AMT,0), 0))  AMOUNT_CARD_POSTNET,
                    SUM(DECODE(A.SETL_MEAN_CD,'02',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0),
                                  '16',NVL(C.CARD_AMT1,0)+NVL(C.CARD_AMT2,0), 0)) AMOUNT_CARD_EPOST,                                                 
                    SUM(DECODE(A.SETL_MEAN_CD,'03',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0), 0)) AMOUNT_CARD_OVERSEA,
                    SUM(DECODE(A.SETL_MEAN_CD,'08',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0),
                                 '16',NVL(C.ONNURI_AMT,0),0)) AMOUNT_ONURI, 
                    SUM(B.PREMI_CUST_PNT_SETL_AMT) AS AMOUNT_SP,
                    SUM(B.PNT_USE_AMT) AS AMOUNT_RM,
                    SUM(DECODE(B.CP_CMP_CD1,'1',B.CPN_DC_AMT1, 0) + DECODE(B.CP_CMP_CD2,'1',B.CPN_DC_AMT2, 0)) AMOUNT_COUPON_CSF,        /* 쿠폰발행처코드-진흥원 */
                    SUM(DECODE(B.CP_CMP_CD1,'2',B.CPN_DC_AMT1, 0) + DECODE(B.CP_CMP_CD2,'2',B.CPN_DC_AMT2, 0)) AMOUNT_COUPON_BIZ          /* 쿠폰발행처코드-공급업체 */,
                    SUM(DECODE(B.CP_CMP_CD1,'3',B.CPN_DC_AMT1, 0) + DECODE(B.CP_CMP_CD2,'3',B.CPN_DC_AMT2, 0)) AMOUNT_COUPON_THANK,        /* 쿠폰유형코드*/
                    SUM(NVL(B.OKCASH_USE_AMT,0)) AS AMOUNT_OKCASH,
                    SUM(DECODE(A.SETL_MEAN_CD,'28',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0), 0)) AMOUNT_MULTIGIFT,
                    SUM(DECODE(A.SETL_MEAN_CD,'12',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0), 0)) AMOUNT_CYBERPASS,
                    SUM(1) GOODS_CNT,
                    SUM((B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0))) AS GOODS_AMOUNT,
                    SUM(CASE WHEN B.RETRNGD_YN = 'Y' THEN 1 ELSE 0 END) AS RET_CNT,    /* 반품여부 OD_ORDER_ITM/RETRNGD_YN */
                    SUM(CASE WHEN B.RETRNGD_YN = 'Y' THEN (B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) ELSE 0 END) AS RET_AMOUNT,
                    0 AS DELIV_DONE_CANCEL_CNT,
                    0 AS DELIV_DONE_CANCEL_AMOUNT,
                    SUM(CASE WHEN B.DEFICIT_YN = 'Y' THEN 1 ELSE 0 END) AS DEFICIT_CNT,    /* 조정여부 OD_ORDER_ITM.ADJ_YN */
                    SUM(CASE WHEN B.DEFICIT_YN = 'Y' THEN (B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) ELSE 0 END) AS DEFICIT_AMOUNT,
                    SUM(NVL(C.DELIV_CERT_FEE, 0)) AS DELIV_CERT_AMOUNT,
                    SUM(NVL(C.CONG_CARD_FEE, 0)) AS CONG_CARD_AMOUNT,
                    SUM(NVL(B.IMMPMN_PRCL_AMT, 0)) AS IMMEDIATE_PRCL_PRC,    /* 즉납 소포금액*/
                    SUM(NVL(B.AFTPMN_PRCL_AMT, 0)) AS LATER_PRCL_PRC,            /* 후납 소포금액 */
                    SUM(CASE WHEN B.RETRNGD_YN = 'Y' THEN 0 WHEN B.DEFICIT_YN = 'Y' THEN 0 ELSE NVL(C.POSA_FEE, 0) END) AS CSF_FEE,    /* 진흥원 수수료*/
                    SUM(CASE WHEN B.RETRNGD_YN = 'Y' THEN 0 WHEN B.DEFICIT_YN = 'Y' THEN 0 ELSE NVL(C.OUTSID_COPRTN_SHOPMALL_FEE, 0) END) AS EXT_MALL_FEE,    /* 외부_쇼핑몰_수수료 OD_ORDER_MAST.COPRTN_SHOPMALL_FEE(제휴쇼핑몰수수료-데이터 있음) OR OD_ORDER_FEE.OUTSID_COPRTN_SHOPMALL_FEE(외부제휴쇼핑몰수수료-데이터 없음) */
                    SUM(CASE WHEN B.RETRNGD_YN = 'Y' THEN 0 WHEN B.DEFICIT_YN = 'Y'  THEN 0 WHEN B.PAVLN_DIV_CD != '92' THEN NVL(C.FLWR_DELIV_FEE, 0) ELSE 0 END) AS PO_FEE,
                    SUM(CASE WHEN B.RETRNGD_YN = 'Y' THEN 0 WHEN B.DEFICIT_YN = 'Y'  THEN 0 WHEN B.PAVLN_DIV_CD = '92' THEN NVL(C.FLWR_DELIV_FEE, 0) ELSE 0 END) AS MART_FEE,
                    SUM(CASE WHEN B.RETRNGD_YN = 'Y' THEN NVL(C.RETRNGD_CARD_REFUND_FEE, 0) ELSE 0 END) AS REFUND_CARD_SETL_FEE,
                    SUM(CASE WHEN B.DEFICIT_YN = 'Y' THEN NVL(C.DEFICIT_CARD_SETL_FEE, 0) ELSE 0 END) AS DEFICIT_CARD_SETL_FEE, 
                    0 AS REFUND_GOODS_AMT, 
                    0 AS REFUND_CSF_FEE , 
                    SUM(DECODE(A.SETL_MEAN_CD,'20',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0), 0)) AMOUNT_KAKAO,
                    SUM(DECODE(A.SETL_MEAN_CD,'13',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0), 0)) AMOUNT_MOBILE,
                    SUM(DECODE(A.SETL_MEAN_CD,'06',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0),
                                 '16',DECODE(A.PO_FNC_YN,'P',0,NVL(C.TRANS_AMT,0)), 0)) AMOUNT_OTHER_BANKTOWN,                                    
                    SUM(DECODE(A.SETL_MEAN_CD,'10',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0), 0)) AMOUNT_WALLET,
                    SUM(DECODE(A.SETL_MEAN_CD,'21',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0), 0)) AMOUNT_POSTMPAY,
                    SUM(DECODE(A.SETL_MEAN_CD,'22',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0), 0)) AMOUNT_SYRUP_PAY,
                    SUM(DECODE(A.SETL_MEAN_CD,'23',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0), 0)) AMOUNT_NAVER_PAY,
                    SUM(DECODE(A.SETL_MEAN_CD,'24',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0), 0)) AMOUNT_PAYNOW,
                    SUM(DECODE(A.SETL_MEAN_CD,'25',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0), 0)) AMOUNT_PAYCO,
                    SUM(DECODE(A.SETL_MEAN_CD,'26',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0), 0)) AMOUNT_BANK_KAKAO,
                    SUM(DECODE(A.SETL_MEAN_CD,'27',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0), 0)) AMOUNT_RPAY,
                    SUM(DECODE(A.SETL_MEAN_CD,'07',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0), 0)) AMOUNT_PAYPAL
                    , 0 AS ADJAFTER_NETCANCEL_REVAMT
                    , 0 AS ADJAFTER_NETCANCEL_REVFEE
                FROM OD_ORDER_MAST A, OD_ORDER_ITM B, OD_ORDER_FEE C
                WHERE 1 = 1
                AND A.ORDER_ID = B.ORDER_ID
                AND B.ORDER_ITM_ID = C.ORDER_ITM_ID
                AND B.PAVLN_DIV_CD ='08'                                  
                AND A.APPR_DATE BETWEEN TO_DATE(#adj_start_day#,'YYYYMMDD') AND TO_DATE(#adj_end_day#,'YYYYMMDD')+.99999 
                AND NOT ( B.GOODS_CANCEL_YN = 'Y' AND NVL(B.AFTPMN_PRCL_AMT, 0) > 0)
                GROUP BY TO_CHAR(A.APPR_DATE, 'YYYYMMDD'), B.SUPPO_RGIST_POCD, B.SUPP_COMP_ID,  B.GOODS_CD, B.GOODS_CANCEL_YN, B.PAVLN_DIV_CD, A.ORDER_MDA_DIV_CD 
                UNION ALL
                SELECT 
                      A.CLAIM_CONF_YMD AS COMPLETE_DATE
                      , C.SUPPO_RGIST_POCD AS SUPP_PO_REGI_PO_CD
                      , C.SUPP_COMP_ID AS SUPP_COMP_CD
                      , C.GOODS_CD AS GOODS_CODE
                      , 'N' AS CANCEL_YN
                      , C.PAVLN_DIV_CD AS SHOP_ID
                      , B.ORDER_MDA_DIV_CD AS RECV_TYPE
                      , 0 AS SETTLE_AMOUNT
                      , 0 AS FEE_AMOUNT
                      , 0 AS AMOUNT_CASH
                      , 0 AS AMOUNT_ACCOUNT
                      , 0 AS AMOUNT_BANKTOWN
                      , 0 AS AMOUNT_CARD_POSTNET
                      , 0 AS AMOUNT_CARD_EPOST
                      , 0 AS AMOUNT_CARD_OVERSEA
                      , 0 AS AMOUNT_ONURI
                      , 0 AS AMOUNT_SP
                      , 0 AS AMOUNT_RM
                      , 0 AS AMOUNT_COUPON_CSF
                      , 0 AS AMOUNT_COUPON_BIZ
                      , 0 AS AMOUNT_COUPON_THANK
                      , 0 AS AMOUNT_OKCASH
                      , 0 AS AMOUNT_MULTIGIFT
                      , 0 AS AMOUNT_CYBERPASS
                      , 0 AS GOODS_CNT
                      , 0 AS GOODS_AMOUNT
                      , 0 AS RET_CNT
                      , 0 AS RET_AMOUNT
                      , 0 AS DELIV_DONE_CANCEL_CNT
                      , 0 AS DELIV_DONE_CANCEL_AMOUNT
                      , 0 AS DEFICIT_CNT
                      , 0 AS DEFICIT_AMOUNT
                      , 0 AS DELIV_CERT_AMOUNT
                      , 0 AS CONG_CARD_AMOUNT
                      , 0 AS IMMEDIATE_PRCL_PRC
                      , 0 AS LATER_PRCL_PRC
                      , 0 AS CSF_FEE
                      , 0 AS EXT_MALL_FEE
                      , 0 AS PO_FEE
                      , 0 AS MART_FEE
                      , 0 AS REFUND_CARD_SETL_FEE
                      , 0 AS DEFICIT_CARD_SETL_FEE
                      , SUM(NVL(A.CLAIM_TREAT_AMT, 0)) AS REFUND_GOODS_AMT
                      , SUM(NVL(A.REFUND_RETRNGD_CSF_FEE, 0)) AS REFUND_CSF_FEE
                      , 0 AS AMOUNT_KAKAO
                      , 0 AS AMOUNT_MOBILE
                      , 0 AS AMOUNT_OTHER_BANKTOWN                                    
				      , 0 AS AMOUNT_WALLET
				      , 0 AS AMOUNT_POSTMPAY
				      , 0 AS AMOUNT_SYRUP_PAY
				      , 0 AS AMOUNT_NAVER_PAY
				      , 0 AS AMOUNT_PAYNOW
				      , 0 AS AMOUNT_PAYCO
				      , 0 AS AMOUNT_BANK_KAKAO
				      , 0 AS AMOUNT_RPAY
				      , 0 AS AMOUNT_PAYPAL
				      , SUM(CASE WHEN RETRNGD_REFUND_METH_CD IN ('07','09') AND PAVLN_DIV_CD IN ('01','02','04','07','99') THEN NVL(A.CLAIM_TREAT_AMT, 0) ELSE 0 END) ADJAFTER_NETCANCEL_REVAMT
					  , SUM(CASE WHEN RETRNGD_REFUND_METH_CD IN ('07','09') AND PAVLN_DIV_CD IN ('01','02','04','07','99') THEN NVL(D.FEE_AMT, 0) ELSE 0 END) ADJAFTER_NETCANCEL_REVFEE
                  FROM OD_RET_INTERFACE A, OD_ORDER_MAST B, OD_ORDER_ITM C, OD_ORDER_FEE D
                  WHERE 1 = 1
                  AND A.ORDER_ID = B.ORDER_ID
                  AND A.ORDER_ITM_ID = C.ORDER_ITM_ID    /* 조인조건 확인 */
                  AND B.ORDER_ID = C.ORDER_ID
                  AND C.ORDER_ITM_ID= D.ORDER_ITM_ID
                  AND A.CLAIM_CONF_YMD BETWEEN #adj_start_day# AND #adj_end_day#                                
                  AND C.PAVLN_DIV_CD ='08'
                  AND C.GOODS_CANCEL_YN = 'N' 
                  AND (( A.RETRNGD_REFUND_METH_CD IN ('04','06','08') AND A.POSA_ACC_TRANSF_TRGT_YN = 'Y' ) OR ( A.RETRNGD_REFUND_METH_CD IN ('07','09'))) /*POSA_ACC_TRANSF_TRGT_YN: 진흥원계좌이체대상여부, RETRNGD_REFUND_METH_CD : 04 정산후현금, 06 제외매장정산후현금,07정산후카드,08제외매장정산후현금(창구),09정산후카드(창구)*/
                  AND A.TREAT_STUS_CD <> '004'
                  GROUP BY A.CLAIM_CONF_YMD, C.SUPPO_RGIST_POCD, C.SUPP_COMP_ID, C.GOODS_CD, C.PAVLN_DIV_CD, B.ORDER_MDA_DIV_CD
		)
		GROUP BY COMPLETE_DATE, SUPP_PO_REGI_PO_CD, SUPP_COMP_CD, GOODS_CODE, CANCEL_YN, SHOP_ID, RECV_TYPE  
		MINUS
		SELECT 
	            COMPLETE_DATE
	            , SUPP_PO_REGI_PO_CD
	            , SUPP_COMP_ID
	            , GOODS_CD
	            , GOODS_CANCEL_YN
	            , PAVLN_DIV_CD AS SHOP_ID
	            , ORDER_MDA_DIV_CD AS RECV_TYPE
	            , SETTLE_AMOUNT
	            /* , FEE_AMOUNT */
	            , AMOUNT_CASH
	            , AMOUNT_ACCOUNT
	            , AMOUNT_BANKTOWN
	            , AMOUNT_OTHER_BANKTOWN
	            , AMOUNT_CARD_POSTNET
	            , AMOUNT_CARD_EPOST
	            , AMOUNT_ONURI
	            , AMOUNT_CARD_OVERSEA
	            , AMOUNT_SP
	            , AMOUNT_RM
	            , AMOUNT_COUPON_CSF
	            , AMOUNT_COUPON_BIZ
	            , AMOUNT_MULTIGIFT
	            , AMOUNT_CYBERPASS
	            , GOODS_CNT
	            , GOODS_AMOUNT
	            , RET_CNT
	            , RET_AMOUNT
	            , DELIV_DONE_CANCEL_CNT
	            , DELIV_DONE_CANCEL_AMOUNT
	            , DEFICIT_CNT
	            , DEFICIT_AMOUNT
	            , DELIV_CERT_AMOUNT
	            , CONG_CARD_AMOUNT
	            /*    , IMMEDIATE_PRCL_PRC */
	            /*      , LATER_PRCL_PRC */
	            , CSF_FEE
	            , PO_FEE
	            , MART_FEE
	            , REFUND_CARD_SETL_FEE
	            , DEFICIT_CARD_SETL_FEE
	            , REFUND_GOODS_AMT
	            , REFUND_CSF_FEE
	            , AMOUNT_OKCASH
	            , AMOUNT_KAKAO
	            , AMOUNT_MOBILE
	            , AMOUNT_WALLET
				, AMOUNT_POSTMPAY
				, AMOUNT_SYRUP_PAY
				, AMOUNT_NAVER_PAY
				, AMOUNT_PAYNOW
				, AMOUNT_PAYCO
				, AMOUNT_BANK_KAKAO
				, AMOUNT_RPAY
				, AMOUNT_PAYPAL
		FROM ST_ADJ_GOODS
		WHERE COMPLETE_DATE BETWEEN #adj_start_day# AND #adj_end_day#    
		AND    PAVLN_DIV_CD ='08'
		AND    GOODS_CD <> '99'
		)		             	
    ]]>									
 	</select>			
 	
	<!-- 정산대상 기간 내의 ORDER_ITM, ADJ_GOODS 가 일치하지 않는 건이 있는지 조회 -->
 	<select id="selectAdjGoodsMinusOrderItmB2B" parameterClass="java.util.HashMap" resultClass="int">	
	<![CDATA[ 	
        SELECT COUNT(*) AS DIFF_CNT
        FROM
		(	
		SELECT 
	            COMPLETE_DATE
	            , SUPP_PO_REGI_PO_CD
	            , SUPP_COMP_ID
	            , GOODS_CD
	            , GOODS_CANCEL_YN
	            , PAVLN_DIV_CD AS SHOP_ID
	            , ORDER_MDA_DIV_CD AS RECV_TYPE
	            , SETTLE_AMOUNT
	            /* , FEE_AMOUNT */
	            , AMOUNT_CASH
	            , AMOUNT_ACCOUNT
	            , AMOUNT_BANKTOWN
	            , AMOUNT_OTHER_BANKTOWN
	            , AMOUNT_CARD_POSTNET
	            , AMOUNT_CARD_EPOST
	            , AMOUNT_ONURI
	            , AMOUNT_CARD_OVERSEA
	            , AMOUNT_SP
	            , AMOUNT_RM
	            , AMOUNT_COUPON_CSF
	            , AMOUNT_COUPON_BIZ
	            , AMOUNT_MULTIGIFT
	            , AMOUNT_CYBERPASS
	            , GOODS_CNT
	            , GOODS_AMOUNT
	            , RET_CNT
	            , RET_AMOUNT
	            , DELIV_DONE_CANCEL_CNT
	            , DELIV_DONE_CANCEL_AMOUNT
	            , DEFICIT_CNT
	            , DEFICIT_AMOUNT
	            , DELIV_CERT_AMOUNT
	            , CONG_CARD_AMOUNT
	            /*    , IMMEDIATE_PRCL_PRC */
	            /*      , LATER_PRCL_PRC */
	            , CSF_FEE
	            , PO_FEE
	            , MART_FEE
	            , REFUND_CARD_SETL_FEE
	            , DEFICIT_CARD_SETL_FEE
	            , REFUND_GOODS_AMT
	            , REFUND_CSF_FEE
	            , AMOUNT_OKCASH
	            , AMOUNT_KAKAO
	            , AMOUNT_MOBILE
	            , AMOUNT_WALLET
				, AMOUNT_POSTMPAY
				, AMOUNT_SYRUP_PAY
				, AMOUNT_NAVER_PAY
				, AMOUNT_PAYNOW
				, AMOUNT_PAYCO
				, AMOUNT_BANK_KAKAO
				, AMOUNT_RPAY
				, AMOUNT_PAYPAL
		FROM ST_ADJ_GOODS
		WHERE COMPLETE_DATE BETWEEN #adj_start_day# AND #adj_end_day#    
		AND    PAVLN_DIV_CD ='08'
		AND    GOODS_CD <> '99'
		MINUS
		SELECT 
		    COMPLETE_DATE
		    , SUPP_PO_REGI_PO_CD
		    , SUPP_COMP_CD
		    , GOODS_CODE
		    , CANCEL_YN
		    , SHOP_ID
		    , RECV_TYPE
		    , NVL(SUM(SETTLE_AMOUNT), 0) AS SETTLE_AMOUNT
		/*  , NVL(SUM(FEE_AMOUNT), 0) AS FEE_AMOUNT */
		    , NVL(SUM(AMOUNT_CASH), 0) AS AMOUNT_CASH
		    , NVL(SUM(AMOUNT_ACCOUNT), 0) AS AMOUNT_ACCOUNT
		    , NVL(SUM(AMOUNT_BANKTOWN), 0) AS AMOUNT_BANKTOWN
		    , NVL(SUM(AMOUNT_OTHER_BANKTOWN), 0) AS AMOUNT_OTHER_BANKTOWN
		    , NVL(SUM(AMOUNT_CARD_POSTNET), 0) AS AMOUNT_CARD_POSTNET
		    , NVL(SUM(AMOUNT_CARD_EPOST), 0) AS AMOUNT_CARD_EPOST
		    , NVL(SUM(AMOUNT_ONURI), 0) AS AMOUNT_ONURI
		    , NVL(SUM(AMOUNT_CARD_OVERSEA), 0) AS AMOUNT_CARD_OVERSEA
		    , NVL(SUM(AMOUNT_SP), 0) AS AMOUNT_SP
		    , NVL(SUM(AMOUNT_RM), 0) AS AMOUNT_RM
		    , NVL(SUM(AMOUNT_COUPON_CSF), 0) AS AMOUNT_COUPON_CSF
		    , NVL(SUM(AMOUNT_COUPON_BIZ), 0) AS AMOUNT_COUPON_BIZ
		    , NVL(SUM(AMOUNT_MULTIGIFT), 0) AS AMOUNT_MULTIGIFT
		    , NVL(SUM(AMOUNT_CYBERPASS), 0) AS AMOUNT_CYBERPASS
		    , NVL(SUM(GOODS_CNT), 0) AS GOODS_CNT
		    , NVL(SUM(GOODS_AMOUNT), 0) AS GOODS_AMOUNT
		    , NVL(SUM(RET_CNT), 0) AS RET_CNT
		    , NVL(SUM(RET_AMOUNT), 0) AS RET_AMOUNT
		    , NVL(SUM(DELIV_DONE_CANCEL_CNT), 0) AS RET_CNT
		    , NVL(SUM(DELIV_DONE_CANCEL_AMOUNT), 0) AS RET_AMOUNT
		    , NVL(SUM(DEFICIT_CNT), 0) AS DEFICIT_CNT
		    , NVL(SUM(DEFICIT_AMOUNT), 0) AS DEFICIT_AMOUNT
		    , NVL(SUM(DELIV_CERT_AMOUNT), 0) AS DELIV_CERT_AMOUNT
		    , NVL(SUM(CONG_CARD_AMOUNT), 0) AS CONG_CARD_AMOUNT
		/*  , NVL(SUM(IMMEDIATE_PRCL_PRC), 0) AS IMMEDIATE_PRCL_PRC */
		/*  , NVL(SUM(LATER_PRCL_PRC), 0) AS LATER_PRCL_PRC */
		    , NVL(SUM(CSF_FEE), 0) AS CSF_FEE
		    , NVL(SUM(PO_FEE), 0) AS PO_FEE
		    , NVL(SUM(MART_FEE), 0) AS MART_FEE
		    , NVL(SUM(REFUND_CARD_SETL_FEE), 0) AS REFUND_CARD_SETL_FEE
		    , NVL(SUM(DEFICIT_CARD_SETL_FEE), 0) AS DEFICIT_CARD_SETL_FEE
		    , NVL(SUM(REFUND_GOODS_AMT), 0) AS REFUND_GOODS_AMT
		    , NVL(SUM(REFUND_CSF_FEE), 0) AS REFUND_CSF_FEE
		    , NVL(SUM(AMOUNT_OKCASH),0) AS AMOUNT_OKCASH
		    , NVL(SUM(AMOUNT_KAKAO),0) AS AMOUNT_KAKAO
		    , NVL(SUM(AMOUNT_MOBILE),0) AS AMOUNT_MOBILE                                   
			, NVL(SUM(AMOUNT_WALLET), 0) AS AMOUNT_WALLET
			, NVL(SUM(AMOUNT_POSTMPAY), 0) AS AMOUNT_POSTMPAY
			, NVL(SUM(AMOUNT_SYRUP_PAY), 0) AS AMOUNT_SYRUP_PAY
			, NVL(SUM(AMOUNT_NAVER_PAY), 0) AS AMOUNT_NAVER_PAY
			, NVL(SUM(AMOUNT_PAYNOW), 0) AS AMOUNT_PAYNOW
			, NVL(SUM(AMOUNT_PAYCO), 0) AS AMOUNT_PAYCO
			, NVL(SUM(AMOUNT_BANK_KAKAO), 0) AS AMOUNT_BANK_KAKAO
			, NVL(SUM(AMOUNT_RPAY), 0) AS AMOUNT_RPAY
			, NVL(SUM(AMOUNT_PAYPAL), 0) AS AMOUNT_PAYPAL /*신규 결제수단 추가부분 끝*/
		FROM
		(
	          SELECT 
                    TO_CHAR(A.APPR_DATE, 'YYYYMMDD') AS COMPLETE_DATE, 
                    B.SUPPO_RGIST_POCD AS SUPP_PO_REGI_PO_CD, 
                    B.SUPP_COMP_ID AS SUPP_COMP_CD,  
                    B.GOODS_CD AS    GOODS_CODE, 
                    B.GOODS_CANCEL_YN AS CANCEL_YN,
                    B.PAVLN_DIV_CD AS SHOP_ID,
                    A.ORDER_MDA_DIV_CD AS RECV_TYPE,
                    SUM((B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) + NVL(C.DELIV_CERT_FEE, 0) + NVL(C.CONG_CARD_FEE, 0)) AS SETTLE_AMOUNT,
                    SUM(NVL(C.FEE_AMT, 0)) AS FEE_AMOUNT,
                    SUM(DECODE(A.SETL_MEAN_CD,'15', NVL(B.CASH_BILL_AMT, 0), '17', NVL(B.CASH_BILL_AMT, 0), 0)) AS AMOUNT_CASH,
                    SUM(DECODE(A.SETL_MEAN_CD,'01',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0), 0))  AMOUNT_ACCOUNT,                                    
                    SUM(DECODE(A.SETL_MEAN_CD,'05',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0),
                                 '16',DECODE(A.PO_FNC_YN,'P',NVL(C.TRANS_AMT,0),0), 0))  AMOUNT_BANKTOWN,                                    
                    SUM(DECODE(A.SETL_MEAN_CD,'04',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0),
                                 '17',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0) - NVL(B.CASH_BILL_AMT,0), 0))  AMOUNT_CARD_POSTNET,
                    SUM(DECODE(A.SETL_MEAN_CD,'02',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0),
                                  '16',NVL(C.CARD_AMT1,0)+NVL(C.CARD_AMT2,0), 0)) AMOUNT_CARD_EPOST,                                                 
                    SUM(DECODE(A.SETL_MEAN_CD,'03',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0), 0)) AMOUNT_CARD_OVERSEA,
                    SUM(DECODE(A.SETL_MEAN_CD,'08',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0),
                                 '16',NVL(C.ONNURI_AMT,0),0)) AMOUNT_ONURI, 
                    SUM(B.PREMI_CUST_PNT_SETL_AMT) AS AMOUNT_SP,
                    SUM(B.PNT_USE_AMT) AS AMOUNT_RM,
                    SUM(DECODE(B.CP_CMP_CD1,'1',B.CPN_DC_AMT1, 0) + DECODE(B.CP_CMP_CD2,'1',B.CPN_DC_AMT2, 0)) AMOUNT_COUPON_CSF,        /* 쿠폰발행처코드-진흥원 */
                    SUM(DECODE(B.CP_CMP_CD1,'2',B.CPN_DC_AMT1, 0) + DECODE(B.CP_CMP_CD2,'2',B.CPN_DC_AMT2, 0)) AMOUNT_COUPON_BIZ          /* 쿠폰발행처코드-공급업체 */,
                    SUM(DECODE(B.CP_CMP_CD1,'3',B.CPN_DC_AMT1, 0) + DECODE(B.CP_CMP_CD2,'3',B.CPN_DC_AMT2, 0)) AMOUNT_COUPON_THANK,        /* 쿠폰유형코드*/
                    SUM(NVL(B.OKCASH_USE_AMT,0)) AS AMOUNT_OKCASH,
                    SUM(DECODE(A.SETL_MEAN_CD,'28',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0), 0)) AMOUNT_MULTIGIFT,
                    SUM(DECODE(A.SETL_MEAN_CD,'12',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0), 0)) AMOUNT_CYBERPASS,
                    SUM(1) GOODS_CNT,
                    SUM((B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0))) AS GOODS_AMOUNT,
                    SUM(CASE WHEN B.RETRNGD_YN = 'Y' THEN 1 ELSE 0 END) AS RET_CNT,    /* 반품여부 OD_ORDER_ITM/RETRNGD_YN */
                    SUM(CASE WHEN B.RETRNGD_YN = 'Y' THEN (B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) ELSE 0 END) AS RET_AMOUNT,
                    0 AS DELIV_DONE_CANCEL_CNT,
                    0 AS DELIV_DONE_CANCEL_AMOUNT,
                    SUM(CASE WHEN B.DEFICIT_YN = 'Y' THEN 1 ELSE 0 END) AS DEFICIT_CNT,    /* 조정여부 OD_ORDER_ITM.ADJ_YN */
                    SUM(CASE WHEN B.DEFICIT_YN = 'Y' THEN (B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) ELSE 0 END) AS DEFICIT_AMOUNT,
                    SUM(NVL(C.DELIV_CERT_FEE, 0)) AS DELIV_CERT_AMOUNT,
                    SUM(NVL(C.CONG_CARD_FEE, 0)) AS CONG_CARD_AMOUNT,
                    SUM(NVL(B.IMMPMN_PRCL_AMT, 0)) AS IMMEDIATE_PRCL_PRC,    /* 즉납 소포금액*/
                    SUM(NVL(B.AFTPMN_PRCL_AMT, 0)) AS LATER_PRCL_PRC,            /* 후납 소포금액 */
                    SUM(CASE WHEN B.RETRNGD_YN = 'Y' THEN 0 WHEN B.DEFICIT_YN = 'Y' THEN 0 ELSE NVL(C.POSA_FEE, 0) END) AS CSF_FEE,    /* 진흥원 수수료*/
                    SUM(CASE WHEN B.RETRNGD_YN = 'Y' THEN 0 WHEN B.DEFICIT_YN = 'Y' THEN 0 ELSE NVL(C.OUTSID_COPRTN_SHOPMALL_FEE, 0) END) AS EXT_MALL_FEE,    /* 외부_쇼핑몰_수수료 OD_ORDER_MAST.COPRTN_SHOPMALL_FEE(제휴쇼핑몰수수료-데이터 있음) OR OD_ORDER_FEE.OUTSID_COPRTN_SHOPMALL_FEE(외부제휴쇼핑몰수수료-데이터 없음) */
                    SUM(CASE WHEN B.RETRNGD_YN = 'Y' THEN 0 WHEN B.DEFICIT_YN = 'Y'  THEN 0 WHEN B.PAVLN_DIV_CD != '92' THEN NVL(C.FLWR_DELIV_FEE, 0) ELSE 0 END) AS PO_FEE,
                    SUM(CASE WHEN B.RETRNGD_YN = 'Y' THEN 0 WHEN B.DEFICIT_YN = 'Y'  THEN 0 WHEN B.PAVLN_DIV_CD = '92' THEN NVL(C.FLWR_DELIV_FEE, 0) ELSE 0 END) AS MART_FEE,
                    SUM(CASE WHEN B.RETRNGD_YN = 'Y' THEN NVL(C.RETRNGD_CARD_REFUND_FEE, 0) ELSE 0 END) AS REFUND_CARD_SETL_FEE,
                    SUM(CASE WHEN B.DEFICIT_YN = 'Y' THEN NVL(C.DEFICIT_CARD_SETL_FEE, 0) ELSE 0 END) AS DEFICIT_CARD_SETL_FEE, 
                    0 AS REFUND_GOODS_AMT, 
                    0 AS REFUND_CSF_FEE , 
                    SUM(DECODE(A.SETL_MEAN_CD,'20',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0), 0)) AMOUNT_KAKAO,
                    SUM(DECODE(A.SETL_MEAN_CD,'13',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0), 0)) AMOUNT_MOBILE,
                    SUM(DECODE(A.SETL_MEAN_CD,'06',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0),
                                 '16',DECODE(A.PO_FNC_YN,'P',0,NVL(C.TRANS_AMT,0)), 0)) AMOUNT_OTHER_BANKTOWN,                                    
                    SUM(DECODE(A.SETL_MEAN_CD,'10',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0), 0)) AMOUNT_WALLET,
                    SUM(DECODE(A.SETL_MEAN_CD,'21',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0), 0)) AMOUNT_POSTMPAY,
                    SUM(DECODE(A.SETL_MEAN_CD,'22',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0), 0)) AMOUNT_SYRUP_PAY,
                    SUM(DECODE(A.SETL_MEAN_CD,'23',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0), 0)) AMOUNT_NAVER_PAY,
                    SUM(DECODE(A.SETL_MEAN_CD,'24',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0), 0)) AMOUNT_PAYNOW,
                    SUM(DECODE(A.SETL_MEAN_CD,'25',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0), 0)) AMOUNT_PAYCO,
                    SUM(DECODE(A.SETL_MEAN_CD,'26',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0), 0)) AMOUNT_BANK_KAKAO,
                    SUM(DECODE(A.SETL_MEAN_CD,'27',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0), 0)) AMOUNT_RPAY,
                    SUM(DECODE(A.SETL_MEAN_CD,'07',(B.DC_APPLY_PRC + NVL(B.OPTN_GOODS_APPLY_PRC,0) + NVL(B.SEND_PRC,0)) - (B.PREMI_CUST_PNT_SETL_AMT + NVL(B.PREMI_CUST_PNT_REFUND_APRV_AMT, 0)) - (B.PNT_USE_AMT + NVL(B.PNT_REFUND_SETL_AMT, 0) + NVL(B.WALLET_SETL_AMT, 0)) - B.CPN_DC_AMT - NVL(B.OKCASH_USE_AMT,0), 0)) AMOUNT_PAYPAL
                    , 0 AS ADJAFTER_NETCANCEL_REVAMT
                    , 0 AS ADJAFTER_NETCANCEL_REVFEE
                FROM OD_ORDER_MAST A, OD_ORDER_ITM B, OD_ORDER_FEE C
                WHERE 1 = 1
                AND A.ORDER_ID = B.ORDER_ID
                AND B.ORDER_ITM_ID = C.ORDER_ITM_ID
                AND B.PAVLN_DIV_CD ='08'                         
                AND A.APPR_DATE BETWEEN TO_DATE(#adj_start_day#,'YYYYMMDD') AND TO_DATE(#adj_end_day#,'YYYYMMDD')+.99999 
                AND NOT ( B.GOODS_CANCEL_YN = 'Y' AND NVL(B.AFTPMN_PRCL_AMT, 0) > 0)
                GROUP BY TO_CHAR(A.APPR_DATE, 'YYYYMMDD'), B.SUPPO_RGIST_POCD, B.SUPP_COMP_ID,  B.GOODS_CD, B.GOODS_CANCEL_YN, B.PAVLN_DIV_CD, A.ORDER_MDA_DIV_CD 
                UNION ALL
                SELECT 
                      A.CLAIM_CONF_YMD AS COMPLETE_DATE
                      , C.SUPPO_RGIST_POCD AS SUPP_PO_REGI_PO_CD
                      , C.SUPP_COMP_ID AS SUPP_COMP_CD
                      , C.GOODS_CD AS GOODS_CODE
                      , 'N' AS CANCEL_YN
                      , C.PAVLN_DIV_CD AS SHOP_ID
                      , B.ORDER_MDA_DIV_CD AS RECV_TYPE
                      , 0 AS SETTLE_AMOUNT
                      , 0 AS FEE_AMOUNT
                      , 0 AS AMOUNT_CASH
                      , 0 AS AMOUNT_ACCOUNT
                      , 0 AS AMOUNT_BANKTOWN
                      , 0 AS AMOUNT_CARD_POSTNET
                      , 0 AS AMOUNT_CARD_EPOST
                      , 0 AS AMOUNT_CARD_OVERSEA
                      , 0 AS AMOUNT_ONURI
                      , 0 AS AMOUNT_SP
                      , 0 AS AMOUNT_RM
                      , 0 AS AMOUNT_COUPON_CSF
                      , 0 AS AMOUNT_COUPON_BIZ
                      , 0 AS AMOUNT_COUPON_THANK
                      , 0 AS AMOUNT_OKCASH
                      , 0 AS AMOUNT_MULTIGIFT
                      , 0 AS AMOUNT_CYBERPASS
                      , 0 AS GOODS_CNT
                      , 0 AS GOODS_AMOUNT
                      , 0 AS RET_CNT
                      , 0 AS RET_AMOUNT
                      , 0 AS DELIV_DONE_CANCEL_CNT
                      , 0 AS DELIV_DONE_CANCEL_AMOUNT
                      , 0 AS DEFICIT_CNT
                      , 0 AS DEFICIT_AMOUNT
                      , 0 AS DELIV_CERT_AMOUNT
                      , 0 AS CONG_CARD_AMOUNT
                      , 0 AS IMMEDIATE_PRCL_PRC
                      , 0 AS LATER_PRCL_PRC
                      , 0 AS CSF_FEE
                      , 0 AS EXT_MALL_FEE
                      , 0 AS PO_FEE
                      , 0 AS MART_FEE
                      , 0 AS REFUND_CARD_SETL_FEE
                      , 0 AS DEFICIT_CARD_SETL_FEE
                      , SUM(NVL(A.CLAIM_TREAT_AMT, 0)) AS REFUND_GOODS_AMT
                      , SUM(NVL(A.REFUND_RETRNGD_CSF_FEE, 0)) AS REFUND_CSF_FEE
                      , 0 AS AMOUNT_KAKAO
                      , 0 AS AMOUNT_MOBILE
                      , 0 AS AMOUNT_OTHER_BANKTOWN                                    
				      , 0 AS AMOUNT_WALLET
				      , 0 AS AMOUNT_POSTMPAY
				      , 0 AS AMOUNT_SYRUP_PAY
				      , 0 AS AMOUNT_NAVER_PAY
				      , 0 AS AMOUNT_PAYNOW
				      , 0 AS AMOUNT_PAYCO
				      , 0 AS AMOUNT_BANK_KAKAO
				      , 0 AS AMOUNT_RPAY
				      , 0 AS AMOUNT_PAYPAL
				      , SUM(CASE WHEN RETRNGD_REFUND_METH_CD IN ('07','09') AND PAVLN_DIV_CD IN ('01','02','04','07','99') THEN NVL(A.CLAIM_TREAT_AMT, 0) ELSE 0 END) ADJAFTER_NETCANCEL_REVAMT
					  , SUM(CASE WHEN RETRNGD_REFUND_METH_CD IN ('07','09') AND PAVLN_DIV_CD IN ('01','02','04','07','99') THEN NVL(D.FEE_AMT, 0) ELSE 0 END) ADJAFTER_NETCANCEL_REVFEE
                  FROM OD_RET_INTERFACE A, OD_ORDER_MAST B, OD_ORDER_ITM C, OD_ORDER_FEE D
                  WHERE 1 = 1
                  AND A.ORDER_ID = B.ORDER_ID
                  AND A.ORDER_ITM_ID = C.ORDER_ITM_ID    /* 조인조건 확인 */
                  AND B.ORDER_ID = C.ORDER_ID
                  AND C.ORDER_ITM_ID= D.ORDER_ITM_ID
                  AND A.CLAIM_CONF_YMD BETWEEN #adj_start_day# AND #adj_end_day#                                
                  AND C.PAVLN_DIV_CD ='08'
                  AND C.GOODS_CANCEL_YN = 'N' 
                  AND (( A.RETRNGD_REFUND_METH_CD IN ('04','06','08') AND A.POSA_ACC_TRANSF_TRGT_YN = 'Y' ) OR ( A.RETRNGD_REFUND_METH_CD IN ('07','09'))) /*POSA_ACC_TRANSF_TRGT_YN: 진흥원계좌이체대상여부, RETRNGD_REFUND_METH_CD : 04 정산후현금, 06 제외매장정산후현금,07정산후카드,08제외매장정산후현금(창구),09정산후카드(창구)*/
                  AND A.TREAT_STUS_CD <> '004'
                  GROUP BY A.CLAIM_CONF_YMD, C.SUPPO_RGIST_POCD, C.SUPP_COMP_ID, C.GOODS_CD, C.PAVLN_DIV_CD, B.ORDER_MDA_DIV_CD
		)
		GROUP BY COMPLETE_DATE, SUPP_PO_REGI_PO_CD, SUPP_COMP_CD, GOODS_CODE, CANCEL_YN, SHOP_ID, RECV_TYPE  
		)		             	
    ]]>									
 	</select>	
 	
 	<!-- 공급업체 정산대금 SEL -->	   
	<select id="selectSettleSuppAdjustmentB2B2_3" parameterClass="java.util.HashMap" resultClass="commMap">	
	<![CDATA[ 	
		SELECT 1 AS RN
				, SUPP_PO_REGI_PO_CD
				, SUPP_COMP_CD
				, PAVLN_DIV_CD
				, NVL(TRANSF_AMT, 0) AS GOODS_AMT
				, NVL(LATER_PRCL_PRC, 0) AS LATER_PRCL_PRC
				, NVL(LATER_PRCL_SALE_PRC, 0) AS LATER_PRCL_SALE_PRC
				, NVL(GOODS_CNT, 0) AS GOODS_CNT
				FROM
					(
						SELECT 1
								, A.SUPP_PO_REGI_PO_CD
								, A.SUPP_COMP_ID AS SUPP_COMP_CD
								, A.PAVLN_DIV_CD
								, NVL(SUM( 
											CASE WHEN A.COMPLETE_DATE < '20130121' THEN (GOODS_AMOUNT - CSF_FEE - PO_FEE - MART_FEE - DECODE(A.PAVLN_DIV_CD, '02', 0, FEE_AMOUNT) - AMOUNT_COUPON_BIZ - RET_AMOUNT - DEFICIT_AMOUNT - LATER_PRCL_PRC) + (REFUND_CARD_SETL_FEE + DEFICIT_CARD_SETL_FEE) - (REFUND_GOODS_AMT - REFUND_CSF_FEE) 
												ELSE (GOODS_AMOUNT + NVL(LATER_PRCL_SALE_PRC,0) - CSF_FEE - PO_FEE - MART_FEE - FEE_AMOUNT - AMOUNT_COUPON_BIZ - RET_AMOUNT - DEFICIT_AMOUNT - LATER_PRCL_PRC) + (REFUND_CARD_SETL_FEE + DEFICIT_CARD_SETL_FEE) - (REFUND_GOODS_AMT - REFUND_CSF_FEE)	/* SHOP_ID 변환유무 확인 */
											END 
											)
						, 0) AS TRANSF_AMT
						, NVL(SUM(LATER_PRCL_PRC), 0) AS LATER_PRCL_PRC
						, NVL(SUM(NVL(LATER_PRCL_SALE_PRC,0)), 0) AS LATER_PRCL_SALE_PRC
						, NVL(SUM(GOODS_CNT), 0) AS GOODS_CNT
						FROM ST_ADJ_GOODS A
						WHERE 1=1
						AND COMPLETE_DATE BETWEEN #adj_start_day# AND #adj_end_day# 
						AND GOODS_CANCEL_YN = 'N'
						AND A.PAVLN_DIV_CD ='08'
						GROUP BY SUPP_PO_REGI_PO_CD, SUPP_COMP_ID, PAVLN_DIV_CD
					)
		WHERE TRANSF_AMT <> 0 OR LATER_PRCL_PRC <> 0
    ]]>									
 	</select>	
 	
	<!-- 상품가격 인서트 -->		
	<insert id="insertsettleSuppAdjustmentB2B2_3_1" parameterClass="java.util.HashMap">		
    <![CDATA[ 	
		INSERT INTO ST_SUPP_COMP_ADJ_INFO
			( 
				  SUPP_PO_REGI_PO_CD
				, SUPP_COMP_ID
				, ADJ_YMD
				, ADJ_HMS
				, ADJ_CD
				, COMP_PO_REGI_PO_CD
				, FORWARD_AMT
				, ADJ_AMT
				, RCPT_PRC
				, SUB_AMT
				, TRANS_AMT
				, BAL_AMT
				, ADD_AMT
				, ADJ_PERIOD_YMD
				, ADJ_TREAT_STUS_CD
				, ADJ_TREAT_YMD
				, PAVLN_DIV_CD
				, LATER_PRCL_NEXT_PRC
			)
		VALUES
			(
				  #supp_po_regi_po_cd#
				, #supp_comp_cd#
				, TO_CHAR(SYSDATE,'YYYYMMDD')
				, TO_CHAR(SYSDATE,'HH24MISS')
				, '01'
				, (SELECT X.compPoRegiPoCd FROM PICMT0060 X WHERE X.REGIPOCD = #supp_po_regi_po_cd# AND X.USEYN = 'Y')
				, 0
				, #goods_amt#
				, 0
				, 0
				, 0
				, 0
				, 0
				, #adj_start_day#||#adj_end_day#
				, '001'
				, '' 
				, #pavlnDivCd#
				, 0
			)               
    ]]> 			 
	</insert> 	 	
	
	<select id="selectSettleSuppAdjustmentB2B3_3" parameterClass="java.util.HashMap" resultClass="commMap">	
	<![CDATA[ 	
		SELECT SUPP_PO_REGI_PO_CD
			 , SUPP_COMP_ID
		FROM   ST_SUPP_COMP_ADJ_INFO
		WHERE  ADJ_TREAT_STUS_CD = '001' 
		AND    ADJ_CD = '01'
		AND    PAVLN_DIV_CD ='08'
		GROUP BY SUPP_PO_REGI_PO_CD,SUPP_COMP_ID
		HAVING COUNT(1) > 1	
    ]]>									
 	</select>
	
	<!-- 잔액계산 update  -->
	<update id="updateSettleSuppAdjustmentB2B3_4_3" parameterClass="java.util.HashMap">	
    <![CDATA[
		UPDATE ST_SUPP_COMP_ADJ_INFO SET 
			   TRANS_AMT = FORWARD_AMT + ADJ_AMT + SUB_AMT - nvl(LATER_PRCL_NEXT_PRC,0)
		WHERE  ADJ_TREAT_STUS_CD = '001' 
		AND    ADJ_CD = '01' 
		AND    PAVLN_DIV_CD ='08'
		AND    (FORWARD_AMT + ADJ_AMT + SUB_AMT - nvl(LATER_PRCL_NEXT_PRC,0) ) > 0
    ]]>			
	</update> 	
	
	<!-- 잔액계산 update  -->
	<update id="updateSettleSuppAdjustmentB2B3_4_4" parameterClass="java.util.HashMap">	
    <![CDATA[
		UPDATE ST_SUPP_COMP_ADJ_INFO SET 
			   BAL_AMT = FORWARD_AMT + ADJ_AMT + SUB_AMT - nvl(LATER_PRCL_NEXT_PRC,0)
		WHERE  ADJ_TREAT_STUS_CD = '001' 
		AND    ADJ_CD = '01' 
		AND    PAVLN_DIV_CD ='08'
		AND    (FORWARD_AMT + ADJ_AMT + SUB_AMT - nvl(LATER_PRCL_NEXT_PRC,0) ) < 0
		
    ]]>			
	</update> 		 
	
	<!-- 공급업체 상품대금 -->	    	
	<select id="selectSettleSuppAdjustmentB2B3_7" parameterClass="java.util.HashMap" resultClass="commMap">
	<![CDATA[
		SELECT A.SUPP_PO_REGI_PO_CD
			 , A.SUPP_COMP_ID AS SUPP_COMP_CD
			 , A.TRANS_AMT
			 , NVL(A.PAVLN_DIV_CD,'') AS PAVLN_DIV_CD
		FROM   ST_SUPP_COMP_ADJ_INFO A
		WHERE  A.ADJ_TREAT_STUS_CD = '001' 
		AND    A.PAVLN_DIV_CD ='08'
		AND    A.TRANS_AMT > 0
		AND    A.ADJ_CD = '01' 							
	]]>	
	</select>
	
	<!-- 공급정산 상품대금 003 update  -->
	<update id="updateSettleSuppAdjustmentB2B3_8" parameterClass="java.util.HashMap">	
    <![CDATA[
		UPDATE ST_SUPP_COMP_ADJ_INFO SET 
			   ADJ_TREAT_STUS_CD = '003'
			 , ADJ_TREAT_YMD = TO_CHAR(SYSDATE,'YYYYMMDD')
		WHERE  ADJ_TREAT_STUS_CD = '001' 
		AND    PAVLN_DIV_CD ='08'
		AND    ADJ_CD = '01' AND (FORWARD_AMT + ADJ_AMT + SUB_AMT) = 0 
		AND    TRANS_AMT = 0	      
    ]]>			
	</update> 
	
	<update id="updateSettleSuppAdjustmentB2B3_7_2" parameterClass="java.util.HashMap">	
    <![CDATA[
		UPDATE ST_SUPP_COMP_ADJ_INFO SET 
			   ADJ_TREAT_STUS_CD = '003'
			 , ADJ_TREAT_YMD = TO_CHAR(SYSDATE,'YYYYMMDD')
		WHERE  ADJ_TREAT_STUS_CD = '001' 
		AND    SUPP_COMP_ID = #supp_comp_cd#
		AND    ADJ_CD = '01'        
    ]]>			
	</update> 	
	
	<!-- 상품대금 일치여부 체크![이중데이타 체크용] -->
	<select id="selectFinalAdjAmtCompareB2B" parameterClass="java.util.HashMap" resultClass="int">
    <![CDATA[	
		SELECT SUM(NVL(ADJ_AMT,0)) - SUM(NVL(COMPARE_AMT,0)) AS CHKAMT
			FROM 
				(    
					SELECT '1' AS GUBUN
							, NVL(SUM( 
									CASE WHEN COMPLETE_DATE < '20130121' THEN (GOODS_AMOUNT - CSF_FEE - PO_FEE - MART_FEE - DECODE(PAVLN_DIV_CD, '02', 0, FEE_AMOUNT) - AMOUNT_COUPON_BIZ - RET_AMOUNT - DEFICIT_AMOUNT - LATER_PRCL_PRC) + (REFUND_CARD_SETL_FEE + DEFICIT_CARD_SETL_FEE) - (REFUND_GOODS_AMT - REFUND_CSF_FEE)
										ELSE (GOODS_AMOUNT + NVL(LATER_PRCL_SALE_PRC,0) - CSF_FEE - PO_FEE - MART_FEE - FEE_AMOUNT - AMOUNT_COUPON_BIZ - RET_AMOUNT - DEFICIT_AMOUNT - LATER_PRCL_PRC) + (REFUND_CARD_SETL_FEE + DEFICIT_CARD_SETL_FEE) - (REFUND_GOODS_AMT - REFUND_CSF_FEE)
									END
								),0) AS ADJ_AMT
					        , 0 COMPARE_AMT
					FROM    ST_ADJ_GOODS
					WHERE   PAVLN_DIV_CD ='08'
					AND     COMPLETE_DATE >= #adj_start_day#
					AND     COMPLETE_DATE <=#adj_end_day#
					AND     GOODS_CANCEL_YN='N'
					UNION ALL
					SELECT '1' AS GUBUN
						  , 0 ADJ_AMT
						  , SUM(ADJ_AMT) AS COMPARE_AMT
					FROM    ST_SUPP_COMP_ADJ_INFO
					WHERE   ADJ_PERIOD_YMD= #adj_start_day#||#adj_end_day#
					AND     PAVLN_DIV_CD ='08'
					AND     ADJ_CD ='01'
		) GROUP BY GUBUN
    ]]>			
	</select>    
	
	<!-- 공급정산 완료후 주문정산 원부 업데이트  -->
	<update id="updateDoneAdjGoodsB2B" parameterClass="java.util.HashMap">	
    <![CDATA[
		UPDATE ST_ADJ_GOODS 
		SET    ADJ_STUS_CD = '002'
			 , ADJ_TREAT_YMD = TO_CHAR(SYSDATE, 'YYYYMMDD')
		WHERE  1 = 1
		AND    COMPLETE_DATE BETWEEN #adj_start_day# AND #adj_end_day#
		AND    PAVLN_DIV_CD ='08'
    ]]>			
	</update> 
	
	<!-- 공급정산 완료후 주문 원부 업데이트  -->
	<update id="updateDoneOdOrderItmB2B" parameterClass="java.util.HashMap">	
    <![CDATA[
		UPDATE  OD_ORDER_ITM
    SET     ADJ_YN = 'Y',
			      ADJ_DATE = SYSDATE
    WHERE   1 = 1
    AND     ORDER_ITM_ID IN ( 
                           SELECT B.ORDER_ITM_ID 
                           FROM   OD_ORDER_MAST A, OD_ORDER_ITM B
                           WHERE 1 = 1
                           AND A.ORDER_ID = B.ORDER_ID
                           AND B.PAVLN_DIV_CD ='08'
                           AND A.APPR_DATE BETWEEN TO_DATE(#adj_start_day#, 'YYYYMMDD') AND TO_DATE(#adj_end_day#, 'YYYYMMDD') + .99999
                           )
    ]]>			
	</update> 
	
	<!-- 공급정산 완료후 결제정보 업데이트 -->
	<update id="updateDoneOdOrderSetlB2B" parameterClass="java.util.HashMap">	
    <![CDATA[
		UPDATE OD_ORDER_SETL ODS
		SET    ODS.JUNG_COMPLETE_DATE = TO_CHAR(SYSDATE, 'YYYYMMDD')
			 , ODS.JUNG_YN = 'Y'
		WHERE  ODS.USE_YN = 'Y'
		AND    ODS.SETL_APPR_DATE BETWEEN TO_DATE(#adj_start_day#, 'YYYYMMDD') AND TO_DATE(#adj_end_day#, 'YYYYMMDD') + .99999 
	    AND    EXISTS (
					SELECT 1 
					FROM (
						  SELECT A.ORDER_ID
						  FROM   OD_ORDER_MAST A, OD_ORDER_ITM B
						  WHERE A.ORDER_ID = B.ORDER_ID
						  AND    A.APPR_DATE BETWEEN TO_DATE(#adj_start_day#, 'YYYYMMDD') AND TO_DATE(#adj_end_day#, 'YYYYMMDD') + .99999 
						  AND    B.PAVLN_DIV_CD ='08'
						  GROUP BY A.ORDER_ID
					) C
					WHERE C.ORDER_ID = ODS.ORDER_ID
					)			
    ]]>		
	</update> 	
	
	<!-- 공급정산 완료후 ST_HISTORY_ADJUST 업데이트 -->
	<update id="updateDoneHistoryAdjustB2B" parameterClass="java.util.HashMap">	
    <![CDATA[
		UPDATE ST_B2B_HISTORY_ADJUST SET 
			   SUPP_ADJ_YN = 'Y' 
		WHERE  END_DAY = TO_CHAR(TO_DATE(#adj_end_day#, 'YYYYMMDD'), 'YYYY/MM/DD')              
    ]]>			
	</update> 		
	
	<!-- 공급정산 롤백 -->
	<delete id="deleteRollbackSuppAdjB2B_2_2" parameterClass="java.util.HashMap">
		DELETE FROM ST_SUPP_COMP_ADJ_INFO 
		WHERE  ADJ_YMD = TO_CHAR(SYSDATE,'YYYYMMDD')	
		AND    PAVLN_DIV_CD = '08'
	</delete>	
	
	<!-- 공급정산 롤백 -->
	<update id="updateRollbackSuppAdjB2B_2_4" parameterClass="java.util.HashMap">	
    <![CDATA[
		UPDATE ST_SUPP_COMP_ADJ_INFO SET 
			   ADJ_TREAT_STUS_CD = '001'
		WHERE  ADJ_CD= '01' 
		AND    ADJ_TREAT_STUS_CD IN ('002','003') 
		AND    ADJ_TREAT_YMD = TO_CHAR(SYSDATE,'YYYYMMDD') 
		AND    PAVLN_DIV_CD = '08'
    ]]>			
	</update>	
	
	<select id="getSuppAdjustDayForRollbackB2B" parameterClass="java.util.HashMap" resultClass="commMap">
    <![CDATA[
		 SELECT 1
             , TO_CHAR(TO_DATE(CONFIRM_DAY, 'YYYY/MM/DD'), 'YYYYMMDD') AS ADJ_CONFIRM_DAY
             , TO_CHAR(TO_DATE(START_DAY, 'YYYY/MM/DD') +1, 'YYYYMMDD') AS ADJ_START_DAY
             , TO_CHAR(TO_DATE(END_DAY, 'YYYY/MM/DD'), 'YYYYMMDD') AS ADJ_END_DAY
        FROM
        ( 
          SELECT MAX(END_DAY) AS START_DAY
          FROM ST_B2B_HISTORY_ADJUST
          WHERE END_DAY < (
            SELECT MAX(END_DAY)
            FROM ST_B2B_HISTORY_ADJUST
            WHERE SUPP_ADJ_YN = 'Y'
          )
          AND  SUPP_ADJ_YN = 'Y'
        )A,
        (
          SELECT END_DAY, CONFIRM_DAY
          FROM
          (
            SELECT END_DAY, CONFIRM_DAY
            FROM ST_B2B_HISTORY_ADJUST
            WHERE END_DAY = (
                SELECT MAX(END_DAY)
                FROM ST_B2B_HISTORY_ADJUST
                WHERE SUPP_ADJ_YN = 'Y'
            )
            AND SUPP_ADJ_YN = 'Y'
            ORDER BY CONFIRM_DAY DESC
          )
          WHERE ROWNUM <= 1
        )B
    ]]>
	</select>	
	
	<!-- 공급정산 롤백 -->
	<update id="updateRollbackSuppAdjB2B_3_1" parameterClass="java.util.HashMap">	
    <![CDATA[
		UPDATE ST_ADJ_GOODS 
		SET    ADJ_TREAT_YMD = NULL
		     , ADJ_STUS_CD = '001'
		WHERE  1=1
		AND    COMPLETE_DATE BETWEEN #adj_start_day# AND #adj_end_day#
		AND    PAVLN_DIV_CD = '08'
		AND    ADJ_STUS_CD = '002'  
    ]]>			
	</update>
	
	<!-- 공급정산 롤백 주문원부 -->
	<update id="updateRollbackSuppAdjB2B_3_3" parameterClass="java.util.HashMap">	
    <![CDATA[
		UPDATE  OD_ORDER_ITM
    SET     ADJ_YN = 'N',
			      ADJ_DATE = NULL
    WHERE   1 = 1
    AND     ORDER_ITM_ID IN ( 
                           SELECT B.ORDER_ITM_ID 
                           FROM   OD_ORDER_MAST A, OD_ORDER_ITM B
                           WHERE 1 = 1
                           AND A.ORDER_ID = B.ORDER_ID
                           AND B.PAVLN_DIV_CD = '08'
                           AND TO_CHAR(B.ADJ_DATE,'YYYYMMDD') = TO_CHAR(SYSDATE,'YYYYMMDD')
                           AND B.ADJ_YN = 'Y'
                           AND A.APPR_DATE BETWEEN TO_DATE(#adj_start_day#, 'YYYYMMDD') AND TO_DATE(#adj_end_day#, 'YYYYMMDD') + .99999
                           )                      
    ]]>			
	</update>								

	<!-- 공급정산 롤백 결제정보 -->
	<update id="updateRollbackSuppAdjB2B_3_4" parameterClass="java.util.HashMap">	
    <![CDATA[
    	UPDATE OD_ORDER_SETL ODS
        SET    ODS.JUNG_COMPLETE_DATE = NULL
             , ODS.JUNG_YN = 'N'
        WHERE  ODS.USE_YN = 'Y'
        AND    ODS.SETL_APPR_DATE BETWEEN TO_DATE(#adj_start_day#, 'YYYYMMDD') AND TO_DATE(#adj_end_day#, 'YYYYMMDD') + .99999 
        AND    ODS.JUNG_COMPLETE_DATE =  TO_CHAR(SYSDATE,'YYYYMMDD')
        AND    ODS.JUNG_YN = 'Y'
        AND    EXISTS (
					SELECT 1 
					FROM (
						  SELECT A.ORDER_ID
						  FROM   OD_ORDER_MAST A, OD_ORDER_ITM B
						  WHERE A.ORDER_ID = B.ORDER_ID
						  AND    A.APPR_DATE BETWEEN TO_DATE(#adj_start_day#, 'YYYYMMDD') AND TO_DATE(#adj_end_day#, 'YYYYMMDD') + .99999 
						  AND    B.PAVLN_DIV_CD = '08'
						  GROUP BY A.ORDER_ID
					) C
					WHERE C.ORDER_ID = ODS.ORDER_ID
					)
    ]]>			
    
	</update>	
	
	<!-- 공급정산 롤백 결제정보 -->
	<update id="updateRollbackSuppAdjB2B_3_5" parameterClass="java.util.HashMap">	
    <![CDATA[
		UPDATE ST_B2B_HISTORY_ADJUST 
		SET    SUPP_ADJ_YN = 'N' 
		WHERE  END_DAY = TO_CHAR(TO_DATE(#adj_end_day#, 'YYYYMMDD'), 'YYYY/MM/DD')
		AND    SUPP_ADJ_YN = 'Y'   
    ]]>			
	</update>		
	
</sqlMap>
